(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // vendor/topbar.js
  var require_topbar = __commonJS({
    "vendor/topbar.js"(exports, module) {
      (function(window2, document2) {
        "use strict";
        (function() {
          var lastTime = 0;
          var vendors = ["ms", "moz", "webkit", "o"];
          for (var x = 0; x < vendors.length && !window2.requestAnimationFrame; ++x) {
            window2.requestAnimationFrame = window2[vendors[x] + "RequestAnimationFrame"];
            window2.cancelAnimationFrame = window2[vendors[x] + "CancelAnimationFrame"] || window2[vendors[x] + "CancelRequestAnimationFrame"];
          }
          if (!window2.requestAnimationFrame)
            window2.requestAnimationFrame = function(callback, element) {
              var currTime = (/* @__PURE__ */ new Date()).getTime();
              var timeToCall = Math.max(0, 16 - (currTime - lastTime));
              var id = window2.setTimeout(function() {
                callback(currTime + timeToCall);
              }, timeToCall);
              lastTime = currTime + timeToCall;
              return id;
            };
          if (!window2.cancelAnimationFrame)
            window2.cancelAnimationFrame = function(id) {
              clearTimeout(id);
            };
        })();
        var canvas, currentProgress, showing, progressTimerId = null, fadeTimerId = null, delayTimerId = null, addEvent = function(elem, type, handler) {
          if (elem.addEventListener)
            elem.addEventListener(type, handler, false);
          else if (elem.attachEvent)
            elem.attachEvent("on" + type, handler);
          else
            elem["on" + type] = handler;
        }, options = {
          autoRun: true,
          barThickness: 3,
          barColors: {
            0: "rgba(26,  188, 156, .9)",
            ".25": "rgba(52,  152, 219, .9)",
            ".50": "rgba(241, 196, 15,  .9)",
            ".75": "rgba(230, 126, 34,  .9)",
            "1.0": "rgba(211, 84,  0,   .9)"
          },
          shadowBlur: 10,
          shadowColor: "rgba(0,   0,   0,   .6)",
          className: null
        }, repaint = function() {
          canvas.width = window2.innerWidth;
          canvas.height = options.barThickness * 5;
          var ctx = canvas.getContext("2d");
          ctx.shadowBlur = options.shadowBlur;
          ctx.shadowColor = options.shadowColor;
          var lineGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
          for (var stop in options.barColors)
            lineGradient.addColorStop(stop, options.barColors[stop]);
          ctx.lineWidth = options.barThickness;
          ctx.beginPath();
          ctx.moveTo(0, options.barThickness / 2);
          ctx.lineTo(
            Math.ceil(currentProgress * canvas.width),
            options.barThickness / 2
          );
          ctx.strokeStyle = lineGradient;
          ctx.stroke();
        }, createCanvas = function() {
          canvas = document2.createElement("canvas");
          var style = canvas.style;
          style.position = "fixed";
          style.top = style.left = style.right = style.margin = style.padding = 0;
          style.zIndex = 100001;
          style.display = "none";
          if (options.className)
            canvas.classList.add(options.className);
          document2.body.appendChild(canvas);
          addEvent(window2, "resize", repaint);
        }, topbar2 = {
          config: function(opts) {
            for (var key in opts)
              if (options.hasOwnProperty(key))
                options[key] = opts[key];
          },
          show: function(delay) {
            if (showing)
              return;
            if (delay) {
              if (delayTimerId)
                return;
              delayTimerId = setTimeout(() => topbar2.show(), delay);
            } else {
              showing = true;
              if (fadeTimerId !== null)
                window2.cancelAnimationFrame(fadeTimerId);
              if (!canvas)
                createCanvas();
              canvas.style.opacity = 1;
              canvas.style.display = "block";
              topbar2.progress(0);
              if (options.autoRun) {
                (function loop() {
                  progressTimerId = window2.requestAnimationFrame(loop);
                  topbar2.progress(
                    "+" + 0.05 * Math.pow(1 - Math.sqrt(currentProgress), 2)
                  );
                })();
              }
            }
          },
          progress: function(to) {
            if (typeof to === "undefined")
              return currentProgress;
            if (typeof to === "string") {
              to = (to.indexOf("+") >= 0 || to.indexOf("-") >= 0 ? currentProgress : 0) + parseFloat(to);
            }
            currentProgress = to > 1 ? 1 : to;
            repaint();
            return currentProgress;
          },
          hide: function() {
            clearTimeout(delayTimerId);
            delayTimerId = null;
            if (!showing)
              return;
            showing = false;
            if (progressTimerId != null) {
              window2.cancelAnimationFrame(progressTimerId);
              progressTimerId = null;
            }
            (function loop() {
              if (topbar2.progress("+.1") >= 1) {
                canvas.style.opacity -= 0.05;
                if (canvas.style.opacity <= 0.05) {
                  canvas.style.display = "none";
                  fadeTimerId = null;
                  return;
                }
              }
              fadeTimerId = window2.requestAnimationFrame(loop);
            })();
          }
        };
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = topbar2;
        } else if (typeof define === "function" && define.amd) {
          define(function() {
            return topbar2;
          });
        } else {
          this.topbar = topbar2;
        }
      }).call(exports, window, document);
    }
  });

  // ../deps/phoenix_html/priv/static/phoenix_html.js
  (function() {
    var PolyfillEvent = eventConstructor();
    function eventConstructor() {
      if (typeof window.CustomEvent === "function")
        return window.CustomEvent;
      function CustomEvent2(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: void 0 };
        var evt = document.createEvent("CustomEvent");
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
      }
      CustomEvent2.prototype = window.Event.prototype;
      return CustomEvent2;
    }
    function buildHiddenInput(name, value) {
      var input = document.createElement("input");
      input.type = "hidden";
      input.name = name;
      input.value = value;
      return input;
    }
    function handleClick(element, targetModifierKey) {
      var to = element.getAttribute("data-to"), method = buildHiddenInput("_method", element.getAttribute("data-method")), csrf = buildHiddenInput("_csrf_token", element.getAttribute("data-csrf")), form = document.createElement("form"), submit = document.createElement("input"), target = element.getAttribute("target");
      form.method = element.getAttribute("data-method") === "get" ? "get" : "post";
      form.action = to;
      form.style.display = "none";
      if (target)
        form.target = target;
      else if (targetModifierKey)
        form.target = "_blank";
      form.appendChild(csrf);
      form.appendChild(method);
      document.body.appendChild(form);
      submit.type = "submit";
      form.appendChild(submit);
      submit.click();
    }
    window.addEventListener("click", function(e) {
      var element = e.target;
      if (e.defaultPrevented)
        return;
      while (element && element.getAttribute) {
        var phoenixLinkEvent = new PolyfillEvent("phoenix.link.click", {
          "bubbles": true,
          "cancelable": true
        });
        if (!element.dispatchEvent(phoenixLinkEvent)) {
          e.preventDefault();
          e.stopImmediatePropagation();
          return false;
        }
        if (element.getAttribute("data-method") && element.getAttribute("data-to")) {
          handleClick(element, e.metaKey || e.shiftKey);
          e.preventDefault();
          return false;
        } else {
          element = element.parentNode;
        }
      }
    }, false);
    window.addEventListener("phoenix.link.click", function(e) {
      var message = e.target.getAttribute("data-confirm");
      if (message && !window.confirm(message)) {
        e.preventDefault();
      }
    }, false);
  })();

  // ../deps/phoenix/priv/static/phoenix.mjs
  var closure = (value) => {
    if (typeof value === "function") {
      return value;
    } else {
      let closure22 = function() {
        return value;
      };
      return closure22;
    }
  };
  var globalSelf = typeof self !== "undefined" ? self : null;
  var phxWindow = typeof window !== "undefined" ? window : null;
  var global = globalSelf || phxWindow || global;
  var DEFAULT_VSN = "2.0.0";
  var SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };
  var DEFAULT_TIMEOUT = 1e4;
  var WS_CLOSE_NORMAL = 1e3;
  var CHANNEL_STATES = {
    closed: "closed",
    errored: "errored",
    joined: "joined",
    joining: "joining",
    leaving: "leaving"
  };
  var CHANNEL_EVENTS = {
    close: "phx_close",
    error: "phx_error",
    join: "phx_join",
    reply: "phx_reply",
    leave: "phx_leave"
  };
  var TRANSPORTS = {
    longpoll: "longpoll",
    websocket: "websocket"
  };
  var XHR_STATES = {
    complete: 4
  };
  var Push = class {
    constructor(channel, event, payload, timeout) {
      this.channel = channel;
      this.event = event;
      this.payload = payload || function() {
        return {};
      };
      this.receivedResp = null;
      this.timeout = timeout;
      this.timeoutTimer = null;
      this.recHooks = [];
      this.sent = false;
    }
    /**
     *
     * @param {number} timeout
     */
    resend(timeout) {
      this.timeout = timeout;
      this.reset();
      this.send();
    }
    /**
     *
     */
    send() {
      if (this.hasReceived("timeout")) {
        return;
      }
      this.startTimeout();
      this.sent = true;
      this.channel.socket.push({
        topic: this.channel.topic,
        event: this.event,
        payload: this.payload(),
        ref: this.ref,
        join_ref: this.channel.joinRef()
      });
    }
    /**
     *
     * @param {*} status
     * @param {*} callback
     */
    receive(status, callback) {
      if (this.hasReceived(status)) {
        callback(this.receivedResp.response);
      }
      this.recHooks.push({ status, callback });
      return this;
    }
    /**
     * @private
     */
    reset() {
      this.cancelRefEvent();
      this.ref = null;
      this.refEvent = null;
      this.receivedResp = null;
      this.sent = false;
    }
    /**
     * @private
     */
    matchReceive({ status, response, _ref }) {
      this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response));
    }
    /**
     * @private
     */
    cancelRefEvent() {
      if (!this.refEvent) {
        return;
      }
      this.channel.off(this.refEvent);
    }
    /**
     * @private
     */
    cancelTimeout() {
      clearTimeout(this.timeoutTimer);
      this.timeoutTimer = null;
    }
    /**
     * @private
     */
    startTimeout() {
      if (this.timeoutTimer) {
        this.cancelTimeout();
      }
      this.ref = this.channel.socket.makeRef();
      this.refEvent = this.channel.replyEventName(this.ref);
      this.channel.on(this.refEvent, (payload) => {
        this.cancelRefEvent();
        this.cancelTimeout();
        this.receivedResp = payload;
        this.matchReceive(payload);
      });
      this.timeoutTimer = setTimeout(() => {
        this.trigger("timeout", {});
      }, this.timeout);
    }
    /**
     * @private
     */
    hasReceived(status) {
      return this.receivedResp && this.receivedResp.status === status;
    }
    /**
     * @private
     */
    trigger(status, response) {
      this.channel.trigger(this.refEvent, { status, response });
    }
  };
  var Timer = class {
    constructor(callback, timerCalc) {
      this.callback = callback;
      this.timerCalc = timerCalc;
      this.timer = null;
      this.tries = 0;
    }
    reset() {
      this.tries = 0;
      clearTimeout(this.timer);
    }
    /**
     * Cancels any previous scheduleTimeout and schedules callback
     */
    scheduleTimeout() {
      clearTimeout(this.timer);
      this.timer = setTimeout(() => {
        this.tries = this.tries + 1;
        this.callback();
      }, this.timerCalc(this.tries + 1));
    }
  };
  var Channel = class {
    constructor(topic, params, socket) {
      this.state = CHANNEL_STATES.closed;
      this.topic = topic;
      this.params = closure(params || {});
      this.socket = socket;
      this.bindings = [];
      this.bindingRef = 0;
      this.timeout = this.socket.timeout;
      this.joinedOnce = false;
      this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
      this.pushBuffer = [];
      this.stateChangeRefs = [];
      this.rejoinTimer = new Timer(() => {
        if (this.socket.isConnected()) {
          this.rejoin();
        }
      }, this.socket.rejoinAfterMs);
      this.stateChangeRefs.push(this.socket.onError(() => this.rejoinTimer.reset()));
      this.stateChangeRefs.push(
        this.socket.onOpen(() => {
          this.rejoinTimer.reset();
          if (this.isErrored()) {
            this.rejoin();
          }
        })
      );
      this.joinPush.receive("ok", () => {
        this.state = CHANNEL_STATES.joined;
        this.rejoinTimer.reset();
        this.pushBuffer.forEach((pushEvent) => pushEvent.send());
        this.pushBuffer = [];
      });
      this.joinPush.receive("error", () => {
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.onClose(() => {
        this.rejoinTimer.reset();
        if (this.socket.hasLogger())
          this.socket.log("channel", `close ${this.topic} ${this.joinRef()}`);
        this.state = CHANNEL_STATES.closed;
        this.socket.remove(this);
      });
      this.onError((reason) => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `error ${this.topic}`, reason);
        if (this.isJoining()) {
          this.joinPush.reset();
        }
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.joinPush.receive("timeout", () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `timeout ${this.topic} (${this.joinRef()})`, this.joinPush.timeout);
        let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), this.timeout);
        leavePush.send();
        this.state = CHANNEL_STATES.errored;
        this.joinPush.reset();
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.on(CHANNEL_EVENTS.reply, (payload, ref) => {
        this.trigger(this.replyEventName(ref), payload);
      });
    }
    /**
     * Join the channel
     * @param {integer} timeout
     * @returns {Push}
     */
    join(timeout = this.timeout) {
      if (this.joinedOnce) {
        throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");
      } else {
        this.timeout = timeout;
        this.joinedOnce = true;
        this.rejoin();
        return this.joinPush;
      }
    }
    /**
     * Hook into channel close
     * @param {Function} callback
     */
    onClose(callback) {
      this.on(CHANNEL_EVENTS.close, callback);
    }
    /**
     * Hook into channel errors
     * @param {Function} callback
     */
    onError(callback) {
      return this.on(CHANNEL_EVENTS.error, (reason) => callback(reason));
    }
    /**
     * Subscribes on channel events
     *
     * Subscription returns a ref counter, which can be used later to
     * unsubscribe the exact event listener
     *
     * @example
     * const ref1 = channel.on("event", do_stuff)
     * const ref2 = channel.on("event", do_other_stuff)
     * channel.off("event", ref1)
     * // Since unsubscription, do_stuff won't fire,
     * // while do_other_stuff will keep firing on the "event"
     *
     * @param {string} event
     * @param {Function} callback
     * @returns {integer} ref
     */
    on(event, callback) {
      let ref = this.bindingRef++;
      this.bindings.push({ event, ref, callback });
      return ref;
    }
    /**
     * Unsubscribes off of channel events
     *
     * Use the ref returned from a channel.on() to unsubscribe one
     * handler, or pass nothing for the ref to unsubscribe all
     * handlers for the given event.
     *
     * @example
     * // Unsubscribe the do_stuff handler
     * const ref1 = channel.on("event", do_stuff)
     * channel.off("event", ref1)
     *
     * // Unsubscribe all handlers from event
     * channel.off("event")
     *
     * @param {string} event
     * @param {integer} ref
     */
    off(event, ref) {
      this.bindings = this.bindings.filter((bind) => {
        return !(bind.event === event && (typeof ref === "undefined" || ref === bind.ref));
      });
    }
    /**
     * @private
     */
    canPush() {
      return this.socket.isConnected() && this.isJoined();
    }
    /**
     * Sends a message `event` to phoenix with the payload `payload`.
     * Phoenix receives this in the `handle_in(event, payload, socket)`
     * function. if phoenix replies or it times out (default 10000ms),
     * then optionally the reply can be received.
     *
     * @example
     * channel.push("event")
     *   .receive("ok", payload => console.log("phoenix replied:", payload))
     *   .receive("error", err => console.log("phoenix errored", err))
     *   .receive("timeout", () => console.log("timed out pushing"))
     * @param {string} event
     * @param {Object} payload
     * @param {number} [timeout]
     * @returns {Push}
     */
    push(event, payload, timeout = this.timeout) {
      payload = payload || {};
      if (!this.joinedOnce) {
        throw new Error(`tried to push '${event}' to '${this.topic}' before joining. Use channel.join() before pushing events`);
      }
      let pushEvent = new Push(this, event, function() {
        return payload;
      }, timeout);
      if (this.canPush()) {
        pushEvent.send();
      } else {
        pushEvent.startTimeout();
        this.pushBuffer.push(pushEvent);
      }
      return pushEvent;
    }
    /** Leaves the channel
     *
     * Unsubscribes from server events, and
     * instructs channel to terminate on server
     *
     * Triggers onClose() hooks
     *
     * To receive leave acknowledgements, use the `receive`
     * hook to bind to the server ack, ie:
     *
     * @example
     * channel.leave().receive("ok", () => alert("left!") )
     *
     * @param {integer} timeout
     * @returns {Push}
     */
    leave(timeout = this.timeout) {
      this.rejoinTimer.reset();
      this.joinPush.cancelTimeout();
      this.state = CHANNEL_STATES.leaving;
      let onClose = () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `leave ${this.topic}`);
        this.trigger(CHANNEL_EVENTS.close, "leave");
      };
      let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), timeout);
      leavePush.receive("ok", () => onClose()).receive("timeout", () => onClose());
      leavePush.send();
      if (!this.canPush()) {
        leavePush.trigger("ok", {});
      }
      return leavePush;
    }
    /**
     * Overridable message hook
     *
     * Receives all events for specialized message handling
     * before dispatching to the channel callbacks.
     *
     * Must return the payload, modified or unmodified
     * @param {string} event
     * @param {Object} payload
     * @param {integer} ref
     * @returns {Object}
     */
    onMessage(_event, payload, _ref) {
      return payload;
    }
    /**
     * @private
     */
    isMember(topic, event, payload, joinRef) {
      if (this.topic !== topic) {
        return false;
      }
      if (joinRef && joinRef !== this.joinRef()) {
        if (this.socket.hasLogger())
          this.socket.log("channel", "dropping outdated message", { topic, event, payload, joinRef });
        return false;
      } else {
        return true;
      }
    }
    /**
     * @private
     */
    joinRef() {
      return this.joinPush.ref;
    }
    /**
     * @private
     */
    rejoin(timeout = this.timeout) {
      if (this.isLeaving()) {
        return;
      }
      this.socket.leaveOpenTopic(this.topic);
      this.state = CHANNEL_STATES.joining;
      this.joinPush.resend(timeout);
    }
    /**
     * @private
     */
    trigger(event, payload, ref, joinRef) {
      let handledPayload = this.onMessage(event, payload, ref, joinRef);
      if (payload && !handledPayload) {
        throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");
      }
      let eventBindings = this.bindings.filter((bind) => bind.event === event);
      for (let i = 0; i < eventBindings.length; i++) {
        let bind = eventBindings[i];
        bind.callback(handledPayload, ref, joinRef || this.joinRef());
      }
    }
    /**
     * @private
     */
    replyEventName(ref) {
      return `chan_reply_${ref}`;
    }
    /**
     * @private
     */
    isClosed() {
      return this.state === CHANNEL_STATES.closed;
    }
    /**
     * @private
     */
    isErrored() {
      return this.state === CHANNEL_STATES.errored;
    }
    /**
     * @private
     */
    isJoined() {
      return this.state === CHANNEL_STATES.joined;
    }
    /**
     * @private
     */
    isJoining() {
      return this.state === CHANNEL_STATES.joining;
    }
    /**
     * @private
     */
    isLeaving() {
      return this.state === CHANNEL_STATES.leaving;
    }
  };
  var Ajax = class {
    static request(method, endPoint, accept, body, timeout, ontimeout, callback) {
      if (global.XDomainRequest) {
        let req = new global.XDomainRequest();
        return this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);
      } else {
        let req = new global.XMLHttpRequest();
        return this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);
      }
    }
    static xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {
      req.timeout = timeout;
      req.open(method, endPoint);
      req.onload = () => {
        let response = this.parseJSON(req.responseText);
        callback && callback(response);
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.onprogress = () => {
      };
      req.send(body);
      return req;
    }
    static xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {
      req.open(method, endPoint, true);
      req.timeout = timeout;
      req.setRequestHeader("Content-Type", accept);
      req.onerror = () => callback && callback(null);
      req.onreadystatechange = () => {
        if (req.readyState === XHR_STATES.complete && callback) {
          let response = this.parseJSON(req.responseText);
          callback(response);
        }
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.send(body);
      return req;
    }
    static parseJSON(resp) {
      if (!resp || resp === "") {
        return null;
      }
      try {
        return JSON.parse(resp);
      } catch (e) {
        console && console.log("failed to parse JSON response", resp);
        return null;
      }
    }
    static serialize(obj, parentKey) {
      let queryStr = [];
      for (var key in obj) {
        if (!Object.prototype.hasOwnProperty.call(obj, key)) {
          continue;
        }
        let paramKey = parentKey ? `${parentKey}[${key}]` : key;
        let paramVal = obj[key];
        if (typeof paramVal === "object") {
          queryStr.push(this.serialize(paramVal, paramKey));
        } else {
          queryStr.push(encodeURIComponent(paramKey) + "=" + encodeURIComponent(paramVal));
        }
      }
      return queryStr.join("&");
    }
    static appendParams(url, params) {
      if (Object.keys(params).length === 0) {
        return url;
      }
      let prefix = url.match(/\?/) ? "&" : "?";
      return `${url}${prefix}${this.serialize(params)}`;
    }
  };
  var arrayBufferToBase64 = (buffer) => {
    let binary = "";
    let bytes = new Uint8Array(buffer);
    let len = bytes.byteLength;
    for (let i = 0; i < len; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return btoa(binary);
  };
  var LongPoll = class {
    constructor(endPoint) {
      this.endPoint = null;
      this.token = null;
      this.skipHeartbeat = true;
      this.reqs = /* @__PURE__ */ new Set();
      this.awaitingBatchAck = false;
      this.currentBatch = null;
      this.currentBatchTimer = null;
      this.batchBuffer = [];
      this.onopen = function() {
      };
      this.onerror = function() {
      };
      this.onmessage = function() {
      };
      this.onclose = function() {
      };
      this.pollEndpoint = this.normalizeEndpoint(endPoint);
      this.readyState = SOCKET_STATES.connecting;
      setTimeout(() => this.poll(), 0);
    }
    normalizeEndpoint(endPoint) {
      return endPoint.replace("ws://", "http://").replace("wss://", "https://").replace(new RegExp("(.*)/" + TRANSPORTS.websocket), "$1/" + TRANSPORTS.longpoll);
    }
    endpointURL() {
      return Ajax.appendParams(this.pollEndpoint, { token: this.token });
    }
    closeAndRetry(code, reason, wasClean) {
      this.close(code, reason, wasClean);
      this.readyState = SOCKET_STATES.connecting;
    }
    ontimeout() {
      this.onerror("timeout");
      this.closeAndRetry(1005, "timeout", false);
    }
    isActive() {
      return this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting;
    }
    poll() {
      this.ajax("GET", "application/json", null, () => this.ontimeout(), (resp) => {
        if (resp) {
          var { status, token, messages } = resp;
          this.token = token;
        } else {
          status = 0;
        }
        switch (status) {
          case 200:
            messages.forEach((msg) => {
              setTimeout(() => this.onmessage({ data: msg }), 0);
            });
            this.poll();
            break;
          case 204:
            this.poll();
            break;
          case 410:
            this.readyState = SOCKET_STATES.open;
            this.onopen({});
            this.poll();
            break;
          case 403:
            this.onerror(403);
            this.close(1008, "forbidden", false);
            break;
          case 0:
          case 500:
            this.onerror(500);
            this.closeAndRetry(1011, "internal server error", 500);
            break;
          default:
            throw new Error(`unhandled poll status ${status}`);
        }
      });
    }
    // we collect all pushes within the current event loop by
    // setTimeout 0, which optimizes back-to-back procedural
    // pushes against an empty buffer
    send(body) {
      if (typeof body !== "string") {
        body = arrayBufferToBase64(body);
      }
      if (this.currentBatch) {
        this.currentBatch.push(body);
      } else if (this.awaitingBatchAck) {
        this.batchBuffer.push(body);
      } else {
        this.currentBatch = [body];
        this.currentBatchTimer = setTimeout(() => {
          this.batchSend(this.currentBatch);
          this.currentBatch = null;
        }, 0);
      }
    }
    batchSend(messages) {
      this.awaitingBatchAck = true;
      this.ajax("POST", "application/x-ndjson", messages.join("\n"), () => this.onerror("timeout"), (resp) => {
        this.awaitingBatchAck = false;
        if (!resp || resp.status !== 200) {
          this.onerror(resp && resp.status);
          this.closeAndRetry(1011, "internal server error", false);
        } else if (this.batchBuffer.length > 0) {
          this.batchSend(this.batchBuffer);
          this.batchBuffer = [];
        }
      });
    }
    close(code, reason, wasClean) {
      for (let req of this.reqs) {
        req.abort();
      }
      this.readyState = SOCKET_STATES.closed;
      let opts = Object.assign({ code: 1e3, reason: void 0, wasClean: true }, { code, reason, wasClean });
      this.batchBuffer = [];
      clearTimeout(this.currentBatchTimer);
      this.currentBatchTimer = null;
      if (typeof CloseEvent !== "undefined") {
        this.onclose(new CloseEvent("close", opts));
      } else {
        this.onclose(opts);
      }
    }
    ajax(method, contentType, body, onCallerTimeout, callback) {
      let req;
      let ontimeout = () => {
        this.reqs.delete(req);
        onCallerTimeout();
      };
      req = Ajax.request(method, this.endpointURL(), contentType, body, this.timeout, ontimeout, (resp) => {
        this.reqs.delete(req);
        if (this.isActive()) {
          callback(resp);
        }
      });
      this.reqs.add(req);
    }
  };
  var serializer_default = {
    HEADER_LENGTH: 1,
    META_LENGTH: 4,
    KINDS: { push: 0, reply: 1, broadcast: 2 },
    encode(msg, callback) {
      if (msg.payload.constructor === ArrayBuffer) {
        return callback(this.binaryEncode(msg));
      } else {
        let payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];
        return callback(JSON.stringify(payload));
      }
    },
    decode(rawPayload, callback) {
      if (rawPayload.constructor === ArrayBuffer) {
        return callback(this.binaryDecode(rawPayload));
      } else {
        let [join_ref, ref, topic, event, payload] = JSON.parse(rawPayload);
        return callback({ join_ref, ref, topic, event, payload });
      }
    },
    // private
    binaryEncode(message) {
      let { join_ref, ref, event, topic, payload } = message;
      let metaLength = this.META_LENGTH + join_ref.length + ref.length + topic.length + event.length;
      let header = new ArrayBuffer(this.HEADER_LENGTH + metaLength);
      let view = new DataView(header);
      let offset2 = 0;
      view.setUint8(offset2++, this.KINDS.push);
      view.setUint8(offset2++, join_ref.length);
      view.setUint8(offset2++, ref.length);
      view.setUint8(offset2++, topic.length);
      view.setUint8(offset2++, event.length);
      Array.from(join_ref, (char) => view.setUint8(offset2++, char.charCodeAt(0)));
      Array.from(ref, (char) => view.setUint8(offset2++, char.charCodeAt(0)));
      Array.from(topic, (char) => view.setUint8(offset2++, char.charCodeAt(0)));
      Array.from(event, (char) => view.setUint8(offset2++, char.charCodeAt(0)));
      var combined = new Uint8Array(header.byteLength + payload.byteLength);
      combined.set(new Uint8Array(header), 0);
      combined.set(new Uint8Array(payload), header.byteLength);
      return combined.buffer;
    },
    binaryDecode(buffer) {
      let view = new DataView(buffer);
      let kind = view.getUint8(0);
      let decoder = new TextDecoder();
      switch (kind) {
        case this.KINDS.push:
          return this.decodePush(buffer, view, decoder);
        case this.KINDS.reply:
          return this.decodeReply(buffer, view, decoder);
        case this.KINDS.broadcast:
          return this.decodeBroadcast(buffer, view, decoder);
      }
    },
    decodePush(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let topicSize = view.getUint8(2);
      let eventSize = view.getUint8(3);
      let offset2 = this.HEADER_LENGTH + this.META_LENGTH - 1;
      let joinRef = decoder.decode(buffer.slice(offset2, offset2 + joinRefSize));
      offset2 = offset2 + joinRefSize;
      let topic = decoder.decode(buffer.slice(offset2, offset2 + topicSize));
      offset2 = offset2 + topicSize;
      let event = decoder.decode(buffer.slice(offset2, offset2 + eventSize));
      offset2 = offset2 + eventSize;
      let data = buffer.slice(offset2, buffer.byteLength);
      return { join_ref: joinRef, ref: null, topic, event, payload: data };
    },
    decodeReply(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let refSize = view.getUint8(2);
      let topicSize = view.getUint8(3);
      let eventSize = view.getUint8(4);
      let offset2 = this.HEADER_LENGTH + this.META_LENGTH;
      let joinRef = decoder.decode(buffer.slice(offset2, offset2 + joinRefSize));
      offset2 = offset2 + joinRefSize;
      let ref = decoder.decode(buffer.slice(offset2, offset2 + refSize));
      offset2 = offset2 + refSize;
      let topic = decoder.decode(buffer.slice(offset2, offset2 + topicSize));
      offset2 = offset2 + topicSize;
      let event = decoder.decode(buffer.slice(offset2, offset2 + eventSize));
      offset2 = offset2 + eventSize;
      let data = buffer.slice(offset2, buffer.byteLength);
      let payload = { status: event, response: data };
      return { join_ref: joinRef, ref, topic, event: CHANNEL_EVENTS.reply, payload };
    },
    decodeBroadcast(buffer, view, decoder) {
      let topicSize = view.getUint8(1);
      let eventSize = view.getUint8(2);
      let offset2 = this.HEADER_LENGTH + 2;
      let topic = decoder.decode(buffer.slice(offset2, offset2 + topicSize));
      offset2 = offset2 + topicSize;
      let event = decoder.decode(buffer.slice(offset2, offset2 + eventSize));
      offset2 = offset2 + eventSize;
      let data = buffer.slice(offset2, buffer.byteLength);
      return { join_ref: null, ref: null, topic, event, payload: data };
    }
  };
  var Socket = class {
    constructor(endPoint, opts = {}) {
      this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };
      this.channels = [];
      this.sendBuffer = [];
      this.ref = 0;
      this.timeout = opts.timeout || DEFAULT_TIMEOUT;
      this.transport = opts.transport || global.WebSocket || LongPoll;
      this.primaryPassedHealthCheck = false;
      this.longPollFallbackMs = opts.longPollFallbackMs;
      this.fallbackTimer = null;
      this.sessionStore = opts.sessionStorage || global.sessionStorage;
      this.establishedConnections = 0;
      this.defaultEncoder = serializer_default.encode.bind(serializer_default);
      this.defaultDecoder = serializer_default.decode.bind(serializer_default);
      this.closeWasClean = false;
      this.binaryType = opts.binaryType || "arraybuffer";
      this.connectClock = 1;
      if (this.transport !== LongPoll) {
        this.encode = opts.encode || this.defaultEncoder;
        this.decode = opts.decode || this.defaultDecoder;
      } else {
        this.encode = this.defaultEncoder;
        this.decode = this.defaultDecoder;
      }
      let awaitingConnectionOnPageShow = null;
      if (phxWindow && phxWindow.addEventListener) {
        phxWindow.addEventListener("pagehide", (_e) => {
          if (this.conn) {
            this.disconnect();
            awaitingConnectionOnPageShow = this.connectClock;
          }
        });
        phxWindow.addEventListener("pageshow", (_e) => {
          if (awaitingConnectionOnPageShow === this.connectClock) {
            awaitingConnectionOnPageShow = null;
            this.connect();
          }
        });
      }
      this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 3e4;
      this.rejoinAfterMs = (tries) => {
        if (opts.rejoinAfterMs) {
          return opts.rejoinAfterMs(tries);
        } else {
          return [1e3, 2e3, 5e3][tries - 1] || 1e4;
        }
      };
      this.reconnectAfterMs = (tries) => {
        if (opts.reconnectAfterMs) {
          return opts.reconnectAfterMs(tries);
        } else {
          return [10, 50, 100, 150, 200, 250, 500, 1e3, 2e3][tries - 1] || 5e3;
        }
      };
      this.logger = opts.logger || null;
      if (!this.logger && opts.debug) {
        this.logger = (kind, msg, data) => {
          console.log(`${kind}: ${msg}`, data);
        };
      }
      this.longpollerTimeout = opts.longpollerTimeout || 2e4;
      this.params = closure(opts.params || {});
      this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
      this.vsn = opts.vsn || DEFAULT_VSN;
      this.heartbeatTimeoutTimer = null;
      this.heartbeatTimer = null;
      this.pendingHeartbeatRef = null;
      this.reconnectTimer = new Timer(() => {
        this.teardown(() => this.connect());
      }, this.reconnectAfterMs);
    }
    /**
     * Returns the LongPoll transport reference
     */
    getLongPollTransport() {
      return LongPoll;
    }
    /**
     * Disconnects and replaces the active transport
     *
     * @param {Function} newTransport - The new transport class to instantiate
     *
     */
    replaceTransport(newTransport) {
      this.connectClock++;
      this.closeWasClean = true;
      clearTimeout(this.fallbackTimer);
      this.reconnectTimer.reset();
      if (this.conn) {
        this.conn.close();
        this.conn = null;
      }
      this.transport = newTransport;
    }
    /**
     * Returns the socket protocol
     *
     * @returns {string}
     */
    protocol() {
      return location.protocol.match(/^https/) ? "wss" : "ws";
    }
    /**
     * The fully qualified socket url
     *
     * @returns {string}
     */
    endPointURL() {
      let uri = Ajax.appendParams(
        Ajax.appendParams(this.endPoint, this.params()),
        { vsn: this.vsn }
      );
      if (uri.charAt(0) !== "/") {
        return uri;
      }
      if (uri.charAt(1) === "/") {
        return `${this.protocol()}:${uri}`;
      }
      return `${this.protocol()}://${location.host}${uri}`;
    }
    /**
     * Disconnects the socket
     *
     * See https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes for valid status codes.
     *
     * @param {Function} callback - Optional callback which is called after socket is disconnected.
     * @param {integer} code - A status code for disconnection (Optional).
     * @param {string} reason - A textual description of the reason to disconnect. (Optional)
     */
    disconnect(callback, code, reason) {
      this.connectClock++;
      this.closeWasClean = true;
      clearTimeout(this.fallbackTimer);
      this.reconnectTimer.reset();
      this.teardown(callback, code, reason);
    }
    /**
     *
     * @param {Object} params - The params to send when connecting, for example `{user_id: userToken}`
     *
     * Passing params to connect is deprecated; pass them in the Socket constructor instead:
     * `new Socket("/socket", {params: {user_id: userToken}})`.
     */
    connect(params) {
      if (params) {
        console && console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor");
        this.params = closure(params);
      }
      if (this.conn) {
        return;
      }
      if (this.longPollFallbackMs && this.transport !== LongPoll) {
        this.connectWithFallback(LongPoll, this.longPollFallbackMs);
      } else {
        this.transportConnect();
      }
    }
    /**
     * Logs the message. Override `this.logger` for specialized logging. noops by default
     * @param {string} kind
     * @param {string} msg
     * @param {Object} data
     */
    log(kind, msg, data) {
      this.logger && this.logger(kind, msg, data);
    }
    /**
     * Returns true if a logger has been set on this socket.
     */
    hasLogger() {
      return this.logger !== null;
    }
    /**
     * Registers callbacks for connection open events
     *
     * @example socket.onOpen(function(){ console.info("the socket was opened") })
     *
     * @param {Function} callback
     */
    onOpen(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.open.push([ref, callback]);
      return ref;
    }
    /**
     * Registers callbacks for connection close events
     * @param {Function} callback
     */
    onClose(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.close.push([ref, callback]);
      return ref;
    }
    /**
     * Registers callbacks for connection error events
     *
     * @example socket.onError(function(error){ alert("An error occurred") })
     *
     * @param {Function} callback
     */
    onError(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.error.push([ref, callback]);
      return ref;
    }
    /**
     * Registers callbacks for connection message events
     * @param {Function} callback
     */
    onMessage(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.message.push([ref, callback]);
      return ref;
    }
    /**
     * Pings the server and invokes the callback with the RTT in milliseconds
     * @param {Function} callback
     *
     * Returns true if the ping was pushed or false if unable to be pushed.
     */
    ping(callback) {
      if (!this.isConnected()) {
        return false;
      }
      let ref = this.makeRef();
      let startTime = Date.now();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref });
      let onMsgRef = this.onMessage((msg) => {
        if (msg.ref === ref) {
          this.off([onMsgRef]);
          callback(Date.now() - startTime);
        }
      });
      return true;
    }
    /**
     * @private
     */
    transportConnect() {
      this.connectClock++;
      this.closeWasClean = false;
      this.conn = new this.transport(this.endPointURL());
      this.conn.binaryType = this.binaryType;
      this.conn.timeout = this.longpollerTimeout;
      this.conn.onopen = () => this.onConnOpen();
      this.conn.onerror = (error) => this.onConnError(error);
      this.conn.onmessage = (event) => this.onConnMessage(event);
      this.conn.onclose = (event) => this.onConnClose(event);
    }
    getSession(key) {
      return this.sessionStore && this.sessionStore.getItem(key);
    }
    storeSession(key, val) {
      this.sessionStore && this.sessionStore.setItem(key, val);
    }
    connectWithFallback(fallbackTransport, fallbackThreshold = 2500) {
      clearTimeout(this.fallbackTimer);
      let established = false;
      let primaryTransport = true;
      let openRef, errorRef;
      let fallback = (reason) => {
        this.log("transport", `falling back to ${fallbackTransport.name}...`, reason);
        this.off([openRef, errorRef]);
        primaryTransport = false;
        this.replaceTransport(fallbackTransport);
        this.transportConnect();
      };
      if (this.getSession(`phx:fallback:${fallbackTransport.name}`)) {
        return fallback("memorized");
      }
      this.fallbackTimer = setTimeout(fallback, fallbackThreshold);
      errorRef = this.onError((reason) => {
        this.log("transport", "error", reason);
        if (primaryTransport && !established) {
          clearTimeout(this.fallbackTimer);
          fallback(reason);
        }
      });
      this.onOpen(() => {
        established = true;
        if (!primaryTransport) {
          if (!this.primaryPassedHealthCheck) {
            this.storeSession(`phx:fallback:${fallbackTransport.name}`, "true");
          }
          return this.log("transport", `established ${fallbackTransport.name} fallback`);
        }
        clearTimeout(this.fallbackTimer);
        this.fallbackTimer = setTimeout(fallback, fallbackThreshold);
        this.ping((rtt) => {
          this.log("transport", "connected to primary after", rtt);
          this.primaryPassedHealthCheck = true;
          clearTimeout(this.fallbackTimer);
        });
      });
      this.transportConnect();
    }
    clearHeartbeats() {
      clearTimeout(this.heartbeatTimer);
      clearTimeout(this.heartbeatTimeoutTimer);
    }
    onConnOpen() {
      if (this.hasLogger())
        this.log("transport", `${this.transport.name} connected to ${this.endPointURL()}`);
      this.closeWasClean = false;
      this.establishedConnections++;
      this.flushSendBuffer();
      this.reconnectTimer.reset();
      this.resetHeartbeat();
      this.stateChangeCallbacks.open.forEach(([, callback]) => callback());
    }
    /**
     * @private
     */
    heartbeatTimeout() {
      if (this.pendingHeartbeatRef) {
        this.pendingHeartbeatRef = null;
        if (this.hasLogger()) {
          this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
        }
        this.triggerChanError();
        this.closeWasClean = false;
        this.teardown(() => this.reconnectTimer.scheduleTimeout(), WS_CLOSE_NORMAL, "heartbeat timeout");
      }
    }
    resetHeartbeat() {
      if (this.conn && this.conn.skipHeartbeat) {
        return;
      }
      this.pendingHeartbeatRef = null;
      this.clearHeartbeats();
      this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
    }
    teardown(callback, code, reason) {
      if (!this.conn) {
        return callback && callback();
      }
      this.waitForBufferDone(() => {
        if (this.conn) {
          if (code) {
            this.conn.close(code, reason || "");
          } else {
            this.conn.close();
          }
        }
        this.waitForSocketClosed(() => {
          if (this.conn) {
            this.conn.onopen = function() {
            };
            this.conn.onerror = function() {
            };
            this.conn.onmessage = function() {
            };
            this.conn.onclose = function() {
            };
            this.conn = null;
          }
          callback && callback();
        });
      });
    }
    waitForBufferDone(callback, tries = 1) {
      if (tries === 5 || !this.conn || !this.conn.bufferedAmount) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForBufferDone(callback, tries + 1);
      }, 150 * tries);
    }
    waitForSocketClosed(callback, tries = 1) {
      if (tries === 5 || !this.conn || this.conn.readyState === SOCKET_STATES.closed) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForSocketClosed(callback, tries + 1);
      }, 150 * tries);
    }
    onConnClose(event) {
      let closeCode = event && event.code;
      if (this.hasLogger())
        this.log("transport", "close", event);
      this.triggerChanError();
      this.clearHeartbeats();
      if (!this.closeWasClean && closeCode !== 1e3) {
        this.reconnectTimer.scheduleTimeout();
      }
      this.stateChangeCallbacks.close.forEach(([, callback]) => callback(event));
    }
    /**
     * @private
     */
    onConnError(error) {
      if (this.hasLogger())
        this.log("transport", error);
      let transportBefore = this.transport;
      let establishedBefore = this.establishedConnections;
      this.stateChangeCallbacks.error.forEach(([, callback]) => {
        callback(error, transportBefore, establishedBefore);
      });
      if (transportBefore === this.transport || establishedBefore > 0) {
        this.triggerChanError();
      }
    }
    /**
     * @private
     */
    triggerChanError() {
      this.channels.forEach((channel) => {
        if (!(channel.isErrored() || channel.isLeaving() || channel.isClosed())) {
          channel.trigger(CHANNEL_EVENTS.error);
        }
      });
    }
    /**
     * @returns {string}
     */
    connectionState() {
      switch (this.conn && this.conn.readyState) {
        case SOCKET_STATES.connecting:
          return "connecting";
        case SOCKET_STATES.open:
          return "open";
        case SOCKET_STATES.closing:
          return "closing";
        default:
          return "closed";
      }
    }
    /**
     * @returns {boolean}
     */
    isConnected() {
      return this.connectionState() === "open";
    }
    /**
     * @private
     *
     * @param {Channel}
     */
    remove(channel) {
      this.off(channel.stateChangeRefs);
      this.channels = this.channels.filter((c) => c !== channel);
    }
    /**
     * Removes `onOpen`, `onClose`, `onError,` and `onMessage` registrations.
     *
     * @param {refs} - list of refs returned by calls to
     *                 `onOpen`, `onClose`, `onError,` and `onMessage`
     */
    off(refs) {
      for (let key in this.stateChangeCallbacks) {
        this.stateChangeCallbacks[key] = this.stateChangeCallbacks[key].filter(([ref]) => {
          return refs.indexOf(ref) === -1;
        });
      }
    }
    /**
     * Initiates a new channel for the given topic
     *
     * @param {string} topic
     * @param {Object} chanParams - Parameters for the channel
     * @returns {Channel}
     */
    channel(topic, chanParams = {}) {
      let chan = new Channel(topic, chanParams, this);
      this.channels.push(chan);
      return chan;
    }
    /**
     * @param {Object} data
     */
    push(data) {
      if (this.hasLogger()) {
        let { topic, event, payload, ref, join_ref } = data;
        this.log("push", `${topic} ${event} (${join_ref}, ${ref})`, payload);
      }
      if (this.isConnected()) {
        this.encode(data, (result) => this.conn.send(result));
      } else {
        this.sendBuffer.push(() => this.encode(data, (result) => this.conn.send(result)));
      }
    }
    /**
     * Return the next message ref, accounting for overflows
     * @returns {string}
     */
    makeRef() {
      let newRef = this.ref + 1;
      if (newRef === this.ref) {
        this.ref = 0;
      } else {
        this.ref = newRef;
      }
      return this.ref.toString();
    }
    sendHeartbeat() {
      if (this.pendingHeartbeatRef && !this.isConnected()) {
        return;
      }
      this.pendingHeartbeatRef = this.makeRef();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref: this.pendingHeartbeatRef });
      this.heartbeatTimeoutTimer = setTimeout(() => this.heartbeatTimeout(), this.heartbeatIntervalMs);
    }
    flushSendBuffer() {
      if (this.isConnected() && this.sendBuffer.length > 0) {
        this.sendBuffer.forEach((callback) => callback());
        this.sendBuffer = [];
      }
    }
    onConnMessage(rawMessage) {
      this.decode(rawMessage.data, (msg) => {
        let { topic, event, payload, ref, join_ref } = msg;
        if (ref && ref === this.pendingHeartbeatRef) {
          this.clearHeartbeats();
          this.pendingHeartbeatRef = null;
          this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
        }
        if (this.hasLogger())
          this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
        for (let i = 0; i < this.channels.length; i++) {
          const channel = this.channels[i];
          if (!channel.isMember(topic, event, payload, join_ref)) {
            continue;
          }
          channel.trigger(event, payload, ref, join_ref);
        }
        for (let i = 0; i < this.stateChangeCallbacks.message.length; i++) {
          let [, callback] = this.stateChangeCallbacks.message[i];
          callback(msg);
        }
      });
    }
    leaveOpenTopic(topic) {
      let dupChannel = this.channels.find((c) => c.topic === topic && (c.isJoined() || c.isJoining()));
      if (dupChannel) {
        if (this.hasLogger())
          this.log("transport", `leaving duplicate topic "${topic}"`);
        dupChannel.leave();
      }
    }
  };

  // ../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js
  var CONSECUTIVE_RELOADS = "consecutive-reloads";
  var MAX_RELOADS = 10;
  var RELOAD_JITTER_MIN = 5e3;
  var RELOAD_JITTER_MAX = 1e4;
  var FAILSAFE_JITTER = 3e4;
  var PHX_EVENT_CLASSES = [
    "phx-click-loading",
    "phx-change-loading",
    "phx-submit-loading",
    "phx-keydown-loading",
    "phx-keyup-loading",
    "phx-blur-loading",
    "phx-focus-loading",
    "phx-hook-loading"
  ];
  var PHX_COMPONENT = "data-phx-component";
  var PHX_LIVE_LINK = "data-phx-link";
  var PHX_TRACK_STATIC = "track-static";
  var PHX_LINK_STATE = "data-phx-link-state";
  var PHX_REF = "data-phx-ref";
  var PHX_REF_SRC = "data-phx-ref-src";
  var PHX_TRACK_UPLOADS = "track-uploads";
  var PHX_UPLOAD_REF = "data-phx-upload-ref";
  var PHX_PREFLIGHTED_REFS = "data-phx-preflighted-refs";
  var PHX_DONE_REFS = "data-phx-done-refs";
  var PHX_DROP_TARGET = "drop-target";
  var PHX_ACTIVE_ENTRY_REFS = "data-phx-active-refs";
  var PHX_LIVE_FILE_UPDATED = "phx:live-file:updated";
  var PHX_SKIP = "data-phx-skip";
  var PHX_MAGIC_ID = "data-phx-id";
  var PHX_PRUNE = "data-phx-prune";
  var PHX_PAGE_LOADING = "page-loading";
  var PHX_CONNECTED_CLASS = "phx-connected";
  var PHX_LOADING_CLASS = "phx-loading";
  var PHX_NO_FEEDBACK_CLASS = "phx-no-feedback";
  var PHX_ERROR_CLASS = "phx-error";
  var PHX_CLIENT_ERROR_CLASS = "phx-client-error";
  var PHX_SERVER_ERROR_CLASS = "phx-server-error";
  var PHX_PARENT_ID = "data-phx-parent-id";
  var PHX_MAIN = "data-phx-main";
  var PHX_ROOT_ID = "data-phx-root-id";
  var PHX_VIEWPORT_TOP = "viewport-top";
  var PHX_VIEWPORT_BOTTOM = "viewport-bottom";
  var PHX_TRIGGER_ACTION = "trigger-action";
  var PHX_FEEDBACK_FOR = "feedback-for";
  var PHX_FEEDBACK_GROUP = "feedback-group";
  var PHX_HAS_FOCUSED = "phx-has-focused";
  var FOCUSABLE_INPUTS = ["text", "textarea", "number", "email", "password", "search", "tel", "url", "date", "time", "datetime-local", "color", "range"];
  var CHECKABLE_INPUTS = ["checkbox", "radio"];
  var PHX_HAS_SUBMITTED = "phx-has-submitted";
  var PHX_SESSION = "data-phx-session";
  var PHX_VIEW_SELECTOR = `[${PHX_SESSION}]`;
  var PHX_STICKY = "data-phx-sticky";
  var PHX_STATIC = "data-phx-static";
  var PHX_READONLY = "data-phx-readonly";
  var PHX_DISABLED = "data-phx-disabled";
  var PHX_DISABLE_WITH = "disable-with";
  var PHX_DISABLE_WITH_RESTORE = "data-phx-disable-with-restore";
  var PHX_HOOK = "hook";
  var PHX_DEBOUNCE = "debounce";
  var PHX_THROTTLE = "throttle";
  var PHX_UPDATE = "update";
  var PHX_STREAM = "stream";
  var PHX_STREAM_REF = "data-phx-stream";
  var PHX_KEY = "key";
  var PHX_PRIVATE = "phxPrivate";
  var PHX_AUTO_RECOVER = "auto-recover";
  var PHX_LV_DEBUG = "phx:live-socket:debug";
  var PHX_LV_PROFILE = "phx:live-socket:profiling";
  var PHX_LV_LATENCY_SIM = "phx:live-socket:latency-sim";
  var PHX_PROGRESS = "progress";
  var PHX_MOUNTED = "mounted";
  var LOADER_TIMEOUT = 1;
  var BEFORE_UNLOAD_LOADER_TIMEOUT = 200;
  var BINDING_PREFIX = "phx-";
  var PUSH_TIMEOUT = 3e4;
  var DEBOUNCE_TRIGGER = "debounce-trigger";
  var THROTTLED = "throttled";
  var DEBOUNCE_PREV_KEY = "debounce-prev-key";
  var DEFAULTS = {
    debounce: 300,
    throttle: 300
  };
  var DYNAMICS = "d";
  var STATIC = "s";
  var ROOT = "r";
  var COMPONENTS = "c";
  var EVENTS = "e";
  var REPLY = "r";
  var TITLE = "t";
  var TEMPLATES = "p";
  var STREAM = "stream";
  var EntryUploader = class {
    constructor(entry, chunkSize, liveSocket2) {
      this.liveSocket = liveSocket2;
      this.entry = entry;
      this.offset = 0;
      this.chunkSize = chunkSize;
      this.chunkTimer = null;
      this.errored = false;
      this.uploadChannel = liveSocket2.channel(`lvu:${entry.ref}`, { token: entry.metadata() });
    }
    error(reason) {
      if (this.errored) {
        return;
      }
      this.uploadChannel.leave();
      this.errored = true;
      clearTimeout(this.chunkTimer);
      this.entry.error(reason);
    }
    upload() {
      this.uploadChannel.onError((reason) => this.error(reason));
      this.uploadChannel.join().receive("ok", (_data) => this.readNextChunk()).receive("error", (reason) => this.error(reason));
    }
    isDone() {
      return this.offset >= this.entry.file.size;
    }
    readNextChunk() {
      let reader = new window.FileReader();
      let blob = this.entry.file.slice(this.offset, this.chunkSize + this.offset);
      reader.onload = (e) => {
        if (e.target.error === null) {
          this.offset += e.target.result.byteLength;
          this.pushChunk(e.target.result);
        } else {
          return logError("Read error: " + e.target.error);
        }
      };
      reader.readAsArrayBuffer(blob);
    }
    pushChunk(chunk) {
      if (!this.uploadChannel.isJoined()) {
        return;
      }
      this.uploadChannel.push("chunk", chunk).receive("ok", () => {
        this.entry.progress(this.offset / this.entry.file.size * 100);
        if (!this.isDone()) {
          this.chunkTimer = setTimeout(() => this.readNextChunk(), this.liveSocket.getLatencySim() || 0);
        }
      }).receive("error", ({ reason }) => this.error(reason));
    }
  };
  var logError = (msg, obj) => console.error && console.error(msg, obj);
  var isCid = (cid) => {
    let type = typeof cid;
    return type === "number" || type === "string" && /^(0|[1-9]\d*)$/.test(cid);
  };
  function detectDuplicateIds() {
    let ids = /* @__PURE__ */ new Set();
    let elems = document.querySelectorAll("*[id]");
    for (let i = 0, len = elems.length; i < len; i++) {
      if (ids.has(elems[i].id)) {
        console.error(`Multiple IDs detected: ${elems[i].id}. Ensure unique element ids.`);
      } else {
        ids.add(elems[i].id);
      }
    }
  }
  var debug = (view, kind, msg, obj) => {
    if (view.liveSocket.isDebugEnabled()) {
      console.log(`${view.id} ${kind}: ${msg} - `, obj);
    }
  };
  var closure2 = (val) => typeof val === "function" ? val : function() {
    return val;
  };
  var clone = (obj) => {
    return JSON.parse(JSON.stringify(obj));
  };
  var closestPhxBinding = (el, binding, borderEl) => {
    do {
      if (el.matches(`[${binding}]`) && !el.disabled) {
        return el;
      }
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1 && !(borderEl && borderEl.isSameNode(el) || el.matches(PHX_VIEW_SELECTOR)));
    return null;
  };
  var isObject = (obj) => {
    return obj !== null && typeof obj === "object" && !(obj instanceof Array);
  };
  var isEqualObj = (obj1, obj2) => JSON.stringify(obj1) === JSON.stringify(obj2);
  var isEmpty = (obj) => {
    for (let x in obj) {
      return false;
    }
    return true;
  };
  var maybe = (el, callback) => el && callback(el);
  var channelUploader = function(entries, onError, resp, liveSocket2) {
    entries.forEach((entry) => {
      let entryUploader = new EntryUploader(entry, resp.config.chunk_size, liveSocket2);
      entryUploader.upload();
    });
  };
  var Browser = {
    canPushState() {
      return typeof history.pushState !== "undefined";
    },
    dropLocal(localStorage2, namespace, subkey) {
      return localStorage2.removeItem(this.localKey(namespace, subkey));
    },
    updateLocal(localStorage2, namespace, subkey, initial, func) {
      let current = this.getLocal(localStorage2, namespace, subkey);
      let key = this.localKey(namespace, subkey);
      let newVal = current === null ? initial : func(current);
      localStorage2.setItem(key, JSON.stringify(newVal));
      return newVal;
    },
    getLocal(localStorage2, namespace, subkey) {
      return JSON.parse(localStorage2.getItem(this.localKey(namespace, subkey)));
    },
    updateCurrentState(callback) {
      if (!this.canPushState()) {
        return;
      }
      history.replaceState(callback(history.state || {}), "", window.location.href);
    },
    pushState(kind, meta, to) {
      if (this.canPushState()) {
        if (to !== window.location.href) {
          if (meta.type == "redirect" && meta.scroll) {
            let currentState = history.state || {};
            currentState.scroll = meta.scroll;
            history.replaceState(currentState, "", window.location.href);
          }
          delete meta.scroll;
          history[kind + "State"](meta, "", to || null);
          let hashEl = this.getHashTargetEl(window.location.hash);
          if (hashEl) {
            hashEl.scrollIntoView();
          } else if (meta.type === "redirect") {
            window.scroll(0, 0);
          }
        }
      } else {
        this.redirect(to);
      }
    },
    setCookie(name, value) {
      document.cookie = `${name}=${value}`;
    },
    getCookie(name) {
      return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${name}s*=s*([^;]*).*$)|^.*$`), "$1");
    },
    redirect(toURL, flash) {
      if (flash) {
        Browser.setCookie("__phoenix_flash__", flash + "; max-age=60000; path=/");
      }
      window.location = toURL;
    },
    localKey(namespace, subkey) {
      return `${namespace}-${subkey}`;
    },
    getHashTargetEl(maybeHash) {
      let hash3 = maybeHash.toString().substring(1);
      if (hash3 === "") {
        return;
      }
      return document.getElementById(hash3) || document.querySelector(`a[name="${hash3}"]`);
    }
  };
  var browser_default = Browser;
  var ARIA = {
    focusMain() {
      let target = document.querySelector("main h1, main, h1");
      if (target) {
        let origTabIndex = target.tabIndex;
        target.tabIndex = -1;
        target.focus();
        target.tabIndex = origTabIndex;
      }
    },
    anyOf(instance, classes) {
      return classes.find((name) => instance instanceof name);
    },
    isFocusable(el, interactiveOnly) {
      return el instanceof HTMLAnchorElement && el.rel !== "ignore" || el instanceof HTMLAreaElement && el.href !== void 0 || !el.disabled && this.anyOf(el, [HTMLInputElement, HTMLSelectElement, HTMLTextAreaElement, HTMLButtonElement]) || el instanceof HTMLIFrameElement || (el.tabIndex > 0 || !interactiveOnly && el.getAttribute("tabindex") !== null && el.getAttribute("aria-hidden") !== "true");
    },
    attemptFocus(el, interactiveOnly) {
      if (this.isFocusable(el, interactiveOnly)) {
        try {
          el.focus();
        } catch (e) {
        }
      }
      return !!document.activeElement && document.activeElement.isSameNode(el);
    },
    focusFirstInteractive(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child, true) || this.focusFirstInteractive(child, true)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusFirst(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusFirst(child)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusLast(el) {
      let child = el.lastElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusLast(child)) {
          return true;
        }
        child = child.previousElementSibling;
      }
    }
  };
  var aria_default = ARIA;
  var focusStack = null;
  var default_transition_time = 200;
  var JS = {
    exec(eventType, phxEvent, view, sourceEl, defaults) {
      let [defaultKind, defaultArgs] = defaults || [null, { callback: defaults && defaults.callback }];
      let commands = phxEvent.charAt(0) === "[" ? JSON.parse(phxEvent) : [[defaultKind, defaultArgs]];
      commands.forEach(([kind, args]) => {
        if (kind === defaultKind && defaultArgs.data) {
          args.data = Object.assign(args.data || {}, defaultArgs.data);
          args.callback = args.callback || defaultArgs.callback;
        }
        this.filterToEls(sourceEl, args).forEach((el) => {
          this[`exec_${kind}`](eventType, phxEvent, view, sourceEl, el, args);
        });
      });
    },
    isVisible(el) {
      return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length > 0);
    },
    isInViewport(el) {
      const rect = el.getBoundingClientRect();
      const windowHeight = window.innerHeight || document.documentElement.clientHeight;
      const windowWidth = window.innerWidth || document.documentElement.clientWidth;
      return rect.right > 0 && rect.bottom > 0 && rect.left < windowWidth && rect.top < windowHeight;
    },
    exec_exec(eventType, phxEvent, view, sourceEl, el, { attr, to }) {
      let nodes = to ? dom_default.all(document, to) : [sourceEl];
      nodes.forEach((node) => {
        let encodedJS = node.getAttribute(attr);
        if (!encodedJS) {
          throw new Error(`expected ${attr} to contain JS command on "${to}"`);
        }
        view.liveSocket.execJS(node, encodedJS, eventType);
      });
    },
    exec_dispatch(eventType, phxEvent, view, sourceEl, el, { to, event, detail, bubbles }) {
      detail = detail || {};
      detail.dispatcher = sourceEl;
      dom_default.dispatchEvent(el, event, { detail, bubbles });
    },
    exec_push(eventType, phxEvent, view, sourceEl, el, args) {
      let { event, data, target, page_loading, loading, value, dispatcher, callback } = args;
      let pushOpts = { loading, value, target, page_loading: !!page_loading };
      let targetSrc = eventType === "change" && dispatcher ? dispatcher : sourceEl;
      let phxTarget = target || targetSrc.getAttribute(view.binding("target")) || targetSrc;
      view.withinTargets(phxTarget, (targetView, targetCtx) => {
        if (!targetView.isConnected()) {
          return;
        }
        if (eventType === "change") {
          let { newCid, _target } = args;
          _target = _target || (dom_default.isFormInput(sourceEl) ? sourceEl.name : void 0);
          if (_target) {
            pushOpts._target = _target;
          }
          targetView.pushInput(sourceEl, targetCtx, newCid, event || phxEvent, pushOpts, callback);
        } else if (eventType === "submit") {
          let { submitter } = args;
          targetView.submitForm(sourceEl, targetCtx, event || phxEvent, submitter, pushOpts, callback);
        } else {
          targetView.pushEvent(eventType, sourceEl, targetCtx, event || phxEvent, data, pushOpts, callback);
        }
      });
    },
    exec_navigate(eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.historyRedirect(href, replace ? "replace" : "push");
    },
    exec_patch(eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.pushHistoryPatch(href, replace ? "replace" : "push", sourceEl);
    },
    exec_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.attemptFocus(el));
    },
    exec_focus_first(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.focusFirstInteractive(el) || aria_default.focusFirst(el));
    },
    exec_push_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => focusStack = el || sourceEl);
    },
    exec_pop_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => {
        if (focusStack) {
          focusStack.focus();
        }
        focusStack = null;
      });
    },
    exec_add_class(eventType, phxEvent, view, sourceEl, el, { names, transition, time }) {
      this.addOrRemoveClasses(el, names, [], transition, time, view);
    },
    exec_remove_class(eventType, phxEvent, view, sourceEl, el, { names, transition, time }) {
      this.addOrRemoveClasses(el, [], names, transition, time, view);
    },
    exec_toggle_class(eventType, phxEvent, view, sourceEl, el, { to, names, transition, time }) {
      this.toggleClasses(el, names, transition, view);
    },
    exec_toggle_attr(eventType, phxEvent, view, sourceEl, el, { attr: [attr, val1, val2] }) {
      if (el.hasAttribute(attr)) {
        if (val2 !== void 0) {
          if (el.getAttribute(attr) === val1) {
            this.setOrRemoveAttrs(el, [[attr, val2]], []);
          } else {
            this.setOrRemoveAttrs(el, [[attr, val1]], []);
          }
        } else {
          this.setOrRemoveAttrs(el, [], [attr]);
        }
      } else {
        this.setOrRemoveAttrs(el, [[attr, val1]], []);
      }
    },
    exec_transition(eventType, phxEvent, view, sourceEl, el, { time, transition }) {
      this.addOrRemoveClasses(el, [], [], transition, time, view);
    },
    exec_toggle(eventType, phxEvent, view, sourceEl, el, { display, ins, outs, time }) {
      this.toggle(eventType, view, el, display, ins, outs, time);
    },
    exec_show(eventType, phxEvent, view, sourceEl, el, { display, transition, time }) {
      this.show(eventType, view, el, display, transition, time);
    },
    exec_hide(eventType, phxEvent, view, sourceEl, el, { display, transition, time }) {
      this.hide(eventType, view, el, display, transition, time);
    },
    exec_set_attr(eventType, phxEvent, view, sourceEl, el, { attr: [attr, val] }) {
      this.setOrRemoveAttrs(el, [[attr, val]], []);
    },
    exec_remove_attr(eventType, phxEvent, view, sourceEl, el, { attr }) {
      this.setOrRemoveAttrs(el, [], [attr]);
    },
    show(eventType, view, el, display, transition, time) {
      if (!this.isVisible(el)) {
        this.toggle(eventType, view, el, display, transition, null, time);
      }
    },
    hide(eventType, view, el, display, transition, time) {
      if (this.isVisible(el)) {
        this.toggle(eventType, view, el, display, null, transition, time);
      }
    },
    toggle(eventType, view, el, display, ins, outs, time) {
      time = time || default_transition_time;
      let [inClasses, inStartClasses, inEndClasses] = ins || [[], [], []];
      let [outClasses, outStartClasses, outEndClasses] = outs || [[], [], []];
      if (inClasses.length > 0 || outClasses.length > 0) {
        if (this.isVisible(el)) {
          let onStart = () => {
            this.addOrRemoveClasses(el, outStartClasses, inClasses.concat(inStartClasses).concat(inEndClasses));
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, outClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, outEndClasses, outStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:hide-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], outClasses.concat(outEndClasses));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          if (eventType === "remove") {
            return;
          }
          let onStart = () => {
            this.addOrRemoveClasses(el, inStartClasses, outClasses.concat(outStartClasses).concat(outEndClasses));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, inClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, inEndClasses, inStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:show-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], inClasses.concat(inEndClasses));
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      } else {
        if (this.isVisible(el)) {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:hide-start"));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:show-start"));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      }
    },
    toggleClasses(el, classes, transition, time, view) {
      window.requestAnimationFrame(() => {
        let [prevAdds, prevRemoves] = dom_default.getSticky(el, "classes", [[], []]);
        let newAdds = classes.filter((name) => prevAdds.indexOf(name) < 0 && !el.classList.contains(name));
        let newRemoves = classes.filter((name) => prevRemoves.indexOf(name) < 0 && el.classList.contains(name));
        this.addOrRemoveClasses(el, newAdds, newRemoves, transition, time, view);
      });
    },
    addOrRemoveClasses(el, adds, removes, transition, time, view) {
      time = time || default_transition_time;
      let [transitionRun, transitionStart, transitionEnd] = transition || [[], [], []];
      if (transitionRun.length > 0) {
        let onStart = () => {
          this.addOrRemoveClasses(el, transitionStart, [].concat(transitionRun).concat(transitionEnd));
          window.requestAnimationFrame(() => {
            this.addOrRemoveClasses(el, transitionRun, []);
            window.requestAnimationFrame(() => this.addOrRemoveClasses(el, transitionEnd, transitionStart));
          });
        };
        let onDone = () => this.addOrRemoveClasses(el, adds.concat(transitionEnd), removes.concat(transitionRun).concat(transitionStart));
        return view.transition(time, onStart, onDone);
      }
      window.requestAnimationFrame(() => {
        let [prevAdds, prevRemoves] = dom_default.getSticky(el, "classes", [[], []]);
        let keepAdds = adds.filter((name) => prevAdds.indexOf(name) < 0 && !el.classList.contains(name));
        let keepRemoves = removes.filter((name) => prevRemoves.indexOf(name) < 0 && el.classList.contains(name));
        let newAdds = prevAdds.filter((name) => removes.indexOf(name) < 0).concat(keepAdds);
        let newRemoves = prevRemoves.filter((name) => adds.indexOf(name) < 0).concat(keepRemoves);
        dom_default.putSticky(el, "classes", (currentEl) => {
          currentEl.classList.remove(...newRemoves);
          currentEl.classList.add(...newAdds);
          return [newAdds, newRemoves];
        });
      });
    },
    setOrRemoveAttrs(el, sets, removes) {
      let [prevSets, prevRemoves] = dom_default.getSticky(el, "attrs", [[], []]);
      let alteredAttrs = sets.map(([attr, _val]) => attr).concat(removes);
      let newSets = prevSets.filter(([attr, _val]) => !alteredAttrs.includes(attr)).concat(sets);
      let newRemoves = prevRemoves.filter((attr) => !alteredAttrs.includes(attr)).concat(removes);
      dom_default.putSticky(el, "attrs", (currentEl) => {
        newRemoves.forEach((attr) => currentEl.removeAttribute(attr));
        newSets.forEach(([attr, val]) => currentEl.setAttribute(attr, val));
        return [newSets, newRemoves];
      });
    },
    hasAllClasses(el, classes) {
      return classes.every((name) => el.classList.contains(name));
    },
    isToggledOut(el, outClasses) {
      return !this.isVisible(el) || this.hasAllClasses(el, outClasses);
    },
    filterToEls(sourceEl, { to }) {
      return to ? dom_default.all(document, to) : [sourceEl];
    },
    defaultDisplay(el) {
      return { tr: "table-row", td: "table-cell" }[el.tagName.toLowerCase()] || "block";
    }
  };
  var js_default = JS;
  var DOM = {
    byId(id) {
      return document.getElementById(id) || logError(`no id found for ${id}`);
    },
    removeClass(el, className) {
      el.classList.remove(className);
      if (el.classList.length === 0) {
        el.removeAttribute("class");
      }
    },
    all(node, query, callback) {
      if (!node) {
        return [];
      }
      let array = Array.from(node.querySelectorAll(query));
      return callback ? array.forEach(callback) : array;
    },
    childNodeLength(html2) {
      let template = document.createElement("template");
      template.innerHTML = html2;
      return template.content.childElementCount;
    },
    isUploadInput(el) {
      return el.type === "file" && el.getAttribute(PHX_UPLOAD_REF) !== null;
    },
    isAutoUpload(inputEl) {
      return inputEl.hasAttribute("data-phx-auto-upload");
    },
    findUploadInputs(node) {
      const formId = node.id;
      const inputsOutsideForm = this.all(document, `input[type="file"][${PHX_UPLOAD_REF}][form="${formId}"]`);
      return this.all(node, `input[type="file"][${PHX_UPLOAD_REF}]`).concat(inputsOutsideForm);
    },
    findComponentNodeList(node, cid) {
      return this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}="${cid}"]`), node);
    },
    isPhxDestroyed(node) {
      return node.id && DOM.private(node, "destroyed") ? true : false;
    },
    wantsNewTab(e) {
      let wantsNewTab = e.ctrlKey || e.shiftKey || e.metaKey || e.button && e.button === 1;
      let isDownload = e.target instanceof HTMLAnchorElement && e.target.hasAttribute("download");
      let isTargetBlank = e.target.hasAttribute("target") && e.target.getAttribute("target").toLowerCase() === "_blank";
      return wantsNewTab || isTargetBlank || isDownload;
    },
    isUnloadableFormSubmit(e) {
      let isDialogSubmit = e.target && e.target.getAttribute("method") === "dialog" || e.submitter && e.submitter.getAttribute("formmethod") === "dialog";
      if (isDialogSubmit) {
        return false;
      } else {
        return !e.defaultPrevented && !this.wantsNewTab(e);
      }
    },
    isNewPageClick(e, currentLocation) {
      let href = e.target instanceof HTMLAnchorElement ? e.target.getAttribute("href") : null;
      let url;
      if (e.defaultPrevented || href === null || this.wantsNewTab(e)) {
        return false;
      }
      if (href.startsWith("mailto:") || href.startsWith("tel:")) {
        return false;
      }
      if (e.target.isContentEditable) {
        return false;
      }
      try {
        url = new URL(href);
      } catch (e2) {
        try {
          url = new URL(href, currentLocation);
        } catch (e3) {
          return true;
        }
      }
      if (url.host === currentLocation.host && url.protocol === currentLocation.protocol) {
        if (url.pathname === currentLocation.pathname && url.search === currentLocation.search) {
          return url.hash === "" && !url.href.endsWith("#");
        }
      }
      return url.protocol.startsWith("http");
    },
    markPhxChildDestroyed(el) {
      if (this.isPhxChild(el)) {
        el.setAttribute(PHX_SESSION, "");
      }
      this.putPrivate(el, "destroyed", true);
    },
    findPhxChildrenInFragment(html2, parentId) {
      let template = document.createElement("template");
      template.innerHTML = html2;
      return this.findPhxChildren(template.content, parentId);
    },
    isIgnored(el, phxUpdate) {
      return (el.getAttribute(phxUpdate) || el.getAttribute("data-phx-update")) === "ignore";
    },
    isPhxUpdate(el, phxUpdate, updateTypes) {
      return el.getAttribute && updateTypes.indexOf(el.getAttribute(phxUpdate)) >= 0;
    },
    findPhxSticky(el) {
      return this.all(el, `[${PHX_STICKY}]`);
    },
    findPhxChildren(el, parentId) {
      return this.all(el, `${PHX_VIEW_SELECTOR}[${PHX_PARENT_ID}="${parentId}"]`);
    },
    findExistingParentCIDs(node, cids) {
      let parentCids = /* @__PURE__ */ new Set();
      let childrenCids = /* @__PURE__ */ new Set();
      cids.forEach((cid) => {
        this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}="${cid}"]`), node).forEach((parent) => {
          parentCids.add(cid);
          this.all(parent, `[${PHX_COMPONENT}]`).map((el) => parseInt(el.getAttribute(PHX_COMPONENT))).forEach((childCID) => childrenCids.add(childCID));
        });
      });
      childrenCids.forEach((childCid) => parentCids.delete(childCid));
      return parentCids;
    },
    filterWithinSameLiveView(nodes, parent) {
      if (parent.querySelector(PHX_VIEW_SELECTOR)) {
        return nodes.filter((el) => this.withinSameLiveView(el, parent));
      } else {
        return nodes;
      }
    },
    withinSameLiveView(node, parent) {
      while (node = node.parentNode) {
        if (node.isSameNode(parent)) {
          return true;
        }
        if (node.getAttribute(PHX_SESSION) !== null) {
          return false;
        }
      }
    },
    private(el, key) {
      return el[PHX_PRIVATE] && el[PHX_PRIVATE][key];
    },
    deletePrivate(el, key) {
      el[PHX_PRIVATE] && delete el[PHX_PRIVATE][key];
    },
    putPrivate(el, key, value) {
      if (!el[PHX_PRIVATE]) {
        el[PHX_PRIVATE] = {};
      }
      el[PHX_PRIVATE][key] = value;
    },
    updatePrivate(el, key, defaultVal, updateFunc) {
      let existing = this.private(el, key);
      if (existing === void 0) {
        this.putPrivate(el, key, updateFunc(defaultVal));
      } else {
        this.putPrivate(el, key, updateFunc(existing));
      }
    },
    copyPrivates(target, source) {
      if (source[PHX_PRIVATE]) {
        target[PHX_PRIVATE] = source[PHX_PRIVATE];
      }
    },
    putTitle(str) {
      let titleEl = document.querySelector("title");
      if (titleEl) {
        let { prefix, suffix } = titleEl.dataset;
        document.title = `${prefix || ""}${str}${suffix || ""}`;
      } else {
        document.title = str;
      }
    },
    debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, callback) {
      let debounce3 = el.getAttribute(phxDebounce);
      let throttle = el.getAttribute(phxThrottle);
      if (debounce3 === "") {
        debounce3 = defaultDebounce;
      }
      if (throttle === "") {
        throttle = defaultThrottle;
      }
      let value = debounce3 || throttle;
      switch (value) {
        case null:
          return callback();
        case "blur":
          if (this.once(el, "debounce-blur")) {
            el.addEventListener("blur", () => callback());
          }
          return;
        default:
          let timeout = parseInt(value);
          let trigger = () => throttle ? this.deletePrivate(el, THROTTLED) : callback();
          let currentCycle = this.incCycle(el, DEBOUNCE_TRIGGER, trigger);
          if (isNaN(timeout)) {
            return logError(`invalid throttle/debounce value: ${value}`);
          }
          if (throttle) {
            let newKeyDown = false;
            if (event.type === "keydown") {
              let prevKey = this.private(el, DEBOUNCE_PREV_KEY);
              this.putPrivate(el, DEBOUNCE_PREV_KEY, event.key);
              newKeyDown = prevKey !== event.key;
            }
            if (!newKeyDown && this.private(el, THROTTLED)) {
              return false;
            } else {
              callback();
              const t = setTimeout(() => {
                if (asyncFilter()) {
                  this.triggerCycle(el, DEBOUNCE_TRIGGER);
                }
              }, timeout);
              this.putPrivate(el, THROTTLED, t);
            }
          } else {
            setTimeout(() => {
              if (asyncFilter()) {
                this.triggerCycle(el, DEBOUNCE_TRIGGER, currentCycle);
              }
            }, timeout);
          }
          let form = el.form;
          if (form && this.once(form, "bind-debounce")) {
            form.addEventListener("submit", () => {
              Array.from(new FormData(form).entries(), ([name]) => {
                let input = form.querySelector(`[name="${name}"]`);
                this.incCycle(input, DEBOUNCE_TRIGGER);
                this.deletePrivate(input, THROTTLED);
              });
            });
          }
          if (this.once(el, "bind-debounce")) {
            el.addEventListener("blur", () => {
              clearTimeout(this.private(el, THROTTLED));
              this.triggerCycle(el, DEBOUNCE_TRIGGER);
            });
          }
      }
    },
    triggerCycle(el, key, currentCycle) {
      let [cycle, trigger] = this.private(el, key);
      if (!currentCycle) {
        currentCycle = cycle;
      }
      if (currentCycle === cycle) {
        this.incCycle(el, key);
        trigger();
      }
    },
    once(el, key) {
      if (this.private(el, key) === true) {
        return false;
      }
      this.putPrivate(el, key, true);
      return true;
    },
    incCycle(el, key, trigger = function() {
    }) {
      let [currentCycle] = this.private(el, key) || [0, trigger];
      currentCycle++;
      this.putPrivate(el, key, [currentCycle, trigger]);
      return currentCycle;
    },
    maybeAddPrivateHooks(el, phxViewportTop, phxViewportBottom) {
      if (el.hasAttribute && (el.hasAttribute(phxViewportTop) || el.hasAttribute(phxViewportBottom))) {
        el.setAttribute("data-phx-hook", "Phoenix.InfiniteScroll");
      }
    },
    isFeedbackContainer(el, phxFeedbackFor) {
      return el.hasAttribute && el.hasAttribute(phxFeedbackFor);
    },
    maybeHideFeedback(container, feedbackContainers, phxFeedbackFor, phxFeedbackGroup) {
      const feedbackResults = {};
      feedbackContainers.forEach((el) => {
        if (!container.contains(el))
          return;
        const feedback = el.getAttribute(phxFeedbackFor);
        if (!feedback) {
          js_default.addOrRemoveClasses(el, [], [PHX_NO_FEEDBACK_CLASS]);
          return;
        }
        if (feedbackResults[feedback] === true) {
          this.hideFeedback(el);
          return;
        }
        feedbackResults[feedback] = this.shouldHideFeedback(container, feedback, phxFeedbackGroup);
        if (feedbackResults[feedback] === true) {
          this.hideFeedback(el);
        }
      });
    },
    hideFeedback(container) {
      js_default.addOrRemoveClasses(container, [PHX_NO_FEEDBACK_CLASS], []);
    },
    shouldHideFeedback(container, nameOrGroup, phxFeedbackGroup) {
      const query = `[name="${nameOrGroup}"],
                   [name="${nameOrGroup}[]"],
                   [${phxFeedbackGroup}="${nameOrGroup}"]`;
      let focused = false;
      DOM.all(container, query, (input) => {
        if (this.private(input, PHX_HAS_FOCUSED) || this.private(input, PHX_HAS_SUBMITTED)) {
          focused = true;
        }
      });
      return !focused;
    },
    feedbackSelector(input, phxFeedbackFor, phxFeedbackGroup) {
      let query = `[${phxFeedbackFor}="${input.name}"],
                 [${phxFeedbackFor}="${input.name.replace(/\[\]$/, "")}"]`;
      if (input.getAttribute(phxFeedbackGroup)) {
        query += `,[${phxFeedbackFor}="${input.getAttribute(phxFeedbackGroup)}"]`;
      }
      return query;
    },
    resetForm(form, phxFeedbackFor, phxFeedbackGroup) {
      Array.from(form.elements).forEach((input) => {
        let query = this.feedbackSelector(input, phxFeedbackFor, phxFeedbackGroup);
        this.deletePrivate(input, PHX_HAS_FOCUSED);
        this.deletePrivate(input, PHX_HAS_SUBMITTED);
        this.all(document, query, (feedbackEl) => {
          js_default.addOrRemoveClasses(feedbackEl, [PHX_NO_FEEDBACK_CLASS], []);
        });
      });
    },
    showError(inputEl, phxFeedbackFor, phxFeedbackGroup) {
      if (inputEl.name) {
        let query = this.feedbackSelector(inputEl, phxFeedbackFor, phxFeedbackGroup);
        this.all(document, query, (el) => {
          js_default.addOrRemoveClasses(el, [], [PHX_NO_FEEDBACK_CLASS]);
        });
      }
    },
    isPhxChild(node) {
      return node.getAttribute && node.getAttribute(PHX_PARENT_ID);
    },
    isPhxSticky(node) {
      return node.getAttribute && node.getAttribute(PHX_STICKY) !== null;
    },
    isChildOfAny(el, parents) {
      return !!parents.find((parent) => parent.contains(el));
    },
    firstPhxChild(el) {
      return this.isPhxChild(el) ? el : this.all(el, `[${PHX_PARENT_ID}]`)[0];
    },
    dispatchEvent(target, name, opts = {}) {
      let defaultBubble = true;
      let isUploadTarget = target.nodeName === "INPUT" && target.type === "file";
      if (isUploadTarget && name === "click") {
        defaultBubble = false;
      }
      let bubbles = opts.bubbles === void 0 ? defaultBubble : !!opts.bubbles;
      let eventOpts = { bubbles, cancelable: true, detail: opts.detail || {} };
      let event = name === "click" ? new MouseEvent("click", eventOpts) : new CustomEvent(name, eventOpts);
      target.dispatchEvent(event);
    },
    cloneNode(node, html2) {
      if (typeof html2 === "undefined") {
        return node.cloneNode(true);
      } else {
        let cloned = node.cloneNode(false);
        cloned.innerHTML = html2;
        return cloned;
      }
    },
    mergeAttrs(target, source, opts = {}) {
      let exclude = new Set(opts.exclude || []);
      let isIgnored = opts.isIgnored;
      let sourceAttrs = source.attributes;
      for (let i = sourceAttrs.length - 1; i >= 0; i--) {
        let name = sourceAttrs[i].name;
        if (!exclude.has(name)) {
          const sourceValue = source.getAttribute(name);
          if (target.getAttribute(name) !== sourceValue && (!isIgnored || isIgnored && name.startsWith("data-"))) {
            target.setAttribute(name, sourceValue);
          }
        } else {
          if (name === "value" && target.value === source.value) {
            target.setAttribute("value", source.getAttribute(name));
          }
        }
      }
      let targetAttrs = target.attributes;
      for (let i = targetAttrs.length - 1; i >= 0; i--) {
        let name = targetAttrs[i].name;
        if (isIgnored) {
          if (name.startsWith("data-") && !source.hasAttribute(name) && ![PHX_REF, PHX_REF_SRC].includes(name)) {
            target.removeAttribute(name);
          }
        } else {
          if (!source.hasAttribute(name)) {
            target.removeAttribute(name);
          }
        }
      }
    },
    mergeFocusedInput(target, source) {
      if (!(target instanceof HTMLSelectElement)) {
        DOM.mergeAttrs(target, source, { exclude: ["value"] });
      }
      if (source.readOnly) {
        target.setAttribute("readonly", true);
      } else {
        target.removeAttribute("readonly");
      }
    },
    hasSelectionRange(el) {
      return el.setSelectionRange && (el.type === "text" || el.type === "textarea");
    },
    restoreFocus(focused, selectionStart, selectionEnd) {
      if (focused instanceof HTMLSelectElement) {
        focused.focus();
      }
      if (!DOM.isTextualInput(focused)) {
        return;
      }
      let wasFocused = focused.matches(":focus");
      if (focused.readOnly) {
        focused.blur();
      }
      if (!wasFocused) {
        focused.focus();
      }
      if (this.hasSelectionRange(focused)) {
        focused.setSelectionRange(selectionStart, selectionEnd);
      }
    },
    isFormInput(el) {
      return /^(?:input|select|textarea)$/i.test(el.tagName) && el.type !== "button";
    },
    syncAttrsToProps(el) {
      if (el instanceof HTMLInputElement && CHECKABLE_INPUTS.indexOf(el.type.toLocaleLowerCase()) >= 0) {
        el.checked = el.getAttribute("checked") !== null;
      }
    },
    isTextualInput(el) {
      return FOCUSABLE_INPUTS.indexOf(el.type) >= 0;
    },
    isNowTriggerFormExternal(el, phxTriggerExternal) {
      return el.getAttribute && el.getAttribute(phxTriggerExternal) !== null;
    },
    syncPendingRef(fromEl, toEl, disableWith) {
      let ref = fromEl.getAttribute(PHX_REF);
      if (ref === null) {
        return true;
      }
      let refSrc = fromEl.getAttribute(PHX_REF_SRC);
      if (DOM.isFormInput(fromEl) || fromEl.getAttribute(disableWith) !== null) {
        if (DOM.isUploadInput(fromEl)) {
          DOM.mergeAttrs(fromEl, toEl, { isIgnored: true });
        }
        DOM.putPrivate(fromEl, PHX_REF, toEl);
        return false;
      } else {
        PHX_EVENT_CLASSES.forEach((className) => {
          fromEl.classList.contains(className) && toEl.classList.add(className);
        });
        toEl.setAttribute(PHX_REF, ref);
        toEl.setAttribute(PHX_REF_SRC, refSrc);
        return true;
      }
    },
    cleanChildNodes(container, phxUpdate) {
      if (DOM.isPhxUpdate(container, phxUpdate, ["append", "prepend"])) {
        let toRemove = [];
        container.childNodes.forEach((childNode) => {
          if (!childNode.id) {
            let isEmptyTextNode = childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim() === "";
            if (!isEmptyTextNode) {
              logError(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(childNode.outerHTML || childNode.nodeValue).trim()}"

`);
            }
            toRemove.push(childNode);
          }
        });
        toRemove.forEach((childNode) => childNode.remove());
      }
    },
    replaceRootContainer(container, tagName, attrs) {
      let retainedAttrs = /* @__PURE__ */ new Set(["id", PHX_SESSION, PHX_STATIC, PHX_MAIN, PHX_ROOT_ID]);
      if (container.tagName.toLowerCase() === tagName.toLowerCase()) {
        Array.from(container.attributes).filter((attr) => !retainedAttrs.has(attr.name.toLowerCase())).forEach((attr) => container.removeAttribute(attr.name));
        Object.keys(attrs).filter((name) => !retainedAttrs.has(name.toLowerCase())).forEach((attr) => container.setAttribute(attr, attrs[attr]));
        return container;
      } else {
        let newContainer = document.createElement(tagName);
        Object.keys(attrs).forEach((attr) => newContainer.setAttribute(attr, attrs[attr]));
        retainedAttrs.forEach((attr) => newContainer.setAttribute(attr, container.getAttribute(attr)));
        newContainer.innerHTML = container.innerHTML;
        container.replaceWith(newContainer);
        return newContainer;
      }
    },
    getSticky(el, name, defaultVal) {
      let op = (DOM.private(el, "sticky") || []).find(([existingName]) => name === existingName);
      if (op) {
        let [_name, _op, stashedResult] = op;
        return stashedResult;
      } else {
        return typeof defaultVal === "function" ? defaultVal() : defaultVal;
      }
    },
    deleteSticky(el, name) {
      this.updatePrivate(el, "sticky", [], (ops) => {
        return ops.filter(([existingName, _]) => existingName !== name);
      });
    },
    putSticky(el, name, op) {
      let stashedResult = op(el);
      this.updatePrivate(el, "sticky", [], (ops) => {
        let existingIndex = ops.findIndex(([existingName]) => name === existingName);
        if (existingIndex >= 0) {
          ops[existingIndex] = [name, op, stashedResult];
        } else {
          ops.push([name, op, stashedResult]);
        }
        return ops;
      });
    },
    applyStickyOperations(el) {
      let ops = DOM.private(el, "sticky");
      if (!ops) {
        return;
      }
      ops.forEach(([name, op, _stashed]) => this.putSticky(el, name, op));
    }
  };
  var dom_default = DOM;
  var UploadEntry = class {
    static isActive(fileEl, file) {
      let isNew = file._phxRef === void 0;
      let activeRefs = fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      let isActive = activeRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return file.size > 0 && (isNew || isActive);
    }
    static isPreflighted(fileEl, file) {
      let preflightedRefs = fileEl.getAttribute(PHX_PREFLIGHTED_REFS).split(",");
      let isPreflighted = preflightedRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return isPreflighted && this.isActive(fileEl, file);
    }
    static isPreflightInProgress(file) {
      return file._preflightInProgress === true;
    }
    static markPreflightInProgress(file) {
      file._preflightInProgress = true;
    }
    constructor(fileEl, file, view, autoUpload) {
      this.ref = LiveUploader.genFileRef(file);
      this.fileEl = fileEl;
      this.file = file;
      this.view = view;
      this.meta = null;
      this._isCancelled = false;
      this._isDone = false;
      this._progress = 0;
      this._lastProgressSent = -1;
      this._onDone = function() {
      };
      this._onElUpdated = this.onElUpdated.bind(this);
      this.fileEl.addEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
      this.autoUpload = autoUpload;
    }
    metadata() {
      return this.meta;
    }
    progress(progress) {
      this._progress = Math.floor(progress);
      if (this._progress > this._lastProgressSent) {
        if (this._progress >= 100) {
          this._progress = 100;
          this._lastProgressSent = 100;
          this._isDone = true;
          this.view.pushFileProgress(this.fileEl, this.ref, 100, () => {
            LiveUploader.untrackFile(this.fileEl, this.file);
            this._onDone();
          });
        } else {
          this._lastProgressSent = this._progress;
          this.view.pushFileProgress(this.fileEl, this.ref, this._progress);
        }
      }
    }
    isCancelled() {
      return this._isCancelled;
    }
    cancel() {
      this.file._preflightInProgress = false;
      this._isCancelled = true;
      this._isDone = true;
      this._onDone();
    }
    isDone() {
      return this._isDone;
    }
    error(reason = "failed") {
      this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
      this.view.pushFileProgress(this.fileEl, this.ref, { error: reason });
      if (!this.isAutoUpload()) {
        LiveUploader.clearFiles(this.fileEl);
      }
    }
    isAutoUpload() {
      return this.autoUpload;
    }
    onDone(callback) {
      this._onDone = () => {
        this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
        callback();
      };
    }
    onElUpdated() {
      let activeRefs = this.fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      if (activeRefs.indexOf(this.ref) === -1) {
        LiveUploader.untrackFile(this.fileEl, this.file);
        this.cancel();
      }
    }
    toPreflightPayload() {
      return {
        last_modified: this.file.lastModified,
        name: this.file.name,
        relative_path: this.file.webkitRelativePath,
        size: this.file.size,
        type: this.file.type,
        ref: this.ref,
        meta: typeof this.file.meta === "function" ? this.file.meta() : void 0
      };
    }
    uploader(uploaders) {
      if (this.meta.uploader) {
        let callback = uploaders[this.meta.uploader] || logError(`no uploader configured for ${this.meta.uploader}`);
        return { name: this.meta.uploader, callback };
      } else {
        return { name: "channel", callback: channelUploader };
      }
    }
    zipPostFlight(resp) {
      this.meta = resp.entries[this.ref];
      if (!this.meta) {
        logError(`no preflight upload response returned with ref ${this.ref}`, { input: this.fileEl, response: resp });
      }
    }
  };
  var liveUploaderFileRef = 0;
  var LiveUploader = class {
    static genFileRef(file) {
      let ref = file._phxRef;
      if (ref !== void 0) {
        return ref;
      } else {
        file._phxRef = (liveUploaderFileRef++).toString();
        return file._phxRef;
      }
    }
    static getEntryDataURL(inputEl, ref, callback) {
      let file = this.activeFiles(inputEl).find((file2) => this.genFileRef(file2) === ref);
      callback(URL.createObjectURL(file));
    }
    static hasUploadsInProgress(formEl) {
      let active = 0;
      dom_default.findUploadInputs(formEl).forEach((input) => {
        if (input.getAttribute(PHX_PREFLIGHTED_REFS) !== input.getAttribute(PHX_DONE_REFS)) {
          active++;
        }
      });
      return active > 0;
    }
    static serializeUploads(inputEl) {
      let files = this.activeFiles(inputEl);
      let fileData = {};
      files.forEach((file) => {
        let entry = { path: inputEl.name };
        let uploadRef = inputEl.getAttribute(PHX_UPLOAD_REF);
        fileData[uploadRef] = fileData[uploadRef] || [];
        entry.ref = this.genFileRef(file);
        entry.last_modified = file.lastModified;
        entry.name = file.name || entry.ref;
        entry.relative_path = file.webkitRelativePath;
        entry.type = file.type;
        entry.size = file.size;
        if (typeof file.meta === "function") {
          entry.meta = file.meta();
        }
        fileData[uploadRef].push(entry);
      });
      return fileData;
    }
    static clearFiles(inputEl) {
      inputEl.value = null;
      inputEl.removeAttribute(PHX_UPLOAD_REF);
      dom_default.putPrivate(inputEl, "files", []);
    }
    static untrackFile(inputEl, file) {
      dom_default.putPrivate(inputEl, "files", dom_default.private(inputEl, "files").filter((f) => !Object.is(f, file)));
    }
    static trackFiles(inputEl, files, dataTransfer) {
      if (inputEl.getAttribute("multiple") !== null) {
        let newFiles = files.filter((file) => !this.activeFiles(inputEl).find((f) => Object.is(f, file)));
        dom_default.updatePrivate(inputEl, "files", [], (existing) => existing.concat(newFiles));
        inputEl.value = null;
      } else {
        if (dataTransfer && dataTransfer.files.length > 0) {
          inputEl.files = dataTransfer.files;
        }
        dom_default.putPrivate(inputEl, "files", files);
      }
    }
    static activeFileInputs(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((el) => el.files && this.activeFiles(el).length > 0);
    }
    static activeFiles(input) {
      return (dom_default.private(input, "files") || []).filter((f) => UploadEntry.isActive(input, f));
    }
    static inputsAwaitingPreflight(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((input) => this.filesAwaitingPreflight(input).length > 0);
    }
    static filesAwaitingPreflight(input) {
      return this.activeFiles(input).filter((f) => !UploadEntry.isPreflighted(input, f) && !UploadEntry.isPreflightInProgress(f));
    }
    static markPreflightInProgress(entries) {
      entries.forEach((entry) => UploadEntry.markPreflightInProgress(entry.file));
    }
    constructor(inputEl, view, onComplete) {
      this.autoUpload = dom_default.isAutoUpload(inputEl);
      this.view = view;
      this.onComplete = onComplete;
      this._entries = Array.from(LiveUploader.filesAwaitingPreflight(inputEl) || []).map((file) => new UploadEntry(inputEl, file, view, this.autoUpload));
      LiveUploader.markPreflightInProgress(this._entries);
      this.numEntriesInProgress = this._entries.length;
    }
    isAutoUpload() {
      return this.autoUpload;
    }
    entries() {
      return this._entries;
    }
    initAdapterUpload(resp, onError, liveSocket2) {
      this._entries = this._entries.map((entry) => {
        if (entry.isCancelled()) {
          this.numEntriesInProgress--;
          if (this.numEntriesInProgress === 0) {
            this.onComplete();
          }
        } else {
          entry.zipPostFlight(resp);
          entry.onDone(() => {
            this.numEntriesInProgress--;
            if (this.numEntriesInProgress === 0) {
              this.onComplete();
            }
          });
        }
        return entry;
      });
      let groupedEntries = this._entries.reduce((acc, entry) => {
        if (!entry.meta) {
          return acc;
        }
        let { name, callback } = entry.uploader(liveSocket2.uploaders);
        acc[name] = acc[name] || { callback, entries: [] };
        acc[name].entries.push(entry);
        return acc;
      }, {});
      for (let name in groupedEntries) {
        let { callback, entries } = groupedEntries[name];
        callback(entries, onError, resp, liveSocket2);
      }
    }
  };
  var Hooks = {
    LiveFileUpload: {
      activeRefs() {
        return this.el.getAttribute(PHX_ACTIVE_ENTRY_REFS);
      },
      preflightedRefs() {
        return this.el.getAttribute(PHX_PREFLIGHTED_REFS);
      },
      mounted() {
        this.preflightedWas = this.preflightedRefs();
      },
      updated() {
        let newPreflights = this.preflightedRefs();
        if (this.preflightedWas !== newPreflights) {
          this.preflightedWas = newPreflights;
          if (newPreflights === "") {
            this.__view.cancelSubmit(this.el.form);
          }
        }
        if (this.activeRefs() === "") {
          this.el.value = null;
        }
        this.el.dispatchEvent(new CustomEvent(PHX_LIVE_FILE_UPDATED));
      }
    },
    LiveImgPreview: {
      mounted() {
        this.ref = this.el.getAttribute("data-phx-entry-ref");
        this.inputEl = document.getElementById(this.el.getAttribute(PHX_UPLOAD_REF));
        LiveUploader.getEntryDataURL(this.inputEl, this.ref, (url) => {
          this.url = url;
          this.el.src = url;
        });
      },
      destroyed() {
        URL.revokeObjectURL(this.url);
      }
    },
    FocusWrap: {
      mounted() {
        this.focusStart = this.el.firstElementChild;
        this.focusEnd = this.el.lastElementChild;
        this.focusStart.addEventListener("focus", () => aria_default.focusLast(this.el));
        this.focusEnd.addEventListener("focus", () => aria_default.focusFirst(this.el));
        this.el.addEventListener("phx:show-end", () => this.el.focus());
        if (window.getComputedStyle(this.el).display !== "none") {
          aria_default.focusFirst(this.el);
        }
      }
    }
  };
  var findScrollContainer = (el) => {
    if (["scroll", "auto"].indexOf(getComputedStyle(el).overflowY) >= 0)
      return el;
    if (document.documentElement === el)
      return null;
    return findScrollContainer(el.parentElement);
  };
  var scrollTop = (scrollContainer) => {
    if (scrollContainer) {
      return scrollContainer.scrollTop;
    } else {
      return document.documentElement.scrollTop || document.body.scrollTop;
    }
  };
  var bottom = (scrollContainer) => {
    if (scrollContainer) {
      return scrollContainer.getBoundingClientRect().bottom;
    } else {
      return window.innerHeight || document.documentElement.clientHeight;
    }
  };
  var top = (scrollContainer) => {
    if (scrollContainer) {
      return scrollContainer.getBoundingClientRect().top;
    } else {
      return 0;
    }
  };
  var isAtViewportTop = (el, scrollContainer) => {
    let rect = el.getBoundingClientRect();
    return rect.top >= top(scrollContainer) && rect.left >= 0 && rect.top <= bottom(scrollContainer);
  };
  var isAtViewportBottom = (el, scrollContainer) => {
    let rect = el.getBoundingClientRect();
    return rect.right >= top(scrollContainer) && rect.left >= 0 && rect.bottom <= bottom(scrollContainer);
  };
  var isWithinViewport = (el, scrollContainer) => {
    let rect = el.getBoundingClientRect();
    return rect.top >= top(scrollContainer) && rect.left >= 0 && rect.top <= bottom(scrollContainer);
  };
  Hooks.InfiniteScroll = {
    mounted() {
      this.scrollContainer = findScrollContainer(this.el);
      let scrollBefore = scrollTop(this.scrollContainer);
      let topOverran = false;
      let throttleInterval = 500;
      let pendingOp = null;
      let onTopOverrun = this.throttle(throttleInterval, (topEvent, firstChild) => {
        pendingOp = () => true;
        this.liveSocket.execJSHookPush(this.el, topEvent, { id: firstChild.id, _overran: true }, () => {
          pendingOp = null;
        });
      });
      let onFirstChildAtTop = this.throttle(throttleInterval, (topEvent, firstChild) => {
        pendingOp = () => firstChild.scrollIntoView({ block: "start" });
        this.liveSocket.execJSHookPush(this.el, topEvent, { id: firstChild.id }, () => {
          pendingOp = null;
          window.requestAnimationFrame(() => {
            if (!isWithinViewport(firstChild, this.scrollContainer)) {
              firstChild.scrollIntoView({ block: "start" });
            }
          });
        });
      });
      let onLastChildAtBottom = this.throttle(throttleInterval, (bottomEvent, lastChild) => {
        pendingOp = () => lastChild.scrollIntoView({ block: "end" });
        this.liveSocket.execJSHookPush(this.el, bottomEvent, { id: lastChild.id }, () => {
          pendingOp = null;
          window.requestAnimationFrame(() => {
            if (!isWithinViewport(lastChild, this.scrollContainer)) {
              lastChild.scrollIntoView({ block: "end" });
            }
          });
        });
      });
      this.onScroll = (_e) => {
        let scrollNow = scrollTop(this.scrollContainer);
        if (pendingOp) {
          scrollBefore = scrollNow;
          return pendingOp();
        }
        let rect = this.el.getBoundingClientRect();
        let topEvent = this.el.getAttribute(this.liveSocket.binding("viewport-top"));
        let bottomEvent = this.el.getAttribute(this.liveSocket.binding("viewport-bottom"));
        let lastChild = this.el.lastElementChild;
        let firstChild = this.el.firstElementChild;
        let isScrollingUp = scrollNow < scrollBefore;
        let isScrollingDown = scrollNow > scrollBefore;
        if (isScrollingUp && topEvent && !topOverran && rect.top >= 0) {
          topOverran = true;
          onTopOverrun(topEvent, firstChild);
        } else if (isScrollingDown && topOverran && rect.top <= 0) {
          topOverran = false;
        }
        if (topEvent && isScrollingUp && isAtViewportTop(firstChild, this.scrollContainer)) {
          onFirstChildAtTop(topEvent, firstChild);
        } else if (bottomEvent && isScrollingDown && isAtViewportBottom(lastChild, this.scrollContainer)) {
          onLastChildAtBottom(bottomEvent, lastChild);
        }
        scrollBefore = scrollNow;
      };
      if (this.scrollContainer) {
        this.scrollContainer.addEventListener("scroll", this.onScroll);
      } else {
        window.addEventListener("scroll", this.onScroll);
      }
    },
    destroyed() {
      if (this.scrollContainer) {
        this.scrollContainer.removeEventListener("scroll", this.onScroll);
      } else {
        window.removeEventListener("scroll", this.onScroll);
      }
    },
    throttle(interval, callback) {
      let lastCallAt = 0;
      let timer;
      return (...args) => {
        let now = Date.now();
        let remainingTime = interval - (now - lastCallAt);
        if (remainingTime <= 0 || remainingTime > interval) {
          if (timer) {
            clearTimeout(timer);
            timer = null;
          }
          lastCallAt = now;
          callback(...args);
        } else if (!timer) {
          timer = setTimeout(() => {
            lastCallAt = Date.now();
            timer = null;
            callback(...args);
          }, remainingTime);
        }
      };
    }
  };
  var hooks_default = Hooks;
  var DOMPostMorphRestorer = class {
    constructor(containerBefore, containerAfter, updateType) {
      let idsBefore = /* @__PURE__ */ new Set();
      let idsAfter = new Set([...containerAfter.children].map((child) => child.id));
      let elementsToModify = [];
      Array.from(containerBefore.children).forEach((child) => {
        if (child.id) {
          idsBefore.add(child.id);
          if (idsAfter.has(child.id)) {
            let previousElementId = child.previousElementSibling && child.previousElementSibling.id;
            elementsToModify.push({ elementId: child.id, previousElementId });
          }
        }
      });
      this.containerId = containerAfter.id;
      this.updateType = updateType;
      this.elementsToModify = elementsToModify;
      this.elementIdsToAdd = [...idsAfter].filter((id) => !idsBefore.has(id));
    }
    perform() {
      let container = dom_default.byId(this.containerId);
      this.elementsToModify.forEach((elementToModify) => {
        if (elementToModify.previousElementId) {
          maybe(document.getElementById(elementToModify.previousElementId), (previousElem) => {
            maybe(document.getElementById(elementToModify.elementId), (elem) => {
              let isInRightPlace = elem.previousElementSibling && elem.previousElementSibling.id == previousElem.id;
              if (!isInRightPlace) {
                previousElem.insertAdjacentElement("afterend", elem);
              }
            });
          });
        } else {
          maybe(document.getElementById(elementToModify.elementId), (elem) => {
            let isInRightPlace = elem.previousElementSibling == null;
            if (!isInRightPlace) {
              container.insertAdjacentElement("afterbegin", elem);
            }
          });
        }
      });
      if (this.updateType == "prepend") {
        this.elementIdsToAdd.reverse().forEach((elemId) => {
          maybe(document.getElementById(elemId), (elem) => container.insertAdjacentElement("afterbegin", elem));
        });
      }
    }
  };
  var DOCUMENT_FRAGMENT_NODE = 11;
  function morphAttrs(fromNode, toNode) {
    var toNodeAttrs = toNode.attributes;
    var attr;
    var attrName;
    var attrNamespaceURI;
    var attrValue;
    var fromValue;
    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {
      return;
    }
    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {
      attr = toNodeAttrs[i];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      attrValue = attr.value;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);
        if (fromValue !== attrValue) {
          if (attr.prefix === "xmlns") {
            attrName = attr.name;
          }
          fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);
        }
      } else {
        fromValue = fromNode.getAttribute(attrName);
        if (fromValue !== attrValue) {
          fromNode.setAttribute(attrName, attrValue);
        }
      }
    }
    var fromNodeAttrs = fromNode.attributes;
    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {
      attr = fromNodeAttrs[d];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {
          fromNode.removeAttributeNS(attrNamespaceURI, attrName);
        }
      } else {
        if (!toNode.hasAttribute(attrName)) {
          fromNode.removeAttribute(attrName);
        }
      }
    }
  }
  var range;
  var NS_XHTML = "http://www.w3.org/1999/xhtml";
  var doc = typeof document === "undefined" ? void 0 : document;
  var HAS_TEMPLATE_SUPPORT = !!doc && "content" in doc.createElement("template");
  var HAS_RANGE_SUPPORT = !!doc && doc.createRange && "createContextualFragment" in doc.createRange();
  function createFragmentFromTemplate(str) {
    var template = doc.createElement("template");
    template.innerHTML = str;
    return template.content.childNodes[0];
  }
  function createFragmentFromRange(str) {
    if (!range) {
      range = doc.createRange();
      range.selectNode(doc.body);
    }
    var fragment = range.createContextualFragment(str);
    return fragment.childNodes[0];
  }
  function createFragmentFromWrap(str) {
    var fragment = doc.createElement("body");
    fragment.innerHTML = str;
    return fragment.childNodes[0];
  }
  function toElement(str) {
    str = str.trim();
    if (HAS_TEMPLATE_SUPPORT) {
      return createFragmentFromTemplate(str);
    } else if (HAS_RANGE_SUPPORT) {
      return createFragmentFromRange(str);
    }
    return createFragmentFromWrap(str);
  }
  function compareNodeNames(fromEl, toEl) {
    var fromNodeName = fromEl.nodeName;
    var toNodeName = toEl.nodeName;
    var fromCodeStart, toCodeStart;
    if (fromNodeName === toNodeName) {
      return true;
    }
    fromCodeStart = fromNodeName.charCodeAt(0);
    toCodeStart = toNodeName.charCodeAt(0);
    if (fromCodeStart <= 90 && toCodeStart >= 97) {
      return fromNodeName === toNodeName.toUpperCase();
    } else if (toCodeStart <= 90 && fromCodeStart >= 97) {
      return toNodeName === fromNodeName.toUpperCase();
    } else {
      return false;
    }
  }
  function createElementNS(name, namespaceURI) {
    return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name) : doc.createElementNS(namespaceURI, name);
  }
  function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while (curChild) {
      var nextChild = curChild.nextSibling;
      toEl.appendChild(curChild);
      curChild = nextChild;
    }
    return toEl;
  }
  function syncBooleanAttrProp(fromEl, toEl, name) {
    if (fromEl[name] !== toEl[name]) {
      fromEl[name] = toEl[name];
      if (fromEl[name]) {
        fromEl.setAttribute(name, "");
      } else {
        fromEl.removeAttribute(name);
      }
    }
  }
  var specialElHandlers = {
    OPTION: function(fromEl, toEl) {
      var parentNode = fromEl.parentNode;
      if (parentNode) {
        var parentName = parentNode.nodeName.toUpperCase();
        if (parentName === "OPTGROUP") {
          parentNode = parentNode.parentNode;
          parentName = parentNode && parentNode.nodeName.toUpperCase();
        }
        if (parentName === "SELECT" && !parentNode.hasAttribute("multiple")) {
          if (fromEl.hasAttribute("selected") && !toEl.selected) {
            fromEl.setAttribute("selected", "selected");
            fromEl.removeAttribute("selected");
          }
          parentNode.selectedIndex = -1;
        }
      }
      syncBooleanAttrProp(fromEl, toEl, "selected");
    },
    INPUT: function(fromEl, toEl) {
      syncBooleanAttrProp(fromEl, toEl, "checked");
      syncBooleanAttrProp(fromEl, toEl, "disabled");
      if (fromEl.value !== toEl.value) {
        fromEl.value = toEl.value;
      }
      if (!toEl.hasAttribute("value")) {
        fromEl.removeAttribute("value");
      }
    },
    TEXTAREA: function(fromEl, toEl) {
      var newValue = toEl.value;
      if (fromEl.value !== newValue) {
        fromEl.value = newValue;
      }
      var firstChild = fromEl.firstChild;
      if (firstChild) {
        var oldValue = firstChild.nodeValue;
        if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {
          return;
        }
        firstChild.nodeValue = newValue;
      }
    },
    SELECT: function(fromEl, toEl) {
      if (!toEl.hasAttribute("multiple")) {
        var selectedIndex = -1;
        var i = 0;
        var curChild = fromEl.firstChild;
        var optgroup;
        var nodeName;
        while (curChild) {
          nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();
          if (nodeName === "OPTGROUP") {
            optgroup = curChild;
            curChild = optgroup.firstChild;
          } else {
            if (nodeName === "OPTION") {
              if (curChild.hasAttribute("selected")) {
                selectedIndex = i;
                break;
              }
              i++;
            }
            curChild = curChild.nextSibling;
            if (!curChild && optgroup) {
              curChild = optgroup.nextSibling;
              optgroup = null;
            }
          }
        }
        fromEl.selectedIndex = selectedIndex;
      }
    }
  };
  var ELEMENT_NODE = 1;
  var DOCUMENT_FRAGMENT_NODE$1 = 11;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  function noop() {
  }
  function defaultGetNodeKey(node) {
    if (node) {
      return node.getAttribute && node.getAttribute("id") || node.id;
    }
  }
  function morphdomFactory(morphAttrs2) {
    return function morphdom2(fromNode, toNode, options) {
      if (!options) {
        options = {};
      }
      if (typeof toNode === "string") {
        if (fromNode.nodeName === "#document" || fromNode.nodeName === "HTML" || fromNode.nodeName === "BODY") {
          var toNodeHtml = toNode;
          toNode = doc.createElement("html");
          toNode.innerHTML = toNodeHtml;
        } else {
          toNode = toElement(toNode);
        }
      } else if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
        toNode = toNode.firstElementChild;
      }
      var getNodeKey = options.getNodeKey || defaultGetNodeKey;
      var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;
      var onNodeAdded = options.onNodeAdded || noop;
      var onBeforeElUpdated = options.onBeforeElUpdated || noop;
      var onElUpdated = options.onElUpdated || noop;
      var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
      var onNodeDiscarded = options.onNodeDiscarded || noop;
      var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;
      var skipFromChildren = options.skipFromChildren || noop;
      var addChild = options.addChild || function(parent, child) {
        return parent.appendChild(child);
      };
      var childrenOnly = options.childrenOnly === true;
      var fromNodesLookup = /* @__PURE__ */ Object.create(null);
      var keyedRemovalList = [];
      function addKeyedRemoval(key) {
        keyedRemovalList.push(key);
      }
      function walkDiscardedChildNodes(node, skipKeyedNodes) {
        if (node.nodeType === ELEMENT_NODE) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = void 0;
            if (skipKeyedNodes && (key = getNodeKey(curChild))) {
              addKeyedRemoval(key);
            } else {
              onNodeDiscarded(curChild);
              if (curChild.firstChild) {
                walkDiscardedChildNodes(curChild, skipKeyedNodes);
              }
            }
            curChild = curChild.nextSibling;
          }
        }
      }
      function removeNode(node, parentNode, skipKeyedNodes) {
        if (onBeforeNodeDiscarded(node) === false) {
          return;
        }
        if (parentNode) {
          parentNode.removeChild(node);
        }
        onNodeDiscarded(node);
        walkDiscardedChildNodes(node, skipKeyedNodes);
      }
      function indexTree(node) {
        if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = getNodeKey(curChild);
            if (key) {
              fromNodesLookup[key] = curChild;
            }
            indexTree(curChild);
            curChild = curChild.nextSibling;
          }
        }
      }
      indexTree(fromNode);
      function handleNodeAdded(el) {
        onNodeAdded(el);
        var curChild = el.firstChild;
        while (curChild) {
          var nextSibling = curChild.nextSibling;
          var key = getNodeKey(curChild);
          if (key) {
            var unmatchedFromEl = fromNodesLookup[key];
            if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {
              curChild.parentNode.replaceChild(unmatchedFromEl, curChild);
              morphEl(unmatchedFromEl, curChild);
            } else {
              handleNodeAdded(curChild);
            }
          } else {
            handleNodeAdded(curChild);
          }
          curChild = nextSibling;
        }
      }
      function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {
        while (curFromNodeChild) {
          var fromNextSibling = curFromNodeChild.nextSibling;
          if (curFromNodeKey = getNodeKey(curFromNodeChild)) {
            addKeyedRemoval(curFromNodeKey);
          } else {
            removeNode(curFromNodeChild, fromEl, true);
          }
          curFromNodeChild = fromNextSibling;
        }
      }
      function morphEl(fromEl, toEl, childrenOnly2) {
        var toElKey = getNodeKey(toEl);
        if (toElKey) {
          delete fromNodesLookup[toElKey];
        }
        if (!childrenOnly2) {
          if (onBeforeElUpdated(fromEl, toEl) === false) {
            return;
          }
          morphAttrs2(fromEl, toEl);
          onElUpdated(fromEl);
          if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {
            return;
          }
        }
        if (fromEl.nodeName !== "TEXTAREA") {
          morphChildren(fromEl, toEl);
        } else {
          specialElHandlers.TEXTAREA(fromEl, toEl);
        }
      }
      function morphChildren(fromEl, toEl) {
        var skipFrom = skipFromChildren(fromEl, toEl);
        var curToNodeChild = toEl.firstChild;
        var curFromNodeChild = fromEl.firstChild;
        var curToNodeKey;
        var curFromNodeKey;
        var fromNextSibling;
        var toNextSibling;
        var matchingFromEl;
        outer:
          while (curToNodeChild) {
            toNextSibling = curToNodeChild.nextSibling;
            curToNodeKey = getNodeKey(curToNodeChild);
            while (!skipFrom && curFromNodeChild) {
              fromNextSibling = curFromNodeChild.nextSibling;
              if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              curFromNodeKey = getNodeKey(curFromNodeChild);
              var curFromNodeType = curFromNodeChild.nodeType;
              var isCompatible = void 0;
              if (curFromNodeType === curToNodeChild.nodeType) {
                if (curFromNodeType === ELEMENT_NODE) {
                  if (curToNodeKey) {
                    if (curToNodeKey !== curFromNodeKey) {
                      if (matchingFromEl = fromNodesLookup[curToNodeKey]) {
                        if (fromNextSibling === matchingFromEl) {
                          isCompatible = false;
                        } else {
                          fromEl.insertBefore(matchingFromEl, curFromNodeChild);
                          if (curFromNodeKey) {
                            addKeyedRemoval(curFromNodeKey);
                          } else {
                            removeNode(curFromNodeChild, fromEl, true);
                          }
                          curFromNodeChild = matchingFromEl;
                          curFromNodeKey = getNodeKey(curFromNodeChild);
                        }
                      } else {
                        isCompatible = false;
                      }
                    }
                  } else if (curFromNodeKey) {
                    isCompatible = false;
                  }
                  isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);
                  if (isCompatible) {
                    morphEl(curFromNodeChild, curToNodeChild);
                  }
                } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {
                  isCompatible = true;
                  if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {
                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                  }
                }
              }
              if (isCompatible) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              if (curFromNodeKey) {
                addKeyedRemoval(curFromNodeKey);
              } else {
                removeNode(curFromNodeChild, fromEl, true);
              }
              curFromNodeChild = fromNextSibling;
            }
            if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {
              if (!skipFrom) {
                addChild(fromEl, matchingFromEl);
              }
              morphEl(matchingFromEl, curToNodeChild);
            } else {
              var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
              if (onBeforeNodeAddedResult !== false) {
                if (onBeforeNodeAddedResult) {
                  curToNodeChild = onBeforeNodeAddedResult;
                }
                if (curToNodeChild.actualize) {
                  curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);
                }
                addChild(fromEl, curToNodeChild);
                handleNodeAdded(curToNodeChild);
              }
            }
            curToNodeChild = toNextSibling;
            curFromNodeChild = fromNextSibling;
          }
        cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);
        var specialElHandler = specialElHandlers[fromEl.nodeName];
        if (specialElHandler) {
          specialElHandler(fromEl, toEl);
        }
      }
      var morphedNode = fromNode;
      var morphedNodeType = morphedNode.nodeType;
      var toNodeType = toNode.nodeType;
      if (!childrenOnly) {
        if (morphedNodeType === ELEMENT_NODE) {
          if (toNodeType === ELEMENT_NODE) {
            if (!compareNodeNames(fromNode, toNode)) {
              onNodeDiscarded(fromNode);
              morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));
            }
          } else {
            morphedNode = toNode;
          }
        } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {
          if (toNodeType === morphedNodeType) {
            if (morphedNode.nodeValue !== toNode.nodeValue) {
              morphedNode.nodeValue = toNode.nodeValue;
            }
            return morphedNode;
          } else {
            morphedNode = toNode;
          }
        }
      }
      if (morphedNode === toNode) {
        onNodeDiscarded(fromNode);
      } else {
        if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {
          return;
        }
        morphEl(morphedNode, toNode, childrenOnly);
        if (keyedRemovalList) {
          for (var i = 0, len = keyedRemovalList.length; i < len; i++) {
            var elToRemove = fromNodesLookup[keyedRemovalList[i]];
            if (elToRemove) {
              removeNode(elToRemove, elToRemove.parentNode, false);
            }
          }
        }
      }
      if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
        if (morphedNode.actualize) {
          morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);
        }
        fromNode.parentNode.replaceChild(morphedNode, fromNode);
      }
      return morphedNode;
    };
  }
  var morphdom = morphdomFactory(morphAttrs);
  var morphdom_esm_default = morphdom;
  var DOMPatch = class {
    static patchEl(fromEl, toEl, activeElement) {
      morphdom_esm_default(fromEl, toEl, {
        childrenOnly: false,
        onBeforeElUpdated: (fromEl2, toEl2) => {
          if (activeElement && activeElement.isSameNode(fromEl2) && dom_default.isFormInput(fromEl2)) {
            dom_default.mergeFocusedInput(fromEl2, toEl2);
            return false;
          }
        }
      });
    }
    constructor(view, container, id, html2, streams, targetCID) {
      this.view = view;
      this.liveSocket = view.liveSocket;
      this.container = container;
      this.id = id;
      this.rootID = view.root.id;
      this.html = html2;
      this.streams = streams;
      this.streamInserts = {};
      this.streamComponentRestore = {};
      this.targetCID = targetCID;
      this.cidPatch = isCid(this.targetCID);
      this.pendingRemoves = [];
      this.phxRemove = this.liveSocket.binding("remove");
      this.callbacks = {
        beforeadded: [],
        beforeupdated: [],
        beforephxChildAdded: [],
        afteradded: [],
        afterupdated: [],
        afterdiscarded: [],
        afterphxChildAdded: [],
        aftertransitionsDiscarded: []
      };
    }
    before(kind, callback) {
      this.callbacks[`before${kind}`].push(callback);
    }
    after(kind, callback) {
      this.callbacks[`after${kind}`].push(callback);
    }
    trackBefore(kind, ...args) {
      this.callbacks[`before${kind}`].forEach((callback) => callback(...args));
    }
    trackAfter(kind, ...args) {
      this.callbacks[`after${kind}`].forEach((callback) => callback(...args));
    }
    markPrunableContentForRemoval() {
      let phxUpdate = this.liveSocket.binding(PHX_UPDATE);
      dom_default.all(this.container, `[${phxUpdate}=append] > *, [${phxUpdate}=prepend] > *`, (el) => {
        el.setAttribute(PHX_PRUNE, "");
      });
    }
    perform(isJoinPatch) {
      let { view, liveSocket: liveSocket2, container, html: html2 } = this;
      let targetContainer = this.isCIDPatch() ? this.targetCIDContainer(html2) : container;
      if (this.isCIDPatch() && !targetContainer) {
        return;
      }
      let focused = liveSocket2.getActiveElement();
      let { selectionStart, selectionEnd } = focused && dom_default.hasSelectionRange(focused) ? focused : {};
      let phxUpdate = liveSocket2.binding(PHX_UPDATE);
      let phxFeedbackFor = liveSocket2.binding(PHX_FEEDBACK_FOR);
      let phxFeedbackGroup = liveSocket2.binding(PHX_FEEDBACK_GROUP);
      let disableWith = liveSocket2.binding(PHX_DISABLE_WITH);
      let phxViewportTop = liveSocket2.binding(PHX_VIEWPORT_TOP);
      let phxViewportBottom = liveSocket2.binding(PHX_VIEWPORT_BOTTOM);
      let phxTriggerExternal = liveSocket2.binding(PHX_TRIGGER_ACTION);
      let added = [];
      let feedbackContainers = [];
      let updates = [];
      let appendPrependUpdates = [];
      let externalFormTriggered = null;
      function morph(targetContainer2, source) {
        morphdom_esm_default(targetContainer2, source, {
          childrenOnly: targetContainer2.getAttribute(PHX_COMPONENT) === null,
          getNodeKey: (node) => {
            if (dom_default.isPhxDestroyed(node)) {
              return null;
            }
            if (isJoinPatch) {
              return node.id;
            }
            return node.id || node.getAttribute && node.getAttribute(PHX_MAGIC_ID);
          },
          skipFromChildren: (from) => {
            return from.getAttribute(phxUpdate) === PHX_STREAM;
          },
          addChild: (parent, child) => {
            let { ref, streamAt } = this.getStreamInsert(child);
            if (ref === void 0) {
              return parent.appendChild(child);
            }
            this.setStreamRef(child, ref);
            if (streamAt === 0) {
              parent.insertAdjacentElement("afterbegin", child);
            } else if (streamAt === -1) {
              parent.appendChild(child);
            } else if (streamAt > 0) {
              let sibling = Array.from(parent.children)[streamAt];
              parent.insertBefore(child, sibling);
            }
          },
          onBeforeNodeAdded: (el) => {
            dom_default.maybeAddPrivateHooks(el, phxViewportTop, phxViewportBottom);
            this.trackBefore("added", el);
            let morphedEl = el;
            if (!isJoinPatch && this.streamComponentRestore[el.id]) {
              morphedEl = this.streamComponentRestore[el.id];
              delete this.streamComponentRestore[el.id];
              morph.bind(this)(morphedEl, el);
            }
            return morphedEl;
          },
          onNodeAdded: (el) => {
            if (el.getAttribute) {
              this.maybeReOrderStream(el, true);
            }
            if (dom_default.isFeedbackContainer(el, phxFeedbackFor))
              feedbackContainers.push(el);
            if (el instanceof HTMLImageElement && el.srcset) {
              el.srcset = el.srcset;
            } else if (el instanceof HTMLVideoElement && el.autoplay) {
              el.play();
            }
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            if (dom_default.isPhxChild(el) && view.ownsElement(el) || dom_default.isPhxSticky(el) && view.ownsElement(el.parentNode)) {
              this.trackAfter("phxChildAdded", el);
            }
            added.push(el);
          },
          onNodeDiscarded: (el) => this.onNodeDiscarded(el),
          onBeforeNodeDiscarded: (el) => {
            if (el.getAttribute && el.getAttribute(PHX_PRUNE) !== null) {
              return true;
            }
            if (el.parentElement !== null && el.id && dom_default.isPhxUpdate(el.parentElement, phxUpdate, [PHX_STREAM, "append", "prepend"])) {
              return false;
            }
            if (this.maybePendingRemove(el)) {
              return false;
            }
            if (this.skipCIDSibling(el)) {
              return false;
            }
            return true;
          },
          onElUpdated: (el) => {
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            updates.push(el);
            this.maybeReOrderStream(el, false);
          },
          onBeforeElUpdated: (fromEl, toEl) => {
            dom_default.maybeAddPrivateHooks(toEl, phxViewportTop, phxViewportBottom);
            if (dom_default.isFeedbackContainer(fromEl, phxFeedbackFor) || dom_default.isFeedbackContainer(toEl, phxFeedbackFor)) {
              feedbackContainers.push(fromEl);
              feedbackContainers.push(toEl);
            }
            dom_default.cleanChildNodes(toEl, phxUpdate);
            if (this.skipCIDSibling(toEl)) {
              this.maybeReOrderStream(fromEl);
              return false;
            }
            if (dom_default.isPhxSticky(fromEl)) {
              return false;
            }
            if (dom_default.isIgnored(fromEl, phxUpdate) || fromEl.form && fromEl.form.isSameNode(externalFormTriggered)) {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeAttrs(fromEl, toEl, { isIgnored: true });
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (fromEl.type === "number" && (fromEl.validity && fromEl.validity.badInput)) {
              return false;
            }
            if (!dom_default.syncPendingRef(fromEl, toEl, disableWith)) {
              if (dom_default.isUploadInput(fromEl)) {
                this.trackBefore("updated", fromEl, toEl);
                updates.push(fromEl);
              }
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (dom_default.isPhxChild(toEl)) {
              let prevSession = fromEl.getAttribute(PHX_SESSION);
              dom_default.mergeAttrs(fromEl, toEl, { exclude: [PHX_STATIC] });
              if (prevSession !== "") {
                fromEl.setAttribute(PHX_SESSION, prevSession);
              }
              fromEl.setAttribute(PHX_ROOT_ID, this.rootID);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            dom_default.copyPrivates(toEl, fromEl);
            let isFocusedFormEl = focused && fromEl.isSameNode(focused) && dom_default.isFormInput(fromEl);
            let focusedSelectChanged = isFocusedFormEl && this.isChangedSelect(fromEl, toEl);
            if (isFocusedFormEl && fromEl.type !== "hidden" && !focusedSelectChanged) {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeFocusedInput(fromEl, toEl);
              dom_default.syncAttrsToProps(fromEl);
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            } else {
              if (focusedSelectChanged) {
                fromEl.blur();
              }
              if (dom_default.isPhxUpdate(toEl, phxUpdate, ["append", "prepend"])) {
                appendPrependUpdates.push(new DOMPostMorphRestorer(fromEl, toEl, toEl.getAttribute(phxUpdate)));
              }
              dom_default.syncAttrsToProps(toEl);
              dom_default.applyStickyOperations(toEl);
              this.trackBefore("updated", fromEl, toEl);
              return true;
            }
          }
        });
      }
      this.trackBefore("added", container);
      this.trackBefore("updated", container, container);
      liveSocket2.time("morphdom", () => {
        this.streams.forEach(([ref, inserts, deleteIds, reset]) => {
          inserts.forEach(([key, streamAt, limit]) => {
            this.streamInserts[key] = { ref, streamAt, limit, reset };
          });
          if (reset !== void 0) {
            dom_default.all(container, `[${PHX_STREAM_REF}="${ref}"]`, (child) => {
              this.removeStreamChildElement(child);
            });
          }
          deleteIds.forEach((id) => {
            let child = container.querySelector(`[id="${id}"]`);
            if (child) {
              this.removeStreamChildElement(child);
            }
          });
        });
        if (isJoinPatch) {
          dom_default.all(this.container, `[${phxUpdate}=${PHX_STREAM}]`, (el) => {
            this.liveSocket.owner(el, (view2) => {
              if (view2 === this.view) {
                Array.from(el.children).forEach((child) => {
                  this.removeStreamChildElement(child);
                });
              }
            });
          });
        }
        morph.bind(this)(targetContainer, html2);
      });
      if (liveSocket2.isDebugEnabled()) {
        detectDuplicateIds();
      }
      if (appendPrependUpdates.length > 0) {
        liveSocket2.time("post-morph append/prepend restoration", () => {
          appendPrependUpdates.forEach((update) => update.perform());
        });
      }
      dom_default.maybeHideFeedback(targetContainer, feedbackContainers, phxFeedbackFor, phxFeedbackGroup);
      liveSocket2.silenceEvents(() => dom_default.restoreFocus(focused, selectionStart, selectionEnd));
      dom_default.dispatchEvent(document, "phx:update");
      added.forEach((el) => this.trackAfter("added", el));
      updates.forEach((el) => this.trackAfter("updated", el));
      this.transitionPendingRemoves();
      if (externalFormTriggered) {
        liveSocket2.unload();
        Object.getPrototypeOf(externalFormTriggered).submit.call(externalFormTriggered);
      }
      return true;
    }
    onNodeDiscarded(el) {
      if (dom_default.isPhxChild(el) || dom_default.isPhxSticky(el)) {
        this.liveSocket.destroyViewByEl(el);
      }
      this.trackAfter("discarded", el);
    }
    maybePendingRemove(node) {
      if (node.getAttribute && node.getAttribute(this.phxRemove) !== null) {
        this.pendingRemoves.push(node);
        return true;
      } else {
        return false;
      }
    }
    removeStreamChildElement(child) {
      if (this.streamInserts[child.id]) {
        this.streamComponentRestore[child.id] = child;
        child.remove();
      } else {
        if (!this.maybePendingRemove(child)) {
          child.remove();
          this.onNodeDiscarded(child);
        }
      }
    }
    getStreamInsert(el) {
      let insert = el.id ? this.streamInserts[el.id] : {};
      return insert || {};
    }
    setStreamRef(el, ref) {
      dom_default.putSticky(el, PHX_STREAM_REF, (el2) => el2.setAttribute(PHX_STREAM_REF, ref));
    }
    maybeReOrderStream(el, isNew) {
      let { ref, streamAt, reset } = this.getStreamInsert(el);
      if (streamAt === void 0) {
        return;
      }
      this.setStreamRef(el, ref);
      if (!reset && !isNew) {
        return;
      }
      if (!el.parentElement) {
        return;
      }
      if (streamAt === 0) {
        el.parentElement.insertBefore(el, el.parentElement.firstElementChild);
      } else if (streamAt > 0) {
        let children = Array.from(el.parentElement.children);
        let oldIndex = children.indexOf(el);
        if (streamAt >= children.length - 1) {
          el.parentElement.appendChild(el);
        } else {
          let sibling = children[streamAt];
          if (oldIndex > streamAt) {
            el.parentElement.insertBefore(el, sibling);
          } else {
            el.parentElement.insertBefore(el, sibling.nextElementSibling);
          }
        }
      }
      this.maybeLimitStream(el);
    }
    maybeLimitStream(el) {
      let { limit } = this.getStreamInsert(el);
      let children = limit !== null && Array.from(el.parentElement.children);
      if (limit && limit < 0 && children.length > limit * -1) {
        children.slice(0, children.length + limit).forEach((child) => this.removeStreamChildElement(child));
      } else if (limit && limit >= 0 && children.length > limit) {
        children.slice(limit).forEach((child) => this.removeStreamChildElement(child));
      }
    }
    transitionPendingRemoves() {
      let { pendingRemoves, liveSocket: liveSocket2 } = this;
      if (pendingRemoves.length > 0) {
        liveSocket2.transitionRemoves(pendingRemoves);
        liveSocket2.requestDOMUpdate(() => {
          pendingRemoves.forEach((el) => {
            let child = dom_default.firstPhxChild(el);
            if (child) {
              liveSocket2.destroyViewByEl(child);
            }
            el.remove();
          });
          this.trackAfter("transitionsDiscarded", pendingRemoves);
        });
      }
    }
    isChangedSelect(fromEl, toEl) {
      if (!(fromEl instanceof HTMLSelectElement) || fromEl.multiple) {
        return false;
      }
      if (fromEl.options.length !== toEl.options.length) {
        return true;
      }
      let fromSelected = fromEl.selectedOptions[0];
      let toSelected = toEl.selectedOptions[0];
      if (fromSelected && fromSelected.hasAttribute("selected")) {
        toSelected.setAttribute("selected", fromSelected.getAttribute("selected"));
      }
      return !fromEl.isEqualNode(toEl);
    }
    isCIDPatch() {
      return this.cidPatch;
    }
    skipCIDSibling(el) {
      return el.nodeType === Node.ELEMENT_NODE && el.hasAttribute(PHX_SKIP);
    }
    targetCIDContainer(html2) {
      if (!this.isCIDPatch()) {
        return;
      }
      let [first, ...rest] = dom_default.findComponentNodeList(this.container, this.targetCID);
      if (rest.length === 0 && dom_default.childNodeLength(html2) === 1) {
        return first;
      } else {
        return first && first.parentNode;
      }
    }
    indexOf(parent, child) {
      return Array.from(parent.children).indexOf(child);
    }
  };
  var VOID_TAGS = /* @__PURE__ */ new Set([
    "area",
    "base",
    "br",
    "col",
    "command",
    "embed",
    "hr",
    "img",
    "input",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ]);
  var quoteChars = /* @__PURE__ */ new Set(["'", '"']);
  var modifyRoot = (html2, attrs, clearInnerHTML) => {
    let i = 0;
    let insideComment = false;
    let beforeTag, afterTag, tag, tagNameEndsAt, id, newHTML;
    let lookahead = html2.match(/^(\s*(?:<!--.*?-->\s*)*)<([^\s\/>]+)/);
    if (lookahead === null) {
      throw new Error(`malformed html ${html2}`);
    }
    i = lookahead[0].length;
    beforeTag = lookahead[1];
    tag = lookahead[2];
    tagNameEndsAt = i;
    for (i; i < html2.length; i++) {
      if (html2.charAt(i) === ">") {
        break;
      }
      if (html2.charAt(i) === "=") {
        let isId = html2.slice(i - 3, i) === " id";
        i++;
        let char = html2.charAt(i);
        if (quoteChars.has(char)) {
          let attrStartsAt = i;
          i++;
          for (i; i < html2.length; i++) {
            if (html2.charAt(i) === char) {
              break;
            }
          }
          if (isId) {
            id = html2.slice(attrStartsAt + 1, i);
            break;
          }
        }
      }
    }
    let closeAt = html2.length - 1;
    insideComment = false;
    while (closeAt >= beforeTag.length + tag.length) {
      let char = html2.charAt(closeAt);
      if (insideComment) {
        if (char === "-" && html2.slice(closeAt - 3, closeAt) === "<!-") {
          insideComment = false;
          closeAt -= 4;
        } else {
          closeAt -= 1;
        }
      } else if (char === ">" && html2.slice(closeAt - 2, closeAt) === "--") {
        insideComment = true;
        closeAt -= 3;
      } else if (char === ">") {
        break;
      } else {
        closeAt -= 1;
      }
    }
    afterTag = html2.slice(closeAt + 1, html2.length);
    let attrsStr = Object.keys(attrs).map((attr) => attrs[attr] === true ? attr : `${attr}="${attrs[attr]}"`).join(" ");
    if (clearInnerHTML) {
      let idAttrStr = id ? ` id="${id}"` : "";
      if (VOID_TAGS.has(tag)) {
        newHTML = `<${tag}${idAttrStr}${attrsStr === "" ? "" : " "}${attrsStr}/>`;
      } else {
        newHTML = `<${tag}${idAttrStr}${attrsStr === "" ? "" : " "}${attrsStr}></${tag}>`;
      }
    } else {
      let rest = html2.slice(tagNameEndsAt, closeAt + 1);
      newHTML = `<${tag}${attrsStr === "" ? "" : " "}${attrsStr}${rest}`;
    }
    return [newHTML, beforeTag, afterTag];
  };
  var Rendered = class {
    static extract(diff) {
      let { [REPLY]: reply, [EVENTS]: events, [TITLE]: title } = diff;
      delete diff[REPLY];
      delete diff[EVENTS];
      delete diff[TITLE];
      return { diff, title, reply: reply || null, events: events || [] };
    }
    constructor(viewId, rendered) {
      this.viewId = viewId;
      this.rendered = {};
      this.magicId = 0;
      this.mergeDiff(rendered);
    }
    parentViewId() {
      return this.viewId;
    }
    toString(onlyCids) {
      let [str, streams] = this.recursiveToString(this.rendered, this.rendered[COMPONENTS], onlyCids, true, {});
      return [str, streams];
    }
    recursiveToString(rendered, components = rendered[COMPONENTS], onlyCids, changeTracking, rootAttrs) {
      onlyCids = onlyCids ? new Set(onlyCids) : null;
      let output = { buffer: "", components, onlyCids, streams: /* @__PURE__ */ new Set() };
      this.toOutputBuffer(rendered, null, output, changeTracking, rootAttrs);
      return [output.buffer, output.streams];
    }
    componentCIDs(diff) {
      return Object.keys(diff[COMPONENTS] || {}).map((i) => parseInt(i));
    }
    isComponentOnlyDiff(diff) {
      if (!diff[COMPONENTS]) {
        return false;
      }
      return Object.keys(diff).length === 1;
    }
    getComponent(diff, cid) {
      return diff[COMPONENTS][cid];
    }
    resetRender(cid) {
      if (this.rendered[COMPONENTS][cid]) {
        this.rendered[COMPONENTS][cid].reset = true;
      }
    }
    mergeDiff(diff) {
      let newc = diff[COMPONENTS];
      let cache = {};
      delete diff[COMPONENTS];
      this.rendered = this.mutableMerge(this.rendered, diff);
      this.rendered[COMPONENTS] = this.rendered[COMPONENTS] || {};
      if (newc) {
        let oldc = this.rendered[COMPONENTS];
        for (let cid in newc) {
          newc[cid] = this.cachedFindComponent(cid, newc[cid], oldc, newc, cache);
        }
        for (let cid in newc) {
          oldc[cid] = newc[cid];
        }
        diff[COMPONENTS] = newc;
      }
    }
    cachedFindComponent(cid, cdiff, oldc, newc, cache) {
      if (cache[cid]) {
        return cache[cid];
      } else {
        let ndiff, stat, scid = cdiff[STATIC];
        if (isCid(scid)) {
          let tdiff;
          if (scid > 0) {
            tdiff = this.cachedFindComponent(scid, newc[scid], oldc, newc, cache);
          } else {
            tdiff = oldc[-scid];
          }
          stat = tdiff[STATIC];
          ndiff = this.cloneMerge(tdiff, cdiff, true);
          ndiff[STATIC] = stat;
        } else {
          ndiff = cdiff[STATIC] !== void 0 || oldc[cid] === void 0 ? cdiff : this.cloneMerge(oldc[cid], cdiff, false);
        }
        cache[cid] = ndiff;
        return ndiff;
      }
    }
    mutableMerge(target, source) {
      if (source[STATIC] !== void 0) {
        return source;
      } else {
        this.doMutableMerge(target, source);
        return target;
      }
    }
    doMutableMerge(target, source) {
      for (let key in source) {
        let val = source[key];
        let targetVal = target[key];
        let isObjVal = isObject(val);
        if (isObjVal && val[STATIC] === void 0 && isObject(targetVal)) {
          this.doMutableMerge(targetVal, val);
        } else {
          target[key] = val;
        }
      }
      if (target[ROOT]) {
        target.newRender = true;
      }
    }
    cloneMerge(target, source, pruneMagicId) {
      let merged = __spreadValues(__spreadValues({}, target), source);
      for (let key in merged) {
        let val = source[key];
        let targetVal = target[key];
        if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {
          merged[key] = this.cloneMerge(targetVal, val, pruneMagicId);
        } else if (val === void 0 && isObject(targetVal)) {
          merged[key] = this.cloneMerge(targetVal, {}, pruneMagicId);
        }
      }
      if (pruneMagicId) {
        delete merged.magicId;
        delete merged.newRender;
      } else if (target[ROOT]) {
        merged.newRender = true;
      }
      return merged;
    }
    componentToString(cid) {
      let [str, streams] = this.recursiveCIDToString(this.rendered[COMPONENTS], cid, null);
      let [strippedHTML, _before, _after] = modifyRoot(str, {});
      return [strippedHTML, streams];
    }
    pruneCIDs(cids) {
      cids.forEach((cid) => delete this.rendered[COMPONENTS][cid]);
    }
    get() {
      return this.rendered;
    }
    isNewFingerprint(diff = {}) {
      return !!diff[STATIC];
    }
    templateStatic(part, templates) {
      if (typeof part === "number") {
        return templates[part];
      } else {
        return part;
      }
    }
    nextMagicID() {
      this.magicId++;
      return `m${this.magicId}-${this.parentViewId()}`;
    }
    toOutputBuffer(rendered, templates, output, changeTracking, rootAttrs = {}) {
      if (rendered[DYNAMICS]) {
        return this.comprehensionToBuffer(rendered, templates, output);
      }
      let { [STATIC]: statics } = rendered;
      statics = this.templateStatic(statics, templates);
      let isRoot = rendered[ROOT];
      let prevBuffer = output.buffer;
      if (isRoot) {
        output.buffer = "";
      }
      if (changeTracking && isRoot && !rendered.magicId) {
        rendered.newRender = true;
        rendered.magicId = this.nextMagicID();
      }
      output.buffer += statics[0];
      for (let i = 1; i < statics.length; i++) {
        this.dynamicToBuffer(rendered[i - 1], templates, output, changeTracking);
        output.buffer += statics[i];
      }
      if (isRoot) {
        let skip = false;
        let attrs;
        if (changeTracking || rendered.magicId) {
          skip = changeTracking && !rendered.newRender;
          attrs = __spreadValues({ [PHX_MAGIC_ID]: rendered.magicId }, rootAttrs);
        } else {
          attrs = rootAttrs;
        }
        if (skip) {
          attrs[PHX_SKIP] = true;
        }
        let [newRoot, commentBefore, commentAfter] = modifyRoot(output.buffer, attrs, skip);
        rendered.newRender = false;
        output.buffer = prevBuffer + commentBefore + newRoot + commentAfter;
      }
    }
    comprehensionToBuffer(rendered, templates, output) {
      let { [DYNAMICS]: dynamics, [STATIC]: statics, [STREAM]: stream } = rendered;
      let [_ref, _inserts, deleteIds, reset] = stream || [null, {}, [], null];
      statics = this.templateStatic(statics, templates);
      let compTemplates = templates || rendered[TEMPLATES];
      for (let d = 0; d < dynamics.length; d++) {
        let dynamic = dynamics[d];
        output.buffer += statics[0];
        for (let i = 1; i < statics.length; i++) {
          let changeTracking = false;
          this.dynamicToBuffer(dynamic[i - 1], compTemplates, output, changeTracking);
          output.buffer += statics[i];
        }
      }
      if (stream !== void 0 && (rendered[DYNAMICS].length > 0 || deleteIds.length > 0 || reset)) {
        delete rendered[STREAM];
        rendered[DYNAMICS] = [];
        output.streams.add(stream);
      }
    }
    dynamicToBuffer(rendered, templates, output, changeTracking) {
      if (typeof rendered === "number") {
        let [str, streams] = this.recursiveCIDToString(output.components, rendered, output.onlyCids);
        output.buffer += str;
        output.streams = /* @__PURE__ */ new Set([...output.streams, ...streams]);
      } else if (isObject(rendered)) {
        this.toOutputBuffer(rendered, templates, output, changeTracking, {});
      } else {
        output.buffer += rendered;
      }
    }
    recursiveCIDToString(components, cid, onlyCids) {
      let component = components[cid] || logError(`no component for CID ${cid}`, components);
      let attrs = { [PHX_COMPONENT]: cid };
      let skip = onlyCids && !onlyCids.has(cid);
      component.newRender = !skip;
      component.magicId = `c${cid}-${this.parentViewId()}`;
      let changeTracking = !component.reset;
      let [html2, streams] = this.recursiveToString(component, components, onlyCids, changeTracking, attrs);
      delete component.reset;
      return [html2, streams];
    }
  };
  var viewHookID = 1;
  var ViewHook = class {
    static makeID() {
      return viewHookID++;
    }
    static elementID(el) {
      return el.phxHookId;
    }
    constructor(view, el, callbacks) {
      this.__view = view;
      this.liveSocket = view.liveSocket;
      this.__callbacks = callbacks;
      this.__listeners = /* @__PURE__ */ new Set();
      this.__isDisconnected = false;
      this.el = el;
      this.el.phxHookId = this.constructor.makeID();
      for (let key in this.__callbacks) {
        this[key] = this.__callbacks[key];
      }
    }
    __mounted() {
      this.mounted && this.mounted();
    }
    __updated() {
      this.updated && this.updated();
    }
    __beforeUpdate() {
      this.beforeUpdate && this.beforeUpdate();
    }
    __destroyed() {
      this.destroyed && this.destroyed();
    }
    __reconnected() {
      if (this.__isDisconnected) {
        this.__isDisconnected = false;
        this.reconnected && this.reconnected();
      }
    }
    __disconnected() {
      this.__isDisconnected = true;
      this.disconnected && this.disconnected();
    }
    pushEvent(event, payload = {}, onReply = function() {
    }) {
      return this.__view.pushHookEvent(this.el, null, event, payload, onReply);
    }
    pushEventTo(phxTarget, event, payload = {}, onReply = function() {
    }) {
      return this.__view.withinTargets(phxTarget, (view, targetCtx) => {
        return view.pushHookEvent(this.el, targetCtx, event, payload, onReply);
      });
    }
    handleEvent(event, callback) {
      let callbackRef = (customEvent, bypass) => bypass ? event : callback(customEvent.detail);
      window.addEventListener(`phx:${event}`, callbackRef);
      this.__listeners.add(callbackRef);
      return callbackRef;
    }
    removeHandleEvent(callbackRef) {
      let event = callbackRef(null, true);
      window.removeEventListener(`phx:${event}`, callbackRef);
      this.__listeners.delete(callbackRef);
    }
    upload(name, files) {
      return this.__view.dispatchUploads(null, name, files);
    }
    uploadTo(phxTarget, name, files) {
      return this.__view.withinTargets(phxTarget, (view, targetCtx) => {
        view.dispatchUploads(targetCtx, name, files);
      });
    }
    __cleanup__() {
      this.__listeners.forEach((callbackRef) => this.removeHandleEvent(callbackRef));
    }
  };
  var serializeForm = (form, metadata, onlyNames = []) => {
    const _a = metadata, { submitter } = _a, meta = __objRest(_a, ["submitter"]);
    let injectedElement;
    if (submitter && submitter.name) {
      const input = document.createElement("input");
      input.type = "hidden";
      const formId = submitter.getAttribute("form");
      if (formId) {
        input.setAttribute("form", formId);
      }
      input.name = submitter.name;
      input.value = submitter.value;
      submitter.parentElement.insertBefore(input, submitter);
      injectedElement = input;
    }
    const formData = new FormData(form);
    const toRemove = [];
    formData.forEach((val, key, _index) => {
      if (val instanceof File) {
        toRemove.push(key);
      }
    });
    toRemove.forEach((key) => formData.delete(key));
    const params = new URLSearchParams();
    for (let [key, val] of formData.entries()) {
      if (onlyNames.length === 0 || onlyNames.indexOf(key) >= 0) {
        params.append(key, val);
      }
    }
    if (submitter && injectedElement) {
      submitter.parentElement.removeChild(injectedElement);
    }
    for (let metaKey in meta) {
      params.append(metaKey, meta[metaKey]);
    }
    return params.toString();
  };
  var View = class {
    constructor(el, liveSocket2, parentView, flash, liveReferer) {
      this.isDead = false;
      this.liveSocket = liveSocket2;
      this.flash = flash;
      this.parent = parentView;
      this.root = parentView ? parentView.root : this;
      this.el = el;
      this.id = this.el.id;
      this.ref = 0;
      this.childJoins = 0;
      this.loaderTimer = null;
      this.pendingDiffs = [];
      this.pendingForms = /* @__PURE__ */ new Set();
      this.redirect = false;
      this.href = null;
      this.joinCount = this.parent ? this.parent.joinCount - 1 : 0;
      this.joinPending = true;
      this.destroyed = false;
      this.joinCallback = function(onDone) {
        onDone && onDone();
      };
      this.stopCallback = function() {
      };
      this.pendingJoinOps = this.parent ? null : [];
      this.viewHooks = {};
      this.formSubmits = [];
      this.children = this.parent ? null : {};
      this.root.children[this.id] = {};
      this.channel = this.liveSocket.channel(`lv:${this.id}`, () => {
        let url = this.href && this.expandURL(this.href);
        return {
          redirect: this.redirect ? url : void 0,
          url: this.redirect ? void 0 : url || void 0,
          params: this.connectParams(liveReferer),
          session: this.getSession(),
          static: this.getStatic(),
          flash: this.flash
        };
      });
    }
    setHref(href) {
      this.href = href;
    }
    setRedirect(href) {
      this.redirect = true;
      this.href = href;
    }
    isMain() {
      return this.el.hasAttribute(PHX_MAIN);
    }
    connectParams(liveReferer) {
      let params = this.liveSocket.params(this.el);
      let manifest = dom_default.all(document, `[${this.binding(PHX_TRACK_STATIC)}]`).map((node) => node.src || node.href).filter((url) => typeof url === "string");
      if (manifest.length > 0) {
        params["_track_static"] = manifest;
      }
      params["_mounts"] = this.joinCount;
      params["_live_referer"] = liveReferer;
      return params;
    }
    isConnected() {
      return this.channel.canPush();
    }
    getSession() {
      return this.el.getAttribute(PHX_SESSION);
    }
    getStatic() {
      let val = this.el.getAttribute(PHX_STATIC);
      return val === "" ? null : val;
    }
    destroy(callback = function() {
    }) {
      this.destroyAllChildren();
      this.destroyed = true;
      delete this.root.children[this.id];
      if (this.parent) {
        delete this.root.children[this.parent.id][this.id];
      }
      clearTimeout(this.loaderTimer);
      let onFinished = () => {
        callback();
        for (let id in this.viewHooks) {
          this.destroyHook(this.viewHooks[id]);
        }
      };
      dom_default.markPhxChildDestroyed(this.el);
      this.log("destroyed", () => ["the child has been removed from the parent"]);
      this.channel.leave().receive("ok", onFinished).receive("error", onFinished).receive("timeout", onFinished);
    }
    setContainerClasses(...classes) {
      this.el.classList.remove(PHX_CONNECTED_CLASS, PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_CLIENT_ERROR_CLASS, PHX_SERVER_ERROR_CLASS);
      this.el.classList.add(...classes);
    }
    showLoader(timeout) {
      clearTimeout(this.loaderTimer);
      if (timeout) {
        this.loaderTimer = setTimeout(() => this.showLoader(), timeout);
      } else {
        for (let id in this.viewHooks) {
          this.viewHooks[id].__disconnected();
        }
        this.setContainerClasses(PHX_LOADING_CLASS);
      }
    }
    execAll(binding) {
      dom_default.all(this.el, `[${binding}]`, (el) => this.liveSocket.execJS(el, el.getAttribute(binding)));
    }
    hideLoader() {
      clearTimeout(this.loaderTimer);
      this.setContainerClasses(PHX_CONNECTED_CLASS);
      this.execAll(this.binding("connected"));
    }
    triggerReconnected() {
      for (let id in this.viewHooks) {
        this.viewHooks[id].__reconnected();
      }
    }
    log(kind, msgCallback) {
      this.liveSocket.log(this, kind, msgCallback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.liveSocket.transition(time, onStart, onDone);
    }
    withinTargets(phxTarget, callback) {
      if (phxTarget instanceof HTMLElement || phxTarget instanceof SVGElement) {
        return this.liveSocket.owner(phxTarget, (view) => callback(view, phxTarget));
      }
      if (isCid(phxTarget)) {
        let targets = dom_default.findComponentNodeList(this.el, phxTarget);
        if (targets.length === 0) {
          logError(`no component found matching phx-target of ${phxTarget}`);
        } else {
          callback(this, parseInt(phxTarget));
        }
      } else {
        let targets = Array.from(document.querySelectorAll(phxTarget));
        if (targets.length === 0) {
          logError(`nothing found matching the phx-target selector "${phxTarget}"`);
        }
        targets.forEach((target) => this.liveSocket.owner(target, (view) => callback(view, target)));
      }
    }
    applyDiff(type, rawDiff, callback) {
      this.log(type, () => ["", clone(rawDiff)]);
      let { diff, reply, events, title } = Rendered.extract(rawDiff);
      callback({ diff, reply, events });
      if (title) {
        window.requestAnimationFrame(() => dom_default.putTitle(title));
      }
    }
    onJoin(resp) {
      let { rendered, container } = resp;
      if (container) {
        let [tag, attrs] = container;
        this.el = dom_default.replaceRootContainer(this.el, tag, attrs);
      }
      this.childJoins = 0;
      this.joinPending = true;
      this.flash = null;
      browser_default.dropLocal(this.liveSocket.localStorage, window.location.pathname, CONSECUTIVE_RELOADS);
      this.applyDiff("mount", rendered, ({ diff, events }) => {
        this.rendered = new Rendered(this.id, diff);
        let [html2, streams] = this.renderContainer(null, "join");
        this.dropPendingRefs();
        let forms = this.formsForRecovery(html2).filter(([form, newForm, newCid]) => {
          return !this.pendingForms.has(form.id);
        });
        this.joinCount++;
        if (forms.length > 0) {
          forms.forEach(([form, newForm, newCid], i) => {
            this.pendingForms.add(form.id);
            this.pushFormRecovery(form, newCid, (resp2) => {
              this.pendingForms.delete(form.id);
              if (i === forms.length - 1) {
                this.onJoinComplete(resp2, html2, streams, events);
              }
            });
          });
        } else {
          this.onJoinComplete(resp, html2, streams, events);
        }
      });
    }
    dropPendingRefs() {
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}]`, (el) => {
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
      });
    }
    onJoinComplete({ live_patch }, html2, streams, events) {
      this.pendingForms.clear();
      if (this.joinCount > 1 || this.parent && !this.parent.isJoinPending()) {
        return this.applyJoinPatch(live_patch, html2, streams, events);
      }
      let newChildren = dom_default.findPhxChildrenInFragment(html2, this.id).filter((toEl) => {
        let fromEl = toEl.id && this.el.querySelector(`[id="${toEl.id}"]`);
        let phxStatic = fromEl && fromEl.getAttribute(PHX_STATIC);
        if (phxStatic) {
          toEl.setAttribute(PHX_STATIC, phxStatic);
        }
        if (fromEl) {
          fromEl.setAttribute(PHX_ROOT_ID, this.root.id);
        }
        return this.joinChild(toEl);
      });
      if (newChildren.length === 0) {
        if (this.parent) {
          this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html2, streams, events)]);
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
          this.applyJoinPatch(live_patch, html2, streams, events);
        }
      } else {
        this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html2, streams, events)]);
      }
    }
    attachTrueDocEl() {
      this.el = dom_default.byId(this.id);
      this.el.setAttribute(PHX_ROOT_ID, this.root.id);
    }
    execNewMounted() {
      let phxViewportTop = this.binding(PHX_VIEWPORT_TOP);
      let phxViewportBottom = this.binding(PHX_VIEWPORT_BOTTOM);
      dom_default.all(this.el, `[${phxViewportTop}], [${phxViewportBottom}]`, (hookEl) => {
        dom_default.maybeAddPrivateHooks(hookEl, phxViewportTop, phxViewportBottom);
        this.maybeAddNewHook(hookEl);
      });
      dom_default.all(this.el, `[${this.binding(PHX_HOOK)}], [data-phx-${PHX_HOOK}]`, (hookEl) => {
        this.maybeAddNewHook(hookEl);
      });
      dom_default.all(this.el, `[${this.binding(PHX_MOUNTED)}]`, (el) => this.maybeMounted(el));
    }
    applyJoinPatch(live_patch, html2, streams, events) {
      this.attachTrueDocEl();
      let patch = new DOMPatch(this, this.el, this.id, html2, streams, null);
      patch.markPrunableContentForRemoval();
      this.performPatch(patch, false, true);
      this.joinNewChildren();
      this.execNewMounted();
      this.joinPending = false;
      this.liveSocket.dispatchEvents(events);
      this.applyPendingUpdates();
      if (live_patch) {
        let { kind, to } = live_patch;
        this.liveSocket.historyPatch(to, kind);
      }
      this.hideLoader();
      if (this.joinCount > 1) {
        this.triggerReconnected();
      }
      this.stopCallback();
    }
    triggerBeforeUpdateHook(fromEl, toEl) {
      this.liveSocket.triggerDOM("onBeforeElUpdated", [fromEl, toEl]);
      let hook = this.getHook(fromEl);
      let isIgnored = hook && dom_default.isIgnored(fromEl, this.binding(PHX_UPDATE));
      if (hook && !fromEl.isEqualNode(toEl) && !(isIgnored && isEqualObj(fromEl.dataset, toEl.dataset))) {
        hook.__beforeUpdate();
        return hook;
      }
    }
    maybeMounted(el) {
      let phxMounted = el.getAttribute(this.binding(PHX_MOUNTED));
      let hasBeenInvoked = phxMounted && dom_default.private(el, "mounted");
      if (phxMounted && !hasBeenInvoked) {
        this.liveSocket.execJS(el, phxMounted);
        dom_default.putPrivate(el, "mounted", true);
      }
    }
    maybeAddNewHook(el, force) {
      let newHook = this.addHook(el);
      if (newHook) {
        newHook.__mounted();
      }
    }
    performPatch(patch, pruneCids, isJoinPatch = false) {
      let removedEls = [];
      let phxChildrenAdded = false;
      let updatedHookIds = /* @__PURE__ */ new Set();
      patch.after("added", (el) => {
        this.liveSocket.triggerDOM("onNodeAdded", [el]);
        let phxViewportTop = this.binding(PHX_VIEWPORT_TOP);
        let phxViewportBottom = this.binding(PHX_VIEWPORT_BOTTOM);
        dom_default.maybeAddPrivateHooks(el, phxViewportTop, phxViewportBottom);
        this.maybeAddNewHook(el);
        if (el.getAttribute) {
          this.maybeMounted(el);
        }
      });
      patch.after("phxChildAdded", (el) => {
        if (dom_default.isPhxSticky(el)) {
          this.liveSocket.joinRootViews();
        } else {
          phxChildrenAdded = true;
        }
      });
      patch.before("updated", (fromEl, toEl) => {
        let hook = this.triggerBeforeUpdateHook(fromEl, toEl);
        if (hook) {
          updatedHookIds.add(fromEl.id);
        }
      });
      patch.after("updated", (el) => {
        if (updatedHookIds.has(el.id)) {
          this.getHook(el).__updated();
        }
      });
      patch.after("discarded", (el) => {
        if (el.nodeType === Node.ELEMENT_NODE) {
          removedEls.push(el);
        }
      });
      patch.after("transitionsDiscarded", (els) => this.afterElementsRemoved(els, pruneCids));
      patch.perform(isJoinPatch);
      this.afterElementsRemoved(removedEls, pruneCids);
      return phxChildrenAdded;
    }
    afterElementsRemoved(elements, pruneCids) {
      let destroyedCIDs = [];
      elements.forEach((parent) => {
        let components = dom_default.all(parent, `[${PHX_COMPONENT}]`);
        let hooks = dom_default.all(parent, `[${this.binding(PHX_HOOK)}]`);
        components.concat(parent).forEach((el) => {
          let cid = this.componentID(el);
          if (isCid(cid) && destroyedCIDs.indexOf(cid) === -1) {
            destroyedCIDs.push(cid);
          }
        });
        hooks.concat(parent).forEach((hookEl) => {
          let hook = this.getHook(hookEl);
          hook && this.destroyHook(hook);
        });
      });
      if (pruneCids) {
        this.maybePushComponentsDestroyed(destroyedCIDs);
      }
    }
    joinNewChildren() {
      dom_default.findPhxChildren(this.el, this.id).forEach((el) => this.joinChild(el));
    }
    getChildById(id) {
      return this.root.children[this.id][id];
    }
    getDescendentByEl(el) {
      if (el.id === this.id) {
        return this;
      } else {
        return this.children[el.getAttribute(PHX_PARENT_ID)][el.id];
      }
    }
    destroyDescendent(id) {
      for (let parentId in this.root.children) {
        for (let childId in this.root.children[parentId]) {
          if (childId === id) {
            return this.root.children[parentId][childId].destroy();
          }
        }
      }
    }
    joinChild(el) {
      let child = this.getChildById(el.id);
      if (!child) {
        let view = new View(el, this.liveSocket, this);
        this.root.children[this.id][view.id] = view;
        view.join();
        this.childJoins++;
        return true;
      }
    }
    isJoinPending() {
      return this.joinPending;
    }
    ackJoin(_child) {
      this.childJoins--;
      if (this.childJoins === 0) {
        if (this.parent) {
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
        }
      }
    }
    onAllChildJoinsComplete() {
      this.joinCallback(() => {
        this.pendingJoinOps.forEach(([view, op]) => {
          if (!view.isDestroyed()) {
            op();
          }
        });
        this.pendingJoinOps = [];
      });
    }
    update(diff, events) {
      if (this.isJoinPending() || this.liveSocket.hasPendingLink() && this.root.isMain()) {
        return this.pendingDiffs.push({ diff, events });
      }
      this.rendered.mergeDiff(diff);
      let phxChildrenAdded = false;
      if (this.rendered.isComponentOnlyDiff(diff)) {
        this.liveSocket.time("component patch complete", () => {
          let parentCids = dom_default.findExistingParentCIDs(this.el, this.rendered.componentCIDs(diff));
          parentCids.forEach((parentCID) => {
            if (this.componentPatch(this.rendered.getComponent(diff, parentCID), parentCID)) {
              phxChildrenAdded = true;
            }
          });
        });
      } else if (!isEmpty(diff)) {
        this.liveSocket.time("full patch complete", () => {
          let [html2, streams] = this.renderContainer(diff, "update");
          let patch = new DOMPatch(this, this.el, this.id, html2, streams, null);
          phxChildrenAdded = this.performPatch(patch, true);
        });
      }
      this.liveSocket.dispatchEvents(events);
      if (phxChildrenAdded) {
        this.joinNewChildren();
      }
    }
    renderContainer(diff, kind) {
      return this.liveSocket.time(`toString diff (${kind})`, () => {
        let tag = this.el.tagName;
        let cids = diff ? this.rendered.componentCIDs(diff) : null;
        let [html2, streams] = this.rendered.toString(cids);
        return [`<${tag}>${html2}</${tag}>`, streams];
      });
    }
    componentPatch(diff, cid) {
      if (isEmpty(diff))
        return false;
      let [html2, streams] = this.rendered.componentToString(cid);
      let patch = new DOMPatch(this, this.el, this.id, html2, streams, cid);
      let childrenAdded = this.performPatch(patch, true);
      return childrenAdded;
    }
    getHook(el) {
      return this.viewHooks[ViewHook.elementID(el)];
    }
    addHook(el) {
      if (ViewHook.elementID(el) || !el.getAttribute) {
        return;
      }
      let hookName = el.getAttribute(`data-phx-${PHX_HOOK}`) || el.getAttribute(this.binding(PHX_HOOK));
      if (hookName && !this.ownsElement(el)) {
        return;
      }
      let callbacks = this.liveSocket.getHookCallbacks(hookName);
      if (callbacks) {
        if (!el.id) {
          logError(`no DOM ID for hook "${hookName}". Hooks require a unique ID on each element.`, el);
        }
        let hook = new ViewHook(this, el, callbacks);
        this.viewHooks[ViewHook.elementID(hook.el)] = hook;
        return hook;
      } else if (hookName !== null) {
        logError(`unknown hook found for "${hookName}"`, el);
      }
    }
    destroyHook(hook) {
      hook.__destroyed();
      hook.__cleanup__();
      delete this.viewHooks[ViewHook.elementID(hook.el)];
    }
    applyPendingUpdates() {
      this.pendingDiffs.forEach(({ diff, events }) => this.update(diff, events));
      this.pendingDiffs = [];
      this.eachChild((child) => child.applyPendingUpdates());
    }
    eachChild(callback) {
      let children = this.root.children[this.id] || {};
      for (let id in children) {
        callback(this.getChildById(id));
      }
    }
    onChannel(event, cb) {
      this.liveSocket.onChannel(this.channel, event, (resp) => {
        if (this.isJoinPending()) {
          this.root.pendingJoinOps.push([this, () => cb(resp)]);
        } else {
          this.liveSocket.requestDOMUpdate(() => cb(resp));
        }
      });
    }
    bindChannel() {
      this.liveSocket.onChannel(this.channel, "diff", (rawDiff) => {
        this.liveSocket.requestDOMUpdate(() => {
          this.applyDiff("update", rawDiff, ({ diff, events }) => this.update(diff, events));
        });
      });
      this.onChannel("redirect", ({ to, flash }) => this.onRedirect({ to, flash }));
      this.onChannel("live_patch", (redir) => this.onLivePatch(redir));
      this.onChannel("live_redirect", (redir) => this.onLiveRedirect(redir));
      this.channel.onError((reason) => this.onError(reason));
      this.channel.onClose((reason) => this.onClose(reason));
    }
    destroyAllChildren() {
      this.eachChild((child) => child.destroy());
    }
    onLiveRedirect(redir) {
      let { to, kind, flash } = redir;
      let url = this.expandURL(to);
      this.liveSocket.historyRedirect(url, kind, flash);
    }
    onLivePatch(redir) {
      let { to, kind } = redir;
      this.href = this.expandURL(to);
      this.liveSocket.historyPatch(to, kind);
    }
    expandURL(to) {
      return to.startsWith("/") ? `${window.location.protocol}//${window.location.host}${to}` : to;
    }
    onRedirect({ to, flash }) {
      this.liveSocket.redirect(to, flash);
    }
    isDestroyed() {
      return this.destroyed;
    }
    joinDead() {
      this.isDead = true;
    }
    join(callback) {
      this.showLoader(this.liveSocket.loaderTimeout);
      this.bindChannel();
      if (this.isMain()) {
        this.stopCallback = this.liveSocket.withPageLoading({ to: this.href, kind: "initial" });
      }
      this.joinCallback = (onDone) => {
        onDone = onDone || function() {
        };
        callback ? callback(this.joinCount, onDone) : onDone();
      };
      this.liveSocket.wrapPush(this, { timeout: false }, () => {
        return this.channel.join().receive("ok", (data) => {
          if (!this.isDestroyed()) {
            this.liveSocket.requestDOMUpdate(() => this.onJoin(data));
          }
        }).receive("error", (resp) => !this.isDestroyed() && this.onJoinError(resp)).receive("timeout", () => !this.isDestroyed() && this.onJoinError({ reason: "timeout" }));
      });
    }
    onJoinError(resp) {
      if (resp.reason === "reload") {
        this.log("error", () => [`failed mount with ${resp.status}. Falling back to page request`, resp]);
        if (this.isMain()) {
          this.onRedirect({ to: this.href });
        }
        return;
      } else if (resp.reason === "unauthorized" || resp.reason === "stale") {
        this.log("error", () => ["unauthorized live_redirect. Falling back to page request", resp]);
        if (this.isMain()) {
          this.onRedirect({ to: this.href });
        }
        return;
      }
      if (resp.redirect || resp.live_redirect) {
        this.joinPending = false;
        this.channel.leave();
      }
      if (resp.redirect) {
        return this.onRedirect(resp.redirect);
      }
      if (resp.live_redirect) {
        return this.onLiveRedirect(resp.live_redirect);
      }
      this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_SERVER_ERROR_CLASS]);
      this.log("error", () => ["unable to join", resp]);
      if (this.liveSocket.isConnected()) {
        this.liveSocket.reloadWithJitter(this);
      }
    }
    onClose(reason) {
      if (this.isDestroyed()) {
        return;
      }
      if (this.liveSocket.hasPendingLink() && reason !== "leave") {
        return this.liveSocket.reloadWithJitter(this);
      }
      this.destroyAllChildren();
      this.liveSocket.dropActiveElement(this);
      if (document.activeElement) {
        document.activeElement.blur();
      }
      if (this.liveSocket.isUnloaded()) {
        this.showLoader(BEFORE_UNLOAD_LOADER_TIMEOUT);
      }
    }
    onError(reason) {
      this.onClose(reason);
      if (this.liveSocket.isConnected()) {
        this.log("error", () => ["view crashed", reason]);
      }
      if (!this.liveSocket.isUnloaded()) {
        if (this.liveSocket.isConnected()) {
          this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_SERVER_ERROR_CLASS]);
        } else {
          this.displayError([PHX_LOADING_CLASS, PHX_ERROR_CLASS, PHX_CLIENT_ERROR_CLASS]);
        }
      }
    }
    displayError(classes) {
      if (this.isMain()) {
        dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: { to: this.href, kind: "error" } });
      }
      this.showLoader();
      this.setContainerClasses(...classes);
      this.execAll(this.binding("disconnected"));
    }
    pushWithReply(refGenerator, event, payload, onReply = function() {
    }) {
      if (!this.isConnected()) {
        return;
      }
      let [ref, [el], opts] = refGenerator ? refGenerator() : [null, [], {}];
      let onLoadingDone = function() {
      };
      if (opts.page_loading || el && el.getAttribute(this.binding(PHX_PAGE_LOADING)) !== null) {
        onLoadingDone = this.liveSocket.withPageLoading({ kind: "element", target: el });
      }
      if (typeof payload.cid !== "number") {
        delete payload.cid;
      }
      return this.liveSocket.wrapPush(this, { timeout: true }, () => {
        return this.channel.push(event, payload, PUSH_TIMEOUT).receive("ok", (resp) => {
          let finish = (hookReply) => {
            if (resp.redirect) {
              this.onRedirect(resp.redirect);
            }
            if (resp.live_patch) {
              this.onLivePatch(resp.live_patch);
            }
            if (resp.live_redirect) {
              this.onLiveRedirect(resp.live_redirect);
            }
            onLoadingDone();
            onReply(resp, hookReply);
          };
          if (resp.diff) {
            this.liveSocket.requestDOMUpdate(() => {
              this.applyDiff("update", resp.diff, ({ diff, reply, events }) => {
                if (ref !== null) {
                  this.undoRefs(ref);
                }
                this.update(diff, events);
                finish(reply);
              });
            });
          } else {
            if (ref !== null) {
              this.undoRefs(ref);
            }
            finish(null);
          }
        });
      });
    }
    undoRefs(ref) {
      if (!this.isConnected()) {
        return;
      }
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}="${ref}"]`, (el) => {
        let disabledVal = el.getAttribute(PHX_DISABLED);
        let readOnlyVal = el.getAttribute(PHX_READONLY);
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
        if (readOnlyVal !== null) {
          el.readOnly = readOnlyVal === "true" ? true : false;
          el.removeAttribute(PHX_READONLY);
        }
        if (disabledVal !== null) {
          el.disabled = disabledVal === "true" ? true : false;
          el.removeAttribute(PHX_DISABLED);
        }
        PHX_EVENT_CLASSES.forEach((className) => dom_default.removeClass(el, className));
        let disableRestore = el.getAttribute(PHX_DISABLE_WITH_RESTORE);
        if (disableRestore !== null) {
          el.innerText = disableRestore;
          el.removeAttribute(PHX_DISABLE_WITH_RESTORE);
        }
        let toEl = dom_default.private(el, PHX_REF);
        if (toEl) {
          let hook = this.triggerBeforeUpdateHook(el, toEl);
          DOMPatch.patchEl(el, toEl, this.liveSocket.getActiveElement());
          if (hook) {
            hook.__updated();
          }
          dom_default.deletePrivate(el, PHX_REF);
        }
      });
    }
    putRef(elements, event, opts = {}) {
      let newRef = this.ref++;
      let disableWith = this.binding(PHX_DISABLE_WITH);
      if (opts.loading) {
        elements = elements.concat(dom_default.all(document, opts.loading));
      }
      elements.forEach((el) => {
        el.classList.add(`phx-${event}-loading`);
        el.setAttribute(PHX_REF, newRef);
        el.setAttribute(PHX_REF_SRC, this.el.id);
        let disableText = el.getAttribute(disableWith);
        if (disableText !== null) {
          if (!el.getAttribute(PHX_DISABLE_WITH_RESTORE)) {
            el.setAttribute(PHX_DISABLE_WITH_RESTORE, el.innerText);
          }
          if (disableText !== "") {
            el.innerText = disableText;
          }
          el.setAttribute(PHX_DISABLED, el.getAttribute(PHX_DISABLED) || el.disabled);
          el.setAttribute("disabled", "");
        }
      });
      return [newRef, elements, opts];
    }
    componentID(el) {
      let cid = el.getAttribute && el.getAttribute(PHX_COMPONENT);
      return cid ? parseInt(cid) : null;
    }
    targetComponentID(target, targetCtx, opts = {}) {
      if (isCid(targetCtx)) {
        return targetCtx;
      }
      let cidOrSelector = opts.target || target.getAttribute(this.binding("target"));
      if (isCid(cidOrSelector)) {
        return parseInt(cidOrSelector);
      } else if (targetCtx && (cidOrSelector !== null || opts.target)) {
        return this.closestComponentID(targetCtx);
      } else {
        return null;
      }
    }
    closestComponentID(targetCtx) {
      if (isCid(targetCtx)) {
        return targetCtx;
      } else if (targetCtx) {
        return maybe(targetCtx.closest(`[${PHX_COMPONENT}]`), (el) => this.ownsElement(el) && this.componentID(el));
      } else {
        return null;
      }
    }
    pushHookEvent(el, targetCtx, event, payload, onReply) {
      if (!this.isConnected()) {
        this.log("hook", () => ["unable to push hook event. LiveView not connected", event, payload]);
        return false;
      }
      let [ref, els, opts] = this.putRef([el], "hook");
      this.pushWithReply(() => [ref, els, opts], "event", {
        type: "hook",
        event,
        value: payload,
        cid: this.closestComponentID(targetCtx)
      }, (resp, reply) => onReply(reply, ref));
      return ref;
    }
    extractMeta(el, meta, value) {
      let prefix = this.binding("value-");
      for (let i = 0; i < el.attributes.length; i++) {
        if (!meta) {
          meta = {};
        }
        let name = el.attributes[i].name;
        if (name.startsWith(prefix)) {
          meta[name.replace(prefix, "")] = el.getAttribute(name);
        }
      }
      if (el.value !== void 0 && !(el instanceof HTMLFormElement)) {
        if (!meta) {
          meta = {};
        }
        meta.value = el.value;
        if (el.tagName === "INPUT" && CHECKABLE_INPUTS.indexOf(el.type) >= 0 && !el.checked) {
          delete meta.value;
        }
      }
      if (value) {
        if (!meta) {
          meta = {};
        }
        for (let key in value) {
          meta[key] = value[key];
        }
      }
      return meta;
    }
    pushEvent(type, el, targetCtx, phxEvent, meta, opts = {}, onReply) {
      this.pushWithReply(() => this.putRef([el], type, opts), "event", {
        type,
        event: phxEvent,
        value: this.extractMeta(el, meta, opts.value),
        cid: this.targetComponentID(el, targetCtx, opts)
      }, (resp, reply) => onReply && onReply(reply));
    }
    pushFileProgress(fileEl, entryRef, progress, onReply = function() {
    }) {
      this.liveSocket.withinOwners(fileEl.form, (view, targetCtx) => {
        view.pushWithReply(null, "progress", {
          event: fileEl.getAttribute(view.binding(PHX_PROGRESS)),
          ref: fileEl.getAttribute(PHX_UPLOAD_REF),
          entry_ref: entryRef,
          progress,
          cid: view.targetComponentID(fileEl.form, targetCtx)
        }, onReply);
      });
    }
    pushInput(inputEl, targetCtx, forceCid, phxEvent, opts, callback) {
      let uploads;
      let cid = isCid(forceCid) ? forceCid : this.targetComponentID(inputEl.form, targetCtx, opts);
      let refGenerator = () => this.putRef([inputEl, inputEl.form], "change", opts);
      let formData;
      let meta = this.extractMeta(inputEl.form);
      if (inputEl instanceof HTMLButtonElement) {
        meta.submitter = inputEl;
      }
      if (inputEl.getAttribute(this.binding("change"))) {
        formData = serializeForm(inputEl.form, __spreadValues({ _target: opts._target }, meta), [inputEl.name]);
      } else {
        formData = serializeForm(inputEl.form, __spreadValues({ _target: opts._target }, meta));
      }
      if (dom_default.isUploadInput(inputEl) && inputEl.files && inputEl.files.length > 0) {
        LiveUploader.trackFiles(inputEl, Array.from(inputEl.files));
      }
      uploads = LiveUploader.serializeUploads(inputEl);
      let event = {
        type: "form",
        event: phxEvent,
        value: formData,
        uploads,
        cid
      };
      this.pushWithReply(refGenerator, "event", event, (resp) => {
        dom_default.showError(inputEl, this.liveSocket.binding(PHX_FEEDBACK_FOR), this.liveSocket.binding(PHX_FEEDBACK_GROUP));
        if (dom_default.isUploadInput(inputEl) && dom_default.isAutoUpload(inputEl)) {
          if (LiveUploader.filesAwaitingPreflight(inputEl).length > 0) {
            let [ref, _els] = refGenerator();
            this.uploadFiles(inputEl.form, targetCtx, ref, cid, (_uploads) => {
              callback && callback(resp);
              this.triggerAwaitingSubmit(inputEl.form);
              this.undoRefs(ref);
            });
          }
        } else {
          callback && callback(resp);
        }
      });
    }
    triggerAwaitingSubmit(formEl) {
      let awaitingSubmit = this.getScheduledSubmit(formEl);
      if (awaitingSubmit) {
        let [_el, _ref, _opts, callback] = awaitingSubmit;
        this.cancelSubmit(formEl);
        callback();
      }
    }
    getScheduledSubmit(formEl) {
      return this.formSubmits.find(([el, _ref, _opts, _callback]) => el.isSameNode(formEl));
    }
    scheduleSubmit(formEl, ref, opts, callback) {
      if (this.getScheduledSubmit(formEl)) {
        return true;
      }
      this.formSubmits.push([formEl, ref, opts, callback]);
    }
    cancelSubmit(formEl) {
      this.formSubmits = this.formSubmits.filter(([el, ref, _callback]) => {
        if (el.isSameNode(formEl)) {
          this.undoRefs(ref);
          return false;
        } else {
          return true;
        }
      });
    }
    disableForm(formEl, opts = {}) {
      let filterIgnored = (el) => {
        let userIgnored = closestPhxBinding(el, `${this.binding(PHX_UPDATE)}=ignore`, el.form);
        return !(userIgnored || closestPhxBinding(el, "data-phx-update=ignore", el.form));
      };
      let filterDisables = (el) => {
        return el.hasAttribute(this.binding(PHX_DISABLE_WITH));
      };
      let filterButton = (el) => el.tagName == "BUTTON";
      let filterInput = (el) => ["INPUT", "TEXTAREA", "SELECT"].includes(el.tagName);
      let formElements = Array.from(formEl.elements);
      let disables = formElements.filter(filterDisables);
      let buttons = formElements.filter(filterButton).filter(filterIgnored);
      let inputs = formElements.filter(filterInput).filter(filterIgnored);
      buttons.forEach((button) => {
        button.setAttribute(PHX_DISABLED, button.disabled);
        button.disabled = true;
      });
      inputs.forEach((input) => {
        input.setAttribute(PHX_READONLY, input.readOnly);
        input.readOnly = true;
        if (input.files) {
          input.setAttribute(PHX_DISABLED, input.disabled);
          input.disabled = true;
        }
      });
      formEl.setAttribute(this.binding(PHX_PAGE_LOADING), "");
      return this.putRef([formEl].concat(disables).concat(buttons).concat(inputs), "submit", opts);
    }
    pushFormSubmit(formEl, targetCtx, phxEvent, submitter, opts, onReply) {
      let refGenerator = () => this.disableForm(formEl, opts);
      let cid = this.targetComponentID(formEl, targetCtx);
      if (LiveUploader.hasUploadsInProgress(formEl)) {
        let [ref, _els] = refGenerator();
        let push = () => this.pushFormSubmit(formEl, targetCtx, phxEvent, submitter, opts, onReply);
        return this.scheduleSubmit(formEl, ref, opts, push);
      } else if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {
        let [ref, els] = refGenerator();
        let proxyRefGen = () => [ref, els, opts];
        this.uploadFiles(formEl, targetCtx, ref, cid, (uploads) => {
          if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {
            return this.undoRefs(ref);
          }
          let meta = this.extractMeta(formEl);
          let formData = serializeForm(formEl, __spreadValues({ submitter }, meta));
          this.pushWithReply(proxyRefGen, "event", {
            type: "form",
            event: phxEvent,
            value: formData,
            cid
          }, onReply);
        });
      } else if (!(formEl.hasAttribute(PHX_REF) && formEl.classList.contains("phx-submit-loading"))) {
        let meta = this.extractMeta(formEl);
        let formData = serializeForm(formEl, __spreadValues({ submitter }, meta));
        this.pushWithReply(refGenerator, "event", {
          type: "form",
          event: phxEvent,
          value: formData,
          cid
        }, onReply);
      }
    }
    uploadFiles(formEl, targetCtx, ref, cid, onComplete) {
      let joinCountAtUpload = this.joinCount;
      let inputEls = LiveUploader.activeFileInputs(formEl);
      let numFileInputsInProgress = inputEls.length;
      inputEls.forEach((inputEl) => {
        let uploader = new LiveUploader(inputEl, this, () => {
          numFileInputsInProgress--;
          if (numFileInputsInProgress === 0) {
            onComplete();
          }
        });
        let entries = uploader.entries().map((entry) => entry.toPreflightPayload());
        if (entries.length === 0) {
          numFileInputsInProgress--;
          return;
        }
        let payload = {
          ref: inputEl.getAttribute(PHX_UPLOAD_REF),
          entries,
          cid: this.targetComponentID(inputEl.form, targetCtx)
        };
        this.log("upload", () => ["sending preflight request", payload]);
        this.pushWithReply(null, "allow_upload", payload, (resp) => {
          this.log("upload", () => ["got preflight response", resp]);
          uploader.entries().forEach((entry) => {
            if (resp.entries && !resp.entries[entry.ref]) {
              this.handleFailedEntryPreflight(entry.ref, "failed preflight", uploader);
            }
          });
          if (resp.error || Object.keys(resp.entries).length === 0) {
            this.undoRefs(ref);
            let errors = resp.error || [];
            errors.map(([entry_ref, reason]) => {
              this.handleFailedEntryPreflight(entry_ref, reason, uploader);
            });
          } else {
            let onError = (callback) => {
              this.channel.onError(() => {
                if (this.joinCount === joinCountAtUpload) {
                  callback();
                }
              });
            };
            uploader.initAdapterUpload(resp, onError, this.liveSocket);
          }
        });
      });
    }
    handleFailedEntryPreflight(uploadRef, reason, uploader) {
      if (uploader.isAutoUpload()) {
        let entry = uploader.entries().find((entry2) => entry2.ref === uploadRef.toString());
        if (entry) {
          entry.cancel();
        }
      } else {
        uploader.entries().map((entry) => entry.cancel());
      }
      this.log("upload", () => [`error for entry ${uploadRef}`, reason]);
    }
    dispatchUploads(targetCtx, name, filesOrBlobs) {
      let targetElement = this.targetCtxElement(targetCtx) || this.el;
      let inputs = dom_default.findUploadInputs(targetElement).filter((el) => el.name === name);
      if (inputs.length === 0) {
        logError(`no live file inputs found matching the name "${name}"`);
      } else if (inputs.length > 1) {
        logError(`duplicate live file inputs found matching the name "${name}"`);
      } else {
        dom_default.dispatchEvent(inputs[0], PHX_TRACK_UPLOADS, { detail: { files: filesOrBlobs } });
      }
    }
    targetCtxElement(targetCtx) {
      if (isCid(targetCtx)) {
        let [target] = dom_default.findComponentNodeList(this.el, targetCtx);
        return target;
      } else if (targetCtx) {
        return targetCtx;
      } else {
        return null;
      }
    }
    pushFormRecovery(form, newCid, callback) {
      this.liveSocket.withinOwners(form, (view, targetCtx) => {
        let phxChange = this.binding("change");
        let inputs = Array.from(form.elements).filter((el) => dom_default.isFormInput(el) && el.name && !el.hasAttribute(phxChange));
        if (inputs.length === 0) {
          return;
        }
        inputs.forEach((input2) => input2.hasAttribute(PHX_UPLOAD_REF) && LiveUploader.clearFiles(input2));
        let input = inputs.find((el) => el.type !== "hidden") || inputs[0];
        let phxEvent = form.getAttribute(this.binding(PHX_AUTO_RECOVER)) || form.getAttribute(this.binding("change"));
        js_default.exec("change", phxEvent, view, input, ["push", { _target: input.name, newCid, callback }]);
      });
    }
    pushLinkPatch(href, targetEl, callback) {
      let linkRef = this.liveSocket.setPendingLink(href);
      let refGen = targetEl ? () => this.putRef([targetEl], "click") : null;
      let fallback = () => this.liveSocket.redirect(window.location.href);
      let url = href.startsWith("/") ? `${location.protocol}//${location.host}${href}` : href;
      let push = this.pushWithReply(refGen, "live_patch", { url }, (resp) => {
        this.liveSocket.requestDOMUpdate(() => {
          if (resp.link_redirect) {
            this.liveSocket.replaceMain(href, null, callback, linkRef);
          } else {
            if (this.liveSocket.commitPendingLink(linkRef)) {
              this.href = href;
            }
            this.applyPendingUpdates();
            callback && callback(linkRef);
          }
        });
      });
      if (push) {
        push.receive("timeout", fallback);
      } else {
        fallback();
      }
    }
    formsForRecovery(html2) {
      if (this.joinCount === 0) {
        return [];
      }
      let phxChange = this.binding("change");
      let template = document.createElement("template");
      template.innerHTML = html2;
      return dom_default.all(this.el, `form[${phxChange}]`).filter((form) => form.id && this.ownsElement(form)).filter((form) => form.elements.length > 0).filter((form) => form.getAttribute(this.binding(PHX_AUTO_RECOVER)) !== "ignore").map((form) => {
        const phxChangeValue = CSS.escape(form.getAttribute(phxChange));
        let newForm = template.content.querySelector(`form[id="${form.id}"][${phxChange}="${phxChangeValue}"]`);
        if (newForm) {
          return [form, newForm, this.targetComponentID(newForm)];
        } else {
          return [form, form, this.targetComponentID(form)];
        }
      }).filter(([form, newForm, newCid]) => newForm);
    }
    maybePushComponentsDestroyed(destroyedCIDs) {
      let willDestroyCIDs = destroyedCIDs.filter((cid) => {
        return dom_default.findComponentNodeList(this.el, cid).length === 0;
      });
      if (willDestroyCIDs.length > 0) {
        willDestroyCIDs.forEach((cid) => this.rendered.resetRender(cid));
        this.pushWithReply(null, "cids_will_destroy", { cids: willDestroyCIDs }, () => {
          let completelyDestroyCIDs = willDestroyCIDs.filter((cid) => {
            return dom_default.findComponentNodeList(this.el, cid).length === 0;
          });
          if (completelyDestroyCIDs.length > 0) {
            this.pushWithReply(null, "cids_destroyed", { cids: completelyDestroyCIDs }, (resp) => {
              this.rendered.pruneCIDs(resp.cids);
            });
          }
        });
      }
    }
    ownsElement(el) {
      let parentViewEl = el.closest(PHX_VIEW_SELECTOR);
      return el.getAttribute(PHX_PARENT_ID) === this.id || parentViewEl && parentViewEl.id === this.id || !parentViewEl && this.isDead;
    }
    submitForm(form, targetCtx, phxEvent, submitter, opts = {}) {
      dom_default.putPrivate(form, PHX_HAS_SUBMITTED, true);
      const phxFeedbackFor = this.liveSocket.binding(PHX_FEEDBACK_FOR);
      const phxFeedbackGroup = this.liveSocket.binding(PHX_FEEDBACK_GROUP);
      const inputs = Array.from(form.elements);
      inputs.forEach((input) => dom_default.putPrivate(input, PHX_HAS_SUBMITTED, true));
      this.liveSocket.blurActiveElement(this);
      this.pushFormSubmit(form, targetCtx, phxEvent, submitter, opts, () => {
        inputs.forEach((input) => dom_default.showError(input, phxFeedbackFor, phxFeedbackGroup));
        this.liveSocket.restorePreviouslyActiveFocus();
      });
    }
    binding(kind) {
      return this.liveSocket.binding(kind);
    }
  };
  var LiveSocket = class {
    constructor(url, phxSocket, opts = {}) {
      this.unloaded = false;
      if (!phxSocket || phxSocket.constructor.name === "Object") {
        throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);
      }
      this.socket = new phxSocket(url, opts);
      this.bindingPrefix = opts.bindingPrefix || BINDING_PREFIX;
      this.opts = opts;
      this.params = closure2(opts.params || {});
      this.viewLogger = opts.viewLogger;
      this.metadataCallbacks = opts.metadata || {};
      this.defaults = Object.assign(clone(DEFAULTS), opts.defaults || {});
      this.activeElement = null;
      this.prevActive = null;
      this.silenced = false;
      this.main = null;
      this.outgoingMainEl = null;
      this.clickStartedAtTarget = null;
      this.linkRef = 1;
      this.roots = {};
      this.href = window.location.href;
      this.pendingLink = null;
      this.currentLocation = clone(window.location);
      this.hooks = opts.hooks || {};
      this.uploaders = opts.uploaders || {};
      this.loaderTimeout = opts.loaderTimeout || LOADER_TIMEOUT;
      this.reloadWithJitterTimer = null;
      this.maxReloads = opts.maxReloads || MAX_RELOADS;
      this.reloadJitterMin = opts.reloadJitterMin || RELOAD_JITTER_MIN;
      this.reloadJitterMax = opts.reloadJitterMax || RELOAD_JITTER_MAX;
      this.failsafeJitter = opts.failsafeJitter || FAILSAFE_JITTER;
      this.localStorage = opts.localStorage || window.localStorage;
      this.sessionStorage = opts.sessionStorage || window.sessionStorage;
      this.boundTopLevelEvents = false;
      this.domCallbacks = Object.assign({ onNodeAdded: closure2(), onBeforeElUpdated: closure2() }, opts.dom || {});
      this.transitions = new TransitionSet();
      window.addEventListener("pagehide", (_e) => {
        this.unloaded = true;
      });
      this.socket.onOpen(() => {
        if (this.isUnloaded()) {
          window.location.reload();
        }
      });
    }
    isProfileEnabled() {
      return this.sessionStorage.getItem(PHX_LV_PROFILE) === "true";
    }
    isDebugEnabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "true";
    }
    isDebugDisabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "false";
    }
    enableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "true");
    }
    enableProfiling() {
      this.sessionStorage.setItem(PHX_LV_PROFILE, "true");
    }
    disableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "false");
    }
    disableProfiling() {
      this.sessionStorage.removeItem(PHX_LV_PROFILE);
    }
    enableLatencySim(upperBoundMs) {
      this.enableDebug();
      console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable");
      this.sessionStorage.setItem(PHX_LV_LATENCY_SIM, upperBoundMs);
    }
    disableLatencySim() {
      this.sessionStorage.removeItem(PHX_LV_LATENCY_SIM);
    }
    getLatencySim() {
      let str = this.sessionStorage.getItem(PHX_LV_LATENCY_SIM);
      return str ? parseInt(str) : null;
    }
    getSocket() {
      return this.socket;
    }
    connect() {
      if (window.location.hostname === "localhost" && !this.isDebugDisabled()) {
        this.enableDebug();
      }
      let doConnect = () => {
        if (this.joinRootViews()) {
          this.bindTopLevelEvents();
          this.socket.connect();
        } else if (this.main) {
          this.socket.connect();
        } else {
          this.bindTopLevelEvents({ dead: true });
        }
        this.joinDeadView();
      };
      if (["complete", "loaded", "interactive"].indexOf(document.readyState) >= 0) {
        doConnect();
      } else {
        document.addEventListener("DOMContentLoaded", () => doConnect());
      }
    }
    disconnect(callback) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.disconnect(callback);
    }
    replaceTransport(transport) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.replaceTransport(transport);
      this.connect();
    }
    execJS(el, encodedJS, eventType = null) {
      this.owner(el, (view) => js_default.exec(eventType, encodedJS, view, el));
    }
    execJSHookPush(el, phxEvent, data, callback) {
      this.withinOwners(el, (view) => {
        js_default.exec("hook", phxEvent, view, el, ["push", { data, callback }]);
      });
    }
    unload() {
      if (this.unloaded) {
        return;
      }
      if (this.main && this.isConnected()) {
        this.log(this.main, "socket", () => ["disconnect for page nav"]);
      }
      this.unloaded = true;
      this.destroyAllViews();
      this.disconnect();
    }
    triggerDOM(kind, args) {
      this.domCallbacks[kind](...args);
    }
    time(name, func) {
      if (!this.isProfileEnabled() || !console.time) {
        return func();
      }
      console.time(name);
      let result = func();
      console.timeEnd(name);
      return result;
    }
    log(view, kind, msgCallback) {
      if (this.viewLogger) {
        let [msg, obj] = msgCallback();
        this.viewLogger(view, kind, msg, obj);
      } else if (this.isDebugEnabled()) {
        let [msg, obj] = msgCallback();
        debug(view, kind, msg, obj);
      }
    }
    requestDOMUpdate(callback) {
      this.transitions.after(callback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.transitions.addTransition(time, onStart, onDone);
    }
    onChannel(channel, event, cb) {
      channel.on(event, (data) => {
        let latency = this.getLatencySim();
        if (!latency) {
          cb(data);
        } else {
          setTimeout(() => cb(data), latency);
        }
      });
    }
    wrapPush(view, opts, push) {
      let latency = this.getLatencySim();
      let oldJoinCount = view.joinCount;
      if (!latency) {
        if (this.isConnected() && opts.timeout) {
          return push().receive("timeout", () => {
            if (view.joinCount === oldJoinCount && !view.isDestroyed()) {
              this.reloadWithJitter(view, () => {
                this.log(view, "timeout", () => ["received timeout while communicating with server. Falling back to hard refresh for recovery"]);
              });
            }
          });
        } else {
          return push();
        }
      }
      let fakePush = {
        receives: [],
        receive(kind, cb) {
          this.receives.push([kind, cb]);
        }
      };
      setTimeout(() => {
        if (view.isDestroyed()) {
          return;
        }
        fakePush.receives.reduce((acc, [kind, cb]) => acc.receive(kind, cb), push());
      }, latency);
      return fakePush;
    }
    reloadWithJitter(view, log) {
      clearTimeout(this.reloadWithJitterTimer);
      this.disconnect();
      let minMs = this.reloadJitterMin;
      let maxMs = this.reloadJitterMax;
      let afterMs = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;
      let tries = browser_default.updateLocal(this.localStorage, window.location.pathname, CONSECUTIVE_RELOADS, 0, (count) => count + 1);
      if (tries > this.maxReloads) {
        afterMs = this.failsafeJitter;
      }
      this.reloadWithJitterTimer = setTimeout(() => {
        if (view.isDestroyed() || view.isConnected()) {
          return;
        }
        view.destroy();
        log ? log() : this.log(view, "join", () => [`encountered ${tries} consecutive reloads`]);
        if (tries > this.maxReloads) {
          this.log(view, "join", () => [`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]);
        }
        if (this.hasPendingLink()) {
          window.location = this.pendingLink;
        } else {
          window.location.reload();
        }
      }, afterMs);
    }
    getHookCallbacks(name) {
      return name && name.startsWith("Phoenix.") ? hooks_default[name.split(".")[1]] : this.hooks[name];
    }
    isUnloaded() {
      return this.unloaded;
    }
    isConnected() {
      return this.socket.isConnected();
    }
    getBindingPrefix() {
      return this.bindingPrefix;
    }
    binding(kind) {
      return `${this.getBindingPrefix()}${kind}`;
    }
    channel(topic, params) {
      return this.socket.channel(topic, params);
    }
    joinDeadView() {
      let body = document.body;
      if (body && !this.isPhxView(body) && !this.isPhxView(document.firstElementChild)) {
        let view = this.newRootView(body);
        view.setHref(this.getHref());
        view.joinDead();
        if (!this.main) {
          this.main = view;
        }
        window.requestAnimationFrame(() => view.execNewMounted());
      }
    }
    joinRootViews() {
      let rootsFound = false;
      dom_default.all(document, `${PHX_VIEW_SELECTOR}:not([${PHX_PARENT_ID}])`, (rootEl) => {
        if (!this.getRootById(rootEl.id)) {
          let view = this.newRootView(rootEl);
          view.setHref(this.getHref());
          view.join();
          if (rootEl.hasAttribute(PHX_MAIN)) {
            this.main = view;
          }
        }
        rootsFound = true;
      });
      return rootsFound;
    }
    redirect(to, flash) {
      this.unload();
      browser_default.redirect(to, flash);
    }
    replaceMain(href, flash, callback = null, linkRef = this.setPendingLink(href)) {
      let liveReferer = this.currentLocation.href;
      this.outgoingMainEl = this.outgoingMainEl || this.main.el;
      let newMainEl = dom_default.cloneNode(this.outgoingMainEl, "");
      this.main.showLoader(this.loaderTimeout);
      this.main.destroy();
      this.main = this.newRootView(newMainEl, flash, liveReferer);
      this.main.setRedirect(href);
      this.transitionRemoves(null, true);
      this.main.join((joinCount, onDone) => {
        if (joinCount === 1 && this.commitPendingLink(linkRef)) {
          this.requestDOMUpdate(() => {
            dom_default.findPhxSticky(document).forEach((el) => newMainEl.appendChild(el));
            this.outgoingMainEl.replaceWith(newMainEl);
            this.outgoingMainEl = null;
            callback && callback(linkRef);
            onDone();
          });
        }
      });
    }
    transitionRemoves(elements, skipSticky) {
      let removeAttr = this.binding("remove");
      elements = elements || dom_default.all(document, `[${removeAttr}]`);
      if (skipSticky) {
        const stickies = dom_default.findPhxSticky(document) || [];
        elements = elements.filter((el) => !dom_default.isChildOfAny(el, stickies));
      }
      elements.forEach((el) => {
        this.execJS(el, el.getAttribute(removeAttr), "remove");
      });
    }
    isPhxView(el) {
      return el.getAttribute && el.getAttribute(PHX_SESSION) !== null;
    }
    newRootView(el, flash, liveReferer) {
      let view = new View(el, this, null, flash, liveReferer);
      this.roots[view.id] = view;
      return view;
    }
    owner(childEl, callback) {
      let view = maybe(childEl.closest(PHX_VIEW_SELECTOR), (el) => this.getViewByEl(el)) || this.main;
      if (view) {
        callback(view);
      }
    }
    withinOwners(childEl, callback) {
      this.owner(childEl, (view) => callback(view, childEl));
    }
    getViewByEl(el) {
      let rootId = el.getAttribute(PHX_ROOT_ID);
      return maybe(this.getRootById(rootId), (root) => root.getDescendentByEl(el));
    }
    getRootById(id) {
      return this.roots[id];
    }
    destroyAllViews() {
      for (let id in this.roots) {
        this.roots[id].destroy();
        delete this.roots[id];
      }
      this.main = null;
    }
    destroyViewByEl(el) {
      let root = this.getRootById(el.getAttribute(PHX_ROOT_ID));
      if (root && root.id === el.id) {
        root.destroy();
        delete this.roots[root.id];
      } else if (root) {
        root.destroyDescendent(el.id);
      }
    }
    setActiveElement(target) {
      if (this.activeElement === target) {
        return;
      }
      this.activeElement = target;
      let cancel = () => {
        if (target === this.activeElement) {
          this.activeElement = null;
        }
        target.removeEventListener("mouseup", this);
        target.removeEventListener("touchend", this);
      };
      target.addEventListener("mouseup", cancel);
      target.addEventListener("touchend", cancel);
    }
    getActiveElement() {
      if (document.activeElement === document.body) {
        return this.activeElement || document.activeElement;
      } else {
        return document.activeElement || document.body;
      }
    }
    dropActiveElement(view) {
      if (this.prevActive && view.ownsElement(this.prevActive)) {
        this.prevActive = null;
      }
    }
    restorePreviouslyActiveFocus() {
      if (this.prevActive && this.prevActive !== document.body) {
        this.prevActive.focus();
      }
    }
    blurActiveElement() {
      this.prevActive = this.getActiveElement();
      if (this.prevActive !== document.body) {
        this.prevActive.blur();
      }
    }
    bindTopLevelEvents({ dead } = {}) {
      if (this.boundTopLevelEvents) {
        return;
      }
      this.boundTopLevelEvents = true;
      this.socket.onClose((event) => {
        if (event && event.code === 1e3 && this.main) {
          return this.reloadWithJitter(this.main);
        }
      });
      document.body.addEventListener("click", function() {
      });
      window.addEventListener("pageshow", (e) => {
        if (e.persisted) {
          this.getSocket().disconnect();
          this.withPageLoading({ to: window.location.href, kind: "redirect" });
          window.location.reload();
        }
      }, true);
      if (!dead) {
        this.bindNav();
      }
      this.bindClicks();
      if (!dead) {
        this.bindForms();
      }
      this.bind({ keyup: "keyup", keydown: "keydown" }, (e, type, view, targetEl, phxEvent, phxTarget) => {
        let matchKey = targetEl.getAttribute(this.binding(PHX_KEY));
        let pressedKey = e.key && e.key.toLowerCase();
        if (matchKey && matchKey.toLowerCase() !== pressedKey) {
          return;
        }
        let data = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
        js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
      });
      this.bind({ blur: "focusout", focus: "focusin" }, (e, type, view, targetEl, phxEvent, phxTarget) => {
        if (!phxTarget) {
          let data = __spreadValues({ key: e.key }, this.eventMeta(type, e, targetEl));
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
        }
      });
      this.bind({ blur: "blur", focus: "focus" }, (e, type, view, targetEl, phxEvent, phxTarget) => {
        if (phxTarget === "window") {
          let data = this.eventMeta(type, e, targetEl);
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
        }
      });
      window.addEventListener("dragover", (e) => e.preventDefault());
      window.addEventListener("drop", (e) => {
        e.preventDefault();
        let dropTargetId = maybe(closestPhxBinding(e.target, this.binding(PHX_DROP_TARGET)), (trueTarget) => {
          return trueTarget.getAttribute(this.binding(PHX_DROP_TARGET));
        });
        let dropTarget = dropTargetId && document.getElementById(dropTargetId);
        let files = Array.from(e.dataTransfer.files || []);
        if (!dropTarget || dropTarget.disabled || files.length === 0 || !(dropTarget.files instanceof FileList)) {
          return;
        }
        LiveUploader.trackFiles(dropTarget, files, e.dataTransfer);
        dropTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
      this.on(PHX_TRACK_UPLOADS, (e) => {
        let uploadTarget = e.target;
        if (!dom_default.isUploadInput(uploadTarget)) {
          return;
        }
        let files = Array.from(e.detail.files || []).filter((f) => f instanceof File || f instanceof Blob);
        LiveUploader.trackFiles(uploadTarget, files);
        uploadTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
    }
    eventMeta(eventName, e, targetEl) {
      let callback = this.metadataCallbacks[eventName];
      return callback ? callback(e, targetEl) : {};
    }
    setPendingLink(href) {
      this.linkRef++;
      this.pendingLink = href;
      return this.linkRef;
    }
    commitPendingLink(linkRef) {
      if (this.linkRef !== linkRef) {
        return false;
      } else {
        this.href = this.pendingLink;
        this.pendingLink = null;
        return true;
      }
    }
    getHref() {
      return this.href;
    }
    hasPendingLink() {
      return !!this.pendingLink;
    }
    bind(events, callback) {
      for (let event in events) {
        let browserEventName = events[event];
        this.on(browserEventName, (e) => {
          let binding = this.binding(event);
          let windowBinding = this.binding(`window-${event}`);
          let targetPhxEvent = e.target.getAttribute && e.target.getAttribute(binding);
          if (targetPhxEvent) {
            this.debounce(e.target, e, browserEventName, () => {
              this.withinOwners(e.target, (view) => {
                callback(e, event, view, e.target, targetPhxEvent, null);
              });
            });
          } else {
            dom_default.all(document, `[${windowBinding}]`, (el) => {
              let phxEvent = el.getAttribute(windowBinding);
              this.debounce(el, e, browserEventName, () => {
                this.withinOwners(el, (view) => {
                  callback(e, event, view, el, phxEvent, "window");
                });
              });
            });
          }
        });
      }
    }
    bindClicks() {
      window.addEventListener("mousedown", (e) => this.clickStartedAtTarget = e.target);
      this.bindClick("click", "click", false);
      this.bindClick("mousedown", "capture-click", true);
    }
    bindClick(eventName, bindingName, capture) {
      let click = this.binding(bindingName);
      window.addEventListener(eventName, (e) => {
        let target = null;
        if (capture) {
          target = e.target.matches(`[${click}]`) ? e.target : e.target.querySelector(`[${click}]`);
        } else {
          if (e.detail === 0)
            this.clickStartedAtTarget = e.target;
          let clickStartedAtTarget = this.clickStartedAtTarget || e.target;
          target = closestPhxBinding(clickStartedAtTarget, click);
          this.dispatchClickAway(e, clickStartedAtTarget);
          this.clickStartedAtTarget = null;
        }
        let phxEvent = target && target.getAttribute(click);
        if (!phxEvent) {
          if (!capture && dom_default.isNewPageClick(e, window.location)) {
            this.unload();
          }
          return;
        }
        if (target.getAttribute("href") === "#") {
          e.preventDefault();
        }
        if (target.hasAttribute(PHX_REF)) {
          return;
        }
        this.debounce(target, e, "click", () => {
          this.withinOwners(target, (view) => {
            js_default.exec("click", phxEvent, view, target, ["push", { data: this.eventMeta("click", e, target) }]);
          });
        });
      }, capture);
    }
    dispatchClickAway(e, clickStartedAt) {
      let phxClickAway = this.binding("click-away");
      dom_default.all(document, `[${phxClickAway}]`, (el) => {
        if (!(el.isSameNode(clickStartedAt) || el.contains(clickStartedAt))) {
          this.withinOwners(el, (view) => {
            let phxEvent = el.getAttribute(phxClickAway);
            if (js_default.isVisible(el) && js_default.isInViewport(el)) {
              js_default.exec("click", phxEvent, view, el, ["push", { data: this.eventMeta("click", e, e.target) }]);
            }
          });
        }
      });
    }
    bindNav() {
      if (!browser_default.canPushState()) {
        return;
      }
      if (history.scrollRestoration) {
        history.scrollRestoration = "manual";
      }
      let scrollTimer = null;
      window.addEventListener("scroll", (_e) => {
        clearTimeout(scrollTimer);
        scrollTimer = setTimeout(() => {
          browser_default.updateCurrentState((state) => Object.assign(state, { scroll: window.scrollY }));
        }, 100);
      });
      window.addEventListener("popstate", (event) => {
        if (!this.registerNewLocation(window.location)) {
          return;
        }
        let { type, id, root, scroll } = event.state || {};
        let href = window.location.href;
        dom_default.dispatchEvent(window, "phx:navigate", { detail: { href, patch: type === "patch", pop: true } });
        this.requestDOMUpdate(() => {
          if (this.main.isConnected() && (type === "patch" && id === this.main.id)) {
            this.main.pushLinkPatch(href, null, () => {
              this.maybeScroll(scroll);
            });
          } else {
            this.replaceMain(href, null, () => {
              if (root) {
                this.replaceRootHistory();
              }
              this.maybeScroll(scroll);
            });
          }
        });
      }, false);
      window.addEventListener("click", (e) => {
        let target = closestPhxBinding(e.target, PHX_LIVE_LINK);
        let type = target && target.getAttribute(PHX_LIVE_LINK);
        if (!type || !this.isConnected() || !this.main || dom_default.wantsNewTab(e)) {
          return;
        }
        let href = target.href instanceof SVGAnimatedString ? target.href.baseVal : target.href;
        let linkState = target.getAttribute(PHX_LINK_STATE);
        e.preventDefault();
        e.stopImmediatePropagation();
        if (this.pendingLink === href) {
          return;
        }
        this.requestDOMUpdate(() => {
          if (type === "patch") {
            this.pushHistoryPatch(href, linkState, target);
          } else if (type === "redirect") {
            this.historyRedirect(href, linkState);
          } else {
            throw new Error(`expected ${PHX_LIVE_LINK} to be "patch" or "redirect", got: ${type}`);
          }
          let phxClick = target.getAttribute(this.binding("click"));
          if (phxClick) {
            this.requestDOMUpdate(() => this.execJS(target, phxClick, "click"));
          }
        });
      }, false);
    }
    maybeScroll(scroll) {
      if (typeof scroll === "number") {
        requestAnimationFrame(() => {
          window.scrollTo(0, scroll);
        });
      }
    }
    dispatchEvent(event, payload = {}) {
      dom_default.dispatchEvent(window, `phx:${event}`, { detail: payload });
    }
    dispatchEvents(events) {
      events.forEach(([event, payload]) => this.dispatchEvent(event, payload));
    }
    withPageLoading(info, callback) {
      dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: info });
      let done = () => dom_default.dispatchEvent(window, "phx:page-loading-stop", { detail: info });
      return callback ? callback(done) : done;
    }
    pushHistoryPatch(href, linkState, targetEl) {
      if (!this.isConnected() || !this.main.isMain()) {
        return browser_default.redirect(href);
      }
      this.withPageLoading({ to: href, kind: "patch" }, (done) => {
        this.main.pushLinkPatch(href, targetEl, (linkRef) => {
          this.historyPatch(href, linkState, linkRef);
          done();
        });
      });
    }
    historyPatch(href, linkState, linkRef = this.setPendingLink(href)) {
      if (!this.commitPendingLink(linkRef)) {
        return;
      }
      browser_default.pushState(linkState, { type: "patch", id: this.main.id }, href);
      dom_default.dispatchEvent(window, "phx:navigate", { detail: { patch: true, href, pop: false } });
      this.registerNewLocation(window.location);
    }
    historyRedirect(href, linkState, flash) {
      if (!this.isConnected() || !this.main.isMain()) {
        return browser_default.redirect(href, flash);
      }
      if (/^\/$|^\/[^\/]+.*$/.test(href)) {
        let { protocol, host } = window.location;
        href = `${protocol}//${host}${href}`;
      }
      let scroll = window.scrollY;
      this.withPageLoading({ to: href, kind: "redirect" }, (done) => {
        this.replaceMain(href, flash, (linkRef) => {
          if (linkRef === this.linkRef) {
            browser_default.pushState(linkState, { type: "redirect", id: this.main.id, scroll }, href);
            dom_default.dispatchEvent(window, "phx:navigate", { detail: { href, patch: false, pop: false } });
            this.registerNewLocation(window.location);
          }
          done();
        });
      });
    }
    replaceRootHistory() {
      browser_default.pushState("replace", { root: true, type: "patch", id: this.main.id });
    }
    registerNewLocation(newLocation) {
      let { pathname, search } = this.currentLocation;
      if (pathname + search === newLocation.pathname + newLocation.search) {
        return false;
      } else {
        this.currentLocation = clone(newLocation);
        return true;
      }
    }
    bindForms() {
      let iterations = 0;
      let externalFormSubmitted = false;
      this.on("submit", (e) => {
        let phxSubmit = e.target.getAttribute(this.binding("submit"));
        let phxChange = e.target.getAttribute(this.binding("change"));
        if (!externalFormSubmitted && phxChange && !phxSubmit) {
          externalFormSubmitted = true;
          e.preventDefault();
          this.withinOwners(e.target, (view) => {
            view.disableForm(e.target);
            window.requestAnimationFrame(() => {
              if (dom_default.isUnloadableFormSubmit(e)) {
                this.unload();
              }
              e.target.submit();
            });
          });
        }
      }, true);
      this.on("submit", (e) => {
        let phxEvent = e.target.getAttribute(this.binding("submit"));
        if (!phxEvent) {
          if (dom_default.isUnloadableFormSubmit(e)) {
            this.unload();
          }
          return;
        }
        e.preventDefault();
        e.target.disabled = true;
        this.withinOwners(e.target, (view) => {
          js_default.exec("submit", phxEvent, view, e.target, ["push", { submitter: e.submitter }]);
        });
      }, false);
      for (let type of ["change", "input"]) {
        this.on(type, (e) => {
          let phxChange = this.binding("change");
          let input = e.target;
          let inputEvent = input.getAttribute(phxChange);
          let formEvent = input.form && input.form.getAttribute(phxChange);
          let phxEvent = inputEvent || formEvent;
          if (!phxEvent) {
            return;
          }
          if (input.type === "number" && input.validity && input.validity.badInput) {
            return;
          }
          let dispatcher = inputEvent ? input : input.form;
          let currentIterations = iterations;
          iterations++;
          let { at, type: lastType } = dom_default.private(input, "prev-iteration") || {};
          if (at === currentIterations - 1 && type === "change" && lastType === "input") {
            return;
          }
          dom_default.putPrivate(input, "prev-iteration", { at: currentIterations, type });
          this.debounce(input, e, type, () => {
            this.withinOwners(dispatcher, (view) => {
              dom_default.putPrivate(input, PHX_HAS_FOCUSED, true);
              if (!dom_default.isTextualInput(input)) {
                this.setActiveElement(input);
              }
              js_default.exec("change", phxEvent, view, input, ["push", { _target: e.target.name, dispatcher }]);
            });
          });
        }, false);
      }
      this.on("reset", (e) => {
        let form = e.target;
        dom_default.resetForm(form, this.binding(PHX_FEEDBACK_FOR), this.binding(PHX_FEEDBACK_GROUP));
        let input = Array.from(form.elements).find((el) => el.type === "reset");
        if (input) {
          window.requestAnimationFrame(() => {
            input.dispatchEvent(new Event("input", { bubbles: true, cancelable: false }));
          });
        }
      });
    }
    debounce(el, event, eventType, callback) {
      if (eventType === "blur" || eventType === "focusout") {
        return callback();
      }
      let phxDebounce = this.binding(PHX_DEBOUNCE);
      let phxThrottle = this.binding(PHX_THROTTLE);
      let defaultDebounce = this.defaults.debounce.toString();
      let defaultThrottle = this.defaults.throttle.toString();
      this.withinOwners(el, (view) => {
        let asyncFilter = () => !view.isDestroyed() && document.body.contains(el);
        dom_default.debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, () => {
          callback();
        });
      });
    }
    silenceEvents(callback) {
      this.silenced = true;
      callback();
      this.silenced = false;
    }
    on(event, callback) {
      window.addEventListener(event, (e) => {
        if (!this.silenced) {
          callback(e);
        }
      });
    }
  };
  var TransitionSet = class {
    constructor() {
      this.transitions = /* @__PURE__ */ new Set();
      this.pendingOps = [];
    }
    reset() {
      this.transitions.forEach((timer) => {
        clearTimeout(timer);
        this.transitions.delete(timer);
      });
      this.flushPendingOps();
    }
    after(callback) {
      if (this.size() === 0) {
        callback();
      } else {
        this.pushPendingOp(callback);
      }
    }
    addTransition(time, onStart, onDone) {
      onStart();
      let timer = setTimeout(() => {
        this.transitions.delete(timer);
        onDone();
        this.flushPendingOps();
      }, time);
      this.transitions.add(timer);
    }
    pushPendingOp(op) {
      this.pendingOps.push(op);
    }
    size() {
      return this.transitions.size;
    }
    flushPendingOps() {
      if (this.size() > 0) {
        return;
      }
      let op = this.pendingOps.shift();
      if (op) {
        op();
        this.flushPendingOps();
      }
    }
  };

  // js/app.js
  var import_topbar = __toESM(require_topbar());

  // node_modules/preline/src/utils/index.ts
  var stringToBoolean = (string) => {
    return string === "true" ? true : false;
  };
  var getClassProperty = (el, prop, val = "") => {
    return (window.getComputedStyle(el).getPropertyValue(prop) || val).replace(
      " ",
      ""
    );
  };
  var getClassPropertyAlt = (el, prop, val = "") => {
    let targetClass = "";
    el.classList.forEach((c) => {
      if (c.includes(prop)) {
        targetClass = c;
      }
    });
    return targetClass.match(/:(.*)]/) ? targetClass.match(/:(.*)]/)[1] : val;
  };
  var isIOS = () => {
    if (/iPad|iPhone|iPod/.test(navigator.platform)) {
      return true;
    } else {
      return navigator.maxTouchPoints && navigator.maxTouchPoints > 2 && /MacIntel/.test(navigator.platform);
    }
  };
  var isIpadOS = () => {
    return navigator.maxTouchPoints && navigator.maxTouchPoints > 2 && /MacIntel/.test(navigator.platform);
  };
  var isEnoughSpace = (el, toggle, preferredPosition = "auto", space = 10, wrapper = null) => {
    const referenceRect = toggle.getBoundingClientRect();
    const wrapperRect = wrapper ? wrapper.getBoundingClientRect() : null;
    const viewportHeight = window.innerHeight;
    const spaceAbove = wrapperRect ? referenceRect.top - wrapperRect.top : referenceRect.top;
    const spaceBelow = (wrapper ? wrapperRect.bottom : viewportHeight) - referenceRect.bottom;
    const minimumSpaceRequired = el.clientHeight + space;
    if (preferredPosition === "bottom") {
      return spaceBelow >= minimumSpaceRequired;
    } else if (preferredPosition === "top") {
      return spaceAbove >= minimumSpaceRequired;
    } else {
      return spaceAbove >= minimumSpaceRequired || spaceBelow >= minimumSpaceRequired;
    }
  };
  var isFormElement = (target) => {
    return target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement;
  };
  var isParentOrElementHidden = (element) => {
    if (!element)
      return false;
    const computedStyle = window.getComputedStyle(element);
    if (computedStyle.display === "none")
      return true;
    return isParentOrElementHidden(element.parentElement);
  };
  var debounce = (func, timeout = 200) => {
    let timer;
    return (...args) => {
      clearTimeout(timer);
      timer = setTimeout(() => {
        func.apply(void 0, args);
      }, timeout);
    };
  };
  var dispatch = (evt, element, payload = null) => {
    const event = new CustomEvent(evt, {
      detail: { payload },
      bubbles: true,
      cancelable: true,
      composed: false
    });
    element.dispatchEvent(event);
  };
  var afterTransition = (el, callback) => {
    const handleEvent = () => {
      callback();
      el.removeEventListener("transitionend", handleEvent, true);
    };
    const hasTransition = window.getComputedStyle(el, null).getPropertyValue("transition") !== (navigator.userAgent.includes("Firefox") ? "all" : "all 0s ease 0s");
    if (hasTransition)
      el.addEventListener("transitionend", handleEvent, true);
    else
      callback();
  };
  var htmlToElement = (html2) => {
    const template = document.createElement("template");
    html2 = html2.trim();
    template.innerHTML = html2;
    return template.content.firstChild;
  };
  var classToClassList = (classes, target, splitter = " ", action = "add") => {
    const classesToArray = classes.split(splitter);
    classesToArray.forEach(
      (cl) => action === "add" ? target.classList.add(cl) : target.classList.remove(cl)
    );
  };
  var menuSearchHistory = {
    historyIndex: -1,
    addHistory(index) {
      this.historyIndex = index;
    },
    existsInHistory(index) {
      return index > this.historyIndex;
    },
    clearHistory() {
      this.historyIndex = -1;
    }
  };

  // node_modules/preline/src/plugins/base-plugin/index.ts
  var HSBasePlugin = class {
    constructor(el, options, events) {
      this.el = el;
      this.options = options;
      this.events = events;
      this.el = el;
      this.options = options;
      this.events = {};
    }
    createCollection(collection, element) {
      var _a;
      collection.push({
        id: ((_a = element == null ? void 0 : element.el) == null ? void 0 : _a.id) || collection.length + 1,
        element
      });
    }
    fireEvent(evt, payload = null) {
      if (this.events.hasOwnProperty(evt))
        return this.events[evt](payload);
    }
    on(evt, cb) {
      this.events[evt] = cb;
    }
  };

  // node_modules/preline/src/plugins/copy-markup/index.ts
  var HSCopyMarkup = class extends HSBasePlugin {
    constructor(el, options) {
      super(el, options);
      const data = el.getAttribute("data-hs-copy-markup");
      const dataOptions = data ? JSON.parse(data) : {};
      const concatOptions = __spreadValues(__spreadValues({}, dataOptions), options);
      this.targetSelector = (concatOptions == null ? void 0 : concatOptions.targetSelector) || null;
      this.wrapperSelector = (concatOptions == null ? void 0 : concatOptions.wrapperSelector) || null;
      this.limit = (concatOptions == null ? void 0 : concatOptions.limit) || null;
      this.items = [];
      if (this.targetSelector)
        this.init();
    }
    init() {
      this.createCollection(window.$hsCopyMarkupCollection, this);
      this.setTarget();
      this.setWrapper();
      this.addPredefinedItems();
      this.el.addEventListener("click", () => this.copy());
    }
    copy() {
      if (this.limit && this.items.length >= this.limit)
        return false;
      if (this.el.hasAttribute("disabled"))
        this.el.setAttribute("disabled", "");
      const copiedElement = this.target.cloneNode(true);
      this.addToItems(copiedElement);
      if (this.limit && this.items.length >= this.limit)
        this.el.setAttribute("disabled", "disabled");
      this.fireEvent("copy", copiedElement);
      dispatch("copy.hs.copyMarkup", copiedElement, copiedElement);
    }
    addPredefinedItems() {
      Array.from(this.wrapper.children).filter(
        (el) => !el.classList.contains("[--ignore-for-count]")
      ).forEach((el) => {
        this.addToItems(el);
      });
    }
    setTarget() {
      const target = typeof this.targetSelector === "string" ? document.querySelector(this.targetSelector).cloneNode(true) : this.targetSelector.cloneNode(true);
      target.removeAttribute("id");
      this.target = target;
    }
    setWrapper() {
      this.wrapper = typeof this.wrapperSelector === "string" ? document.querySelector(this.wrapperSelector) : this.wrapperSelector;
    }
    addToItems(item) {
      const deleteItemButton = item.querySelector(
        "[data-hs-copy-markup-delete-item]"
      );
      if (this.wrapper)
        this.wrapper.append(item);
      else
        this.el.before(item);
      if (deleteItemButton)
        deleteItemButton.addEventListener("click", () => this.delete(item));
      this.items.push(item);
    }
    // Public methods
    delete(target) {
      const index = this.items.indexOf(target);
      if (index !== -1)
        this.items.splice(index, 1);
      target.remove();
      this.fireEvent("delete", target);
      dispatch("delete.hs.copyMarkup", target, target);
    }
    // Static method
    static getInstance(target, isInstance) {
      const elInCollection = window.$hsCopyMarkupCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element : null;
    }
    static autoInit() {
      if (!window.$hsCopyMarkupCollection)
        window.$hsCopyMarkupCollection = [];
      document.querySelectorAll("[data-hs-copy-markup]:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsCopyMarkupCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        )) {
          const data = el.getAttribute("data-hs-copy-markup");
          const options = data ? JSON.parse(data) : {};
          new HSCopyMarkup(el, options);
        }
      });
    }
  };
  window.addEventListener("load", () => {
    HSCopyMarkup.autoInit();
  });
  if (typeof window !== "undefined") {
    window.HSCopyMarkup = HSCopyMarkup;
  }
  var copy_markup_default = HSCopyMarkup;

  // node_modules/preline/src/plugins/accordion/index.ts
  var HSAccordion = class extends HSBasePlugin {
    constructor(el, options, events) {
      super(el, options, events);
      this.toggle = this.el.querySelector(".hs-accordion-toggle") || null;
      this.content = this.el.querySelector(".hs-accordion-content") || null;
      this.group = this.el.closest(".hs-accordion-group") || null;
      this.isAlwaysOpened = this.group.hasAttribute("data-hs-accordion-always-open") || false;
      if (this.toggle && this.content)
        this.init();
    }
    init() {
      this.createCollection(window.$hsAccordionCollection, this);
      this.toggle.addEventListener("click", () => {
        if (this.el.classList.contains("active")) {
          this.hide();
        } else {
          this.show();
        }
      });
    }
    // Public methods
    show() {
      if (this.group && !this.isAlwaysOpened && this.group.querySelector(".hs-accordion.active") && this.group.querySelector(".hs-accordion.active") !== this.el) {
        const currentlyOpened = window.$hsAccordionCollection.find(
          (el) => el.element.el === this.group.querySelector(".hs-accordion.active")
        );
        currentlyOpened.element.hide();
      }
      if (this.el.classList.contains("active"))
        return false;
      this.el.classList.add("active");
      this.content.style.display = "block";
      this.content.style.height = "0";
      setTimeout(() => {
        this.content.style.height = `${this.content.scrollHeight}px`;
      });
      afterTransition(this.content, () => {
        this.content.style.display = "block";
        this.content.style.height = "";
        this.fireEvent("open", this.el);
        dispatch("open.hs.accordion", this.el, this.el);
      });
    }
    hide() {
      if (!this.el.classList.contains("active"))
        return false;
      this.el.classList.remove("active");
      this.content.style.height = `${this.content.scrollHeight}px`;
      setTimeout(() => {
        this.content.style.height = "0";
      });
      afterTransition(this.content, () => {
        this.content.style.display = "";
        this.content.style.height = "0";
        this.fireEvent("close", this.el);
        dispatch("close.hs.accordion", this.el, this.el);
      });
    }
    // Static methods
    static getInstance(target, isInstance) {
      const elInCollection = window.$hsAccordionCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element.el : null;
    }
    static show(target) {
      const elInCollection = window.$hsAccordionCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection && elInCollection.element.content.style.display !== "block")
        elInCollection.element.show();
    }
    static hide(target) {
      const elInCollection = window.$hsAccordionCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection && elInCollection.element.content.style.display === "block")
        elInCollection.element.hide();
    }
    static autoInit() {
      if (!window.$hsAccordionCollection)
        window.$hsAccordionCollection = [];
      document.querySelectorAll(".hs-accordion:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsAccordionCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSAccordion(el);
      });
    }
    // Backward compatibility
    static on(evt, target, cb) {
      const elInCollection = window.$hsAccordionCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection)
        elInCollection.element.events[evt] = cb;
    }
  };
  window.addEventListener("load", () => {
    HSAccordion.autoInit();
  });
  if (typeof window !== "undefined") {
    window.HSAccordion = HSAccordion;
  }
  var accordion_default = HSAccordion;

  // node_modules/preline/src/plugins/carousel/index.ts
  var HSCarousel = class extends HSBasePlugin {
    constructor(el, options) {
      var _a, _b, _c;
      super(el, options);
      const data = el.getAttribute("data-hs-carousel");
      const dataOptions = data ? JSON.parse(data) : {};
      const concatOptions = __spreadValues(__spreadValues({}, dataOptions), options);
      this.currentIndex = concatOptions.currentIndex || 0;
      this.loadingClasses = concatOptions.loadingClasses ? `${concatOptions.loadingClasses}`.split(",") : null;
      this.loadingClassesRemove = ((_a = this.loadingClasses) == null ? void 0 : _a[0]) ? this.loadingClasses[0].split(" ") : "opacity-0";
      this.loadingClassesAdd = ((_b = this.loadingClasses) == null ? void 0 : _b[1]) ? this.loadingClasses[1].split(" ") : "";
      this.afterLoadingClassesAdd = ((_c = this.loadingClasses) == null ? void 0 : _c[2]) ? this.loadingClasses[2].split(" ") : "";
      this.isAutoPlay = typeof concatOptions.isAutoPlay !== "undefined" ? concatOptions.isAutoPlay : false;
      this.speed = concatOptions.speed || 4e3;
      this.isInfiniteLoop = typeof concatOptions.isInfiniteLoop !== "undefined" ? concatOptions.isInfiniteLoop : true;
      this.inner = this.el.querySelector(".hs-carousel-body") || null;
      this.slides = this.el.querySelectorAll(".hs-carousel-slide") || [];
      this.prev = this.el.querySelector(".hs-carousel-prev") || null;
      this.next = this.el.querySelector(".hs-carousel-next") || null;
      this.dots = this.el.querySelectorAll(".hs-carousel-pagination > *") || null;
      this.sliderWidth = this.inner.parentElement.clientWidth;
      this.touchX = {
        start: 0,
        end: 0
      };
      this.init();
    }
    init() {
      this.createCollection(window.$hsCarouselCollection, this);
      if (this.inner) {
        this.calculateWidth();
        if (this.loadingClassesRemove) {
          if (typeof this.loadingClassesRemove === "string")
            this.inner.classList.remove(this.loadingClassesRemove);
          else
            this.inner.classList.remove(...this.loadingClassesRemove);
        }
        if (this.loadingClassesAdd) {
          if (typeof this.loadingClassesAdd === "string")
            this.inner.classList.add(this.loadingClassesAdd);
          else
            this.inner.classList.add(...this.loadingClassesAdd);
        }
      }
      if (this.prev)
        this.prev.addEventListener("click", () => {
          this.goToPrev();
          if (this.isAutoPlay) {
            this.resetTimer();
            this.setTimer();
          }
        });
      if (this.next)
        this.next.addEventListener("click", () => {
          this.goToNext();
          if (this.isAutoPlay) {
            this.resetTimer();
            this.setTimer();
          }
        });
      if (this.dots) {
        this.dots.forEach(
          (el, i) => el.addEventListener("click", () => {
            this.goTo(i);
            if (this.isAutoPlay) {
              this.resetTimer();
              this.setTimer();
            }
          })
        );
      }
      if (this.slides.length) {
        this.addCurrentClass();
        if (!this.isInfiniteLoop)
          this.addDisabledClass();
        if (this.isAutoPlay)
          this.autoPlay();
      }
      if (this.inner && this.afterLoadingClassesAdd) {
        setTimeout(() => {
          if (typeof this.afterLoadingClassesAdd === "string")
            this.inner.classList.add(this.afterLoadingClassesAdd);
          else
            this.inner.classList.add(...this.afterLoadingClassesAdd);
        });
      }
      this.el.classList.add("init");
      this.el.addEventListener("touchstart", (evt) => {
        this.touchX.start = evt.changedTouches[0].screenX;
      });
      this.el.addEventListener("touchend", (evt) => {
        this.touchX.end = evt.changedTouches[0].screenX;
        this.detectDirection();
      });
      this.observeResize();
    }
    observeResize() {
      const resizeObserver = new ResizeObserver(() => this.recalculateWidth());
      resizeObserver.observe(document.querySelector("body"));
    }
    calculateWidth() {
      this.inner.style.width = `${this.sliderWidth * this.slides.length}px`;
      this.inner.style.transform = `translate(-${this.currentIndex * this.sliderWidth}px, 0px)`;
      this.slides.forEach((el) => {
        el.style.width = `${this.sliderWidth}px`;
      });
    }
    addCurrentClass() {
      this.slides.forEach((el, i) => {
        if (i === this.currentIndex) {
          el.classList.add("active");
        } else {
          el.classList.remove("active");
        }
      });
      if (this.dots) {
        this.dots.forEach((el, i) => {
          if (i === this.currentIndex) {
            el.classList.add("active");
          } else {
            el.classList.remove("active");
          }
        });
      }
    }
    addDisabledClass() {
      if (!this.prev || !this.next)
        return false;
      if (this.currentIndex === 0) {
        this.next.classList.remove("disabled");
        this.prev.classList.add("disabled");
      } else if (this.currentIndex === this.slides.length - 1) {
        this.prev.classList.remove("disabled");
        this.next.classList.add("disabled");
      } else {
        this.prev.classList.remove("disabled");
        this.next.classList.remove("disabled");
      }
    }
    autoPlay() {
      this.setTimer();
    }
    setTimer() {
      this.timer = setInterval(() => {
        if (this.currentIndex === this.slides.length - 1)
          this.goTo(0);
        else
          this.goToNext();
      }, this.speed);
    }
    resetTimer() {
      clearInterval(this.timer);
    }
    detectDirection() {
      const { start: start2, end: end2 } = this.touchX;
      if (end2 < start2)
        this.goToNext();
      if (end2 > start2)
        this.goToPrev();
    }
    // Public methods
    recalculateWidth() {
      this.sliderWidth = this.inner.parentElement.clientWidth;
      this.calculateWidth();
    }
    goToPrev() {
      if (this.currentIndex === 0 && this.isInfiniteLoop) {
        this.currentIndex = this.slides.length - 1;
        this.inner.style.transform = `translate(-${this.currentIndex * this.sliderWidth}px, 0px)`;
        this.addCurrentClass();
      } else if (this.currentIndex !== 0) {
        this.currentIndex -= 1;
        this.inner.style.transform = `translate(-${this.currentIndex * this.sliderWidth}px, 0px)`;
        this.addCurrentClass();
        this.addDisabledClass();
      }
    }
    goToNext() {
      if (this.currentIndex === this.slides.length - 1 && this.isInfiniteLoop) {
        this.currentIndex = 0;
        this.inner.style.transform = `translate(-${this.currentIndex * this.sliderWidth}px, 0px)`;
        this.addCurrentClass();
      } else if (this.currentIndex < this.slides.length - 1) {
        this.currentIndex += 1;
        this.inner.style.transform = `translate(-${this.currentIndex * this.sliderWidth}px, 0px)`;
        this.addCurrentClass();
        this.addDisabledClass();
      }
    }
    goTo(i) {
      this.currentIndex = i;
      this.inner.style.transform = `translate(-${this.currentIndex * this.sliderWidth}px, 0px)`;
      this.addCurrentClass();
      if (!this.isInfiniteLoop)
        this.addDisabledClass();
    }
    // Static methods
    static getInstance(target, isInstance) {
      const elInCollection = window.$hsCarouselCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element : null;
    }
    static autoInit() {
      if (!window.$hsCarouselCollection)
        window.$hsCarouselCollection = [];
      document.querySelectorAll("[data-hs-carousel]:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsCarouselCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSCarousel(el);
      });
    }
  };
  window.addEventListener("load", () => {
    HSCarousel.autoInit();
  });
  window.addEventListener("resize", () => {
    if (!window.$hsCarouselCollection)
      return false;
    window.$hsCarouselCollection.forEach((el) => {
      el.element.recalculateWidth();
    });
  });
  if (typeof window !== "undefined") {
    window.HSCarousel = HSCarousel;
  }
  var carousel_default = HSCarousel;

  // node_modules/preline/src/plugins/collapse/index.ts
  var HSCollapse = class extends HSBasePlugin {
    constructor(el, options, events) {
      super(el, options, events);
      this.contentId = this.el.dataset.hsCollapse;
      this.content = document.querySelector(this.contentId);
      this.animationInProcess = false;
      if (this.content)
        this.init();
    }
    init() {
      this.createCollection(window.$hsCollapseCollection, this);
      this.el.addEventListener("click", () => {
        if (this.content.classList.contains("open")) {
          this.hide();
        } else {
          this.show();
        }
      });
    }
    hideAllMegaMenuItems() {
      this.content.querySelectorAll(".hs-mega-menu-content.block").forEach((el) => {
        el.classList.remove("block");
        el.classList.add("hidden");
      });
    }
    // Public methods
    show() {
      if (this.animationInProcess || this.el.classList.contains("open"))
        return false;
      this.animationInProcess = true;
      this.el.classList.add("open");
      this.content.classList.add("open");
      this.content.classList.remove("hidden");
      this.content.style.height = "0";
      setTimeout(() => {
        this.content.style.height = `${this.content.scrollHeight}px`;
        this.fireEvent("beforeOpen", this.el);
        dispatch("beforeOpen.hs.collapse", this.el, this.el);
      });
      afterTransition(this.content, () => {
        this.content.style.height = "";
        this.fireEvent("open", this.el);
        dispatch("open.hs.collapse", this.el, this.el);
        this.animationInProcess = false;
      });
    }
    hide() {
      if (this.animationInProcess || !this.el.classList.contains("open"))
        return false;
      this.animationInProcess = true;
      this.el.classList.remove("open");
      this.content.style.height = `${this.content.scrollHeight}px`;
      setTimeout(() => {
        this.content.style.height = "0";
      });
      this.content.classList.remove("open");
      afterTransition(this.content, () => {
        this.content.classList.add("hidden");
        this.content.style.height = "";
        this.fireEvent("hide", this.el);
        dispatch("hide.hs.collapse", this.el, this.el);
        this.animationInProcess = false;
      });
      if (this.content.querySelectorAll(".hs-mega-menu-content.block").length) {
        this.hideAllMegaMenuItems();
      }
    }
    // Static methods
    static getInstance(target, isInstance = false) {
      const elInCollection = window.$hsCollapseCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element.el : null;
    }
    static autoInit() {
      if (!window.$hsCollapseCollection)
        window.$hsCollapseCollection = [];
      document.querySelectorAll(".hs-collapse-toggle:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsCollapseCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSCollapse(el);
      });
    }
    static show(target) {
      const elInCollection = window.$hsCollapseCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection && elInCollection.element.content.classList.contains("hidden"))
        elInCollection.element.show();
    }
    static hide(target) {
      const elInCollection = window.$hsCollapseCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection && !elInCollection.element.content.classList.contains("hidden"))
        elInCollection.element.hide();
    }
    // Backward compatibility
    static on(evt, target, cb) {
      const elInCollection = window.$hsCollapseCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection)
        elInCollection.element.events[evt] = cb;
    }
  };
  window.addEventListener("load", () => {
    HSCollapse.autoInit();
  });
  if (typeof window !== "undefined") {
    window.HSCollapse = HSCollapse;
  }
  var collapse_default = HSCollapse;

  // node_modules/preline/src/constants.ts
  var POSITIONS = {
    auto: "auto",
    "auto-start": "auto-start",
    "auto-end": "auto-end",
    top: "top",
    "top-left": "top-start",
    "top-right": "top-end",
    bottom: "bottom",
    "bottom-left": "bottom-start",
    "bottom-right": "bottom-end",
    right: "right",
    "right-start": "right-start",
    "right-end": "right-end",
    left: "left",
    "left-start": "left-start",
    "left-end": "left-end"
  };
  var DROPDOWN_ACCESSIBILITY_KEY_SET = [
    "Escape",
    "ArrowUp",
    "ArrowDown",
    "Home",
    "End",
    "Enter"
  ];
  var TABS_ACCESSIBILITY_KEY_SET = [
    "ArrowUp",
    "ArrowLeft",
    "ArrowDown",
    "ArrowRight",
    "Home",
    "End"
  ];
  var SELECT_ACCESSIBILITY_KEY_SET = [
    "ArrowUp",
    "ArrowLeft",
    "ArrowDown",
    "ArrowRight",
    "Home",
    "End",
    "Escape",
    "Enter",
    "Tab"
  ];
  var COMBO_BOX_ACCESSIBILITY_KEY_SET = [
    "ArrowUp",
    "ArrowLeft",
    "ArrowDown",
    "ArrowRight",
    "Home",
    "End",
    "Escape",
    "Enter"
  ];
  var BREAKPOINTS = {
    sm: 640,
    md: 768,
    lg: 1024,
    xl: 1280,
    "2xl": 1536
  };

  // node_modules/preline/src/plugins/combobox/index.ts
  var HSComboBox = class extends HSBasePlugin {
    constructor(el, options) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v;
      super(el, options);
      const data = el.getAttribute("data-hs-combo-box");
      const dataOptions = data ? JSON.parse(data) : {};
      const concatOptions = __spreadValues(__spreadValues({}, dataOptions), options);
      this.gap = 5;
      this.viewport = (_a = typeof (concatOptions == null ? void 0 : concatOptions.viewport) === "string" ? document.querySelector(concatOptions == null ? void 0 : concatOptions.viewport) : concatOptions == null ? void 0 : concatOptions.viewport) != null ? _a : null;
      this.preventVisibility = (_b = concatOptions == null ? void 0 : concatOptions.preventVisibility) != null ? _b : false;
      this.apiUrl = (_c = concatOptions == null ? void 0 : concatOptions.apiUrl) != null ? _c : null;
      this.apiDataPart = (_d = concatOptions == null ? void 0 : concatOptions.apiDataPart) != null ? _d : null;
      this.apiQuery = (_e = concatOptions == null ? void 0 : concatOptions.apiQuery) != null ? _e : null;
      this.apiSearchQuery = (_f = concatOptions == null ? void 0 : concatOptions.apiSearchQuery) != null ? _f : null;
      this.apiHeaders = (_g = concatOptions == null ? void 0 : concatOptions.apiHeaders) != null ? _g : {};
      this.apiGroupField = (_h = concatOptions == null ? void 0 : concatOptions.apiGroupField) != null ? _h : null;
      this.outputItemTemplate = (_i = concatOptions == null ? void 0 : concatOptions.outputItemTemplate) != null ? _i : `<div class="cursor-pointer py-2 px-4 w-full text-sm text-gray-800 hover:bg-gray-100 rounded-lg focus:outline-none focus:bg-gray-100 dark:bg-slate-900 dark:hover:bg-slate-800 dark:text-gray-200 dark:focus:bg-slate-800" data-hs-combo-box-output-item>
			<div class="flex justify-between items-center w-full">
				<span data-hs-combo-box-search-text></span>
				<span class="hidden hs-combo-box-selected:block">
					<svg class="flex-shrink-0 size-3.5 text-blue-600 dark:text-blue-500" xmlns="http:.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
						<polyline points="20 6 9 17 4 12"></polyline>
					</svg>
				</span>
			</div>
		</div>`;
      this.outputEmptyTemplate = (_j = concatOptions == null ? void 0 : concatOptions.outputEmptyTemplate) != null ? _j : `<div class="py-2 px-4 w-full text-sm text-gray-800 rounded-lg dark:bg-slate-900 dark:text-gray-200">Nothing found...</div>`;
      this.outputLoaderTemplate = (_k = concatOptions == null ? void 0 : concatOptions.outputLoaderTemplate) != null ? _k : `<div class="flex justify-center items-center py-2 px-4 text-sm text-gray-800 rounded-lg bg-white dark:bg-slate-900 dark:text-gray-200">
				<div class="animate-spin inline-block size-6 border-[3px] border-current border-t-transparent text-blue-600 rounded-full dark:text-blue-500" role="status" aria-label="loading">
					<span class="sr-only">Loading...</span>
				</div>
			</div>`;
      this.groupingType = (_l = concatOptions == null ? void 0 : concatOptions.groupingType) != null ? _l : null;
      this.groupingTitleTemplate = (_m = concatOptions == null ? void 0 : concatOptions.groupingTitleTemplate) != null ? _m : this.groupingType === "default" ? `<div class="block mb-1 text-xs font-semibold uppercase text-blue-600 dark:text-blue-500"></div>` : `<button type="button" class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-semibold whitespace-nowrap rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none"></button>`;
      this.tabsWrapperTemplate = (_n = concatOptions == null ? void 0 : concatOptions.tabsWrapperTemplate) != null ? _n : `<div class="overflow-x-auto p-4"></div>`;
      this.preventSelection = (_o = concatOptions == null ? void 0 : concatOptions.preventSelection) != null ? _o : false;
      this.isOpenOnFocus = (_p = concatOptions == null ? void 0 : concatOptions.isOpenOnFocus) != null ? _p : false;
      this.input = (_q = this.el.querySelector("[data-hs-combo-box-input]")) != null ? _q : null;
      this.output = (_r = this.el.querySelector("[data-hs-combo-box-output]")) != null ? _r : null;
      this.itemsWrapper = (_s = this.el.querySelector("[data-hs-combo-box-output-items-wrapper]")) != null ? _s : null;
      this.items = (_t = Array.from(this.el.querySelectorAll("[data-hs-combo-box-output-item]"))) != null ? _t : [];
      this.tabs = [];
      this.toggle = (_u = this.el.querySelector("[data-hs-combo-box-toggle]")) != null ? _u : null;
      this.outputPlaceholder = null;
      this.selected = this.value = (_v = this.el.querySelector("[data-hs-combo-box-input]").value) != null ? _v : "";
      this.isOpened = false;
      this.isCurrent = false;
      this.animationInProcess = false;
      this.selectedGroup = "all";
      this.init();
    }
    init() {
      this.createCollection(window.$hsComboBoxCollection, this);
      this.build();
    }
    build() {
      this.buildInput();
      if (this.groupingType)
        this.setGroups();
      this.buildItems();
      if (this.preventVisibility) {
        this.isOpened = true;
        this.recalculateDirection();
      }
      if (this.toggle)
        this.buildToggle();
    }
    setResultAndRender(value = "") {
      this.setResults(value);
      if (this.apiSearchQuery)
        this.itemsFromJson();
    }
    buildInput() {
      if (this.isOpenOnFocus) {
        this.input.addEventListener("focus", () => {
          if (!this.isOpened) {
            this.setResultAndRender();
            this.open();
          }
        });
      }
      this.input.addEventListener(
        "input",
        debounce((evt) => {
          this.setResultAndRender(evt.target.value);
          if (!this.isOpened)
            this.open();
        })
      );
    }
    buildItems() {
      if (this.apiUrl)
        this.itemsFromJson();
      else {
        if (this.itemsWrapper)
          this.itemsWrapper.innerHTML = "";
        else
          this.output.innerHTML = "";
        this.itemsFromHtml();
      }
    }
    setResults(val) {
      this.value = val;
      this.resultItems();
      if (this.hasVisibleItems())
        this.destroyOutputPlaceholder();
      else
        this.buildOutputPlaceholder();
    }
    isItemExists(obj) {
      return this.items.some(
        (el) => Array.from(el.querySelectorAll("[data-hs-combo-box-search-text]")).some(
          (elI) => elI.getAttribute("data-hs-combo-box-search-text") === obj[elI.getAttribute("data-hs-combo-box-output-item-field")]
        )
      );
    }
    isTextExists(el, val) {
      const lowerCased = val.map((v) => v.toLowerCase());
      return Array.from(
        el.querySelectorAll("[data-hs-combo-box-search-text]")
      ).some(
        (elI) => lowerCased.includes(
          elI.getAttribute("data-hs-combo-box-search-text").toLowerCase()
        )
      );
    }
    isTextExistsAny(el, val) {
      return Array.from(
        el.querySelectorAll("[data-hs-combo-box-search-text]")
      ).some(
        (elI) => elI.getAttribute("data-hs-combo-box-search-text").toLowerCase().includes(val.toLowerCase())
      );
    }
    valuesBySelector(el) {
      return Array.from(
        el.querySelectorAll("[data-hs-combo-box-search-text]")
      ).reduce(
        (acc, cur) => [
          ...acc,
          cur.getAttribute("data-hs-combo-box-search-text")
        ],
        []
      );
    }
    buildOutputLoader() {
      if (this.outputLoader)
        return false;
      this.outputLoader = htmlToElement(this.outputLoaderTemplate);
      if (this.items.length || this.outputPlaceholder) {
        this.outputLoader.style.position = "absolute";
        this.outputLoader.style.top = "0";
        this.outputLoader.style.bottom = "0";
        this.outputLoader.style.left = "0";
        this.outputLoader.style.right = "0";
        this.outputLoader.style.zIndex = "2";
      } else {
        this.outputLoader.style.position = "";
        this.outputLoader.style.top = "";
        this.outputLoader.style.bottom = "";
        this.outputLoader.style.left = "";
        this.outputLoader.style.right = "";
        this.outputLoader.style.zIndex = "";
        this.outputLoader.style.height = "30px";
      }
      this.output.append(this.outputLoader);
    }
    destroyOutputLoader() {
      if (this.outputLoader)
        this.outputLoader.remove();
      this.outputLoader = null;
    }
    async itemsFromJson() {
      this.buildOutputLoader();
      try {
        const query = `${this.apiQuery}`;
        const searchQuery = `${this.apiSearchQuery}=${this.value.toLowerCase()}`;
        let url = this.apiUrl;
        if (this.apiQuery && this.apiSearchQuery) {
          url += `?${searchQuery}&${query}`;
        } else if (this.apiQuery) {
          url += `?${query}`;
        } else if (this.apiSearchQuery) {
          url += `?${searchQuery}`;
        }
        const res = await fetch(url, this.apiHeaders);
        let items = await res.json();
        if (this.apiDataPart) {
          items = items[this.apiDataPart];
        }
        if (this.apiSearchQuery) {
          this.items = [];
        }
        if (this.itemsWrapper) {
          this.itemsWrapper.innerHTML = "";
        } else {
          this.output.innerHTML = "";
        }
        if (this.groupingType === "tabs") {
          this.setApiGroups(items);
          this.groupTabsRender();
          this.jsonItemsRender(items);
        } else if (this.groupingType === "default") {
          this.setApiGroups(items);
          this.groups.forEach((el) => {
            const title = htmlToElement(this.groupingTitleTemplate);
            title.setAttribute("data-hs-combo-box-group-title", el.name);
            title.classList.add("--exclude-accessibility");
            title.innerText = el.title;
            const newItems = items.filter(
              (i) => i[this.apiGroupField] === el.name
            );
            if (this.itemsWrapper)
              this.itemsWrapper.append(title);
            else
              this.output.append(title);
            this.jsonItemsRender(newItems);
          });
        } else {
          this.jsonItemsRender(items);
        }
        this.setResults(this.input.value);
      } catch (err) {
        console.error(err);
      }
      this.destroyOutputLoader();
    }
    jsonItemsRender(items) {
      items.forEach((item, index) => {
        if (this.isItemExists(item))
          return false;
        const newItem = htmlToElement(this.outputItemTemplate);
        newItem.querySelectorAll("[data-hs-combo-box-search-text]").forEach((el) => {
          var _a, _b;
          el.textContent = (_a = item[el.getAttribute("data-hs-combo-box-output-item-field")]) != null ? _a : "";
          el.setAttribute(
            "data-hs-combo-box-search-text",
            (_b = item[el.getAttribute("data-hs-combo-box-output-item-field")]) != null ? _b : ""
          );
        });
        newItem.querySelectorAll("[data-hs-combo-box-output-item-attr]").forEach((el) => {
          const attributes = JSON.parse(
            el.getAttribute("data-hs-combo-box-output-item-attr")
          );
          attributes.forEach((attr) => {
            el.setAttribute(attr.attr, item[attr.valueFrom]);
          });
        });
        newItem.setAttribute("tabIndex", `${index}`);
        if (this.groupingType === "tabs" || this.groupingType === "default") {
          newItem.setAttribute(
            "data-hs-combo-box-output-item",
            `{"group": {"name": "${item[this.apiGroupField]}", "title": "${item[this.apiGroupField]}"}}`
          );
        }
        this.items = [...this.items, newItem];
        if (!this.preventSelection) {
          newItem.addEventListener("click", () => {
            this.close(
              newItem.querySelector("[data-hs-combo-box-value]").getAttribute("data-hs-combo-box-search-text")
            );
            this.setSelectedByValue(this.valuesBySelector(newItem));
          });
        }
        this.appendItemsToWrapper(newItem);
      });
    }
    setGroups() {
      const groups = [];
      this.items.forEach((item) => {
        const { group } = JSON.parse(
          item.getAttribute("data-hs-combo-box-output-item")
        );
        if (!groups.some((el) => (el == null ? void 0 : el.name) === group.name)) {
          groups.push(group);
        }
      });
      this.groups = groups;
    }
    setCurrent() {
      if (window.$hsComboBoxCollection.length) {
        window.$hsComboBoxCollection.map((el) => el.element.isCurrent = false);
        this.isCurrent = true;
      }
    }
    setApiGroups(items) {
      const groups = [];
      items.forEach((item) => {
        const group = item[this.apiGroupField];
        if (!groups.some((el) => el.name === group)) {
          groups.push({
            name: group,
            title: group
          });
        }
      });
      this.groups = groups;
    }
    sortItems() {
      const compareFn = (i1, i2) => {
        const a = i1.querySelector("[data-hs-combo-box-value]").getAttribute("data-hs-combo-box-search-text");
        const b = i2.querySelector("[data-hs-combo-box-value]").getAttribute("data-hs-combo-box-search-text");
        if (a < b) {
          return -1;
        } else if (a > b) {
          return 1;
        }
        return 0;
      };
      return this.items.sort(compareFn);
    }
    itemRender(item) {
      const val = item.querySelector("[data-hs-combo-box-value]").getAttribute("data-hs-combo-box-search-text");
      if (this.itemsWrapper)
        this.itemsWrapper.append(item);
      else
        this.output.append(item);
      if (!this.preventSelection) {
        item.addEventListener("click", () => {
          this.close(val);
          this.setSelectedByValue(this.valuesBySelector(item));
        });
      }
    }
    plainRender(items) {
      items.forEach((item) => {
        this.itemRender(item);
      });
    }
    groupTabsRender() {
      const tabsScroll = htmlToElement(this.tabsWrapperTemplate);
      const tabsWrapper = htmlToElement(
        `<div class="flex flex-nowrap gap-x-2"></div>`
      );
      tabsScroll.append(tabsWrapper);
      this.output.insertBefore(tabsScroll, this.output.firstChild);
      const tabDef = htmlToElement(this.groupingTitleTemplate);
      tabDef.setAttribute("data-hs-combo-box-group-title", "all");
      tabDef.classList.add("--exclude-accessibility", "active");
      tabDef.innerText = "All";
      this.tabs = [...this.tabs, tabDef];
      tabsWrapper.append(tabDef);
      tabDef.addEventListener("click", () => {
        this.selectedGroup = "all";
        const selectedTab = this.tabs.find(
          (elI) => elI.getAttribute("data-hs-combo-box-group-title") === this.selectedGroup
        );
        this.tabs.forEach((el) => el.classList.remove("active"));
        selectedTab.classList.add("active");
        this.setItemsVisibility();
      });
      this.groups.forEach((el) => {
        const tab = htmlToElement(this.groupingTitleTemplate);
        tab.setAttribute("data-hs-combo-box-group-title", el.name);
        tab.classList.add("--exclude-accessibility");
        tab.innerText = el.title;
        this.tabs = [...this.tabs, tab];
        tabsWrapper.append(tab);
        tab.addEventListener("click", () => {
          this.selectedGroup = el.name;
          const selectedTab = this.tabs.find(
            (elI) => elI.getAttribute("data-hs-combo-box-group-title") === this.selectedGroup
          );
          this.tabs.forEach((el2) => el2.classList.remove("active"));
          selectedTab.classList.add("active");
          this.setItemsVisibility();
        });
      });
    }
    groupDefaultRender() {
      this.groups.forEach((el) => {
        const title = htmlToElement(this.groupingTitleTemplate);
        title.setAttribute("data-hs-combo-box-group-title", el.name);
        title.classList.add("--exclude-accessibility");
        title.innerText = el.title;
        if (this.itemsWrapper)
          this.itemsWrapper.append(title);
        else
          this.output.append(title);
        const items = this.sortItems().filter((f) => {
          const { group } = JSON.parse(
            f.getAttribute("data-hs-combo-box-output-item")
          );
          return group.name === el.name;
        });
        this.plainRender(items);
      });
    }
    itemsFromHtml() {
      if (this.groupingType === "default") {
        this.groupDefaultRender();
      } else if (this.groupingType === "tabs") {
        const items = this.sortItems();
        this.groupTabsRender();
        this.plainRender(items);
      } else {
        const items = this.sortItems();
        this.plainRender(items);
      }
      this.setResults(this.input.value);
    }
    buildToggle() {
      this.toggle.addEventListener("click", () => {
        if (this.isOpened)
          this.close();
        else
          this.open(this.toggle.getAttribute("data-hs-combo-box-toggle"));
      });
    }
    setSelectedByValue(val) {
      this.items.forEach((el) => {
        if (this.isTextExists(el, val))
          el.classList.add("selected");
        else
          el.classList.remove("selected");
      });
    }
    setValue(val) {
      this.selected = val;
      this.value = val;
      this.input.value = val;
    }
    setItemsVisibility() {
      if (this.groupingType === "tabs" && this.selectedGroup !== "all") {
        this.items.forEach((item) => {
          item.style.display = "none";
        });
      }
      const items = this.groupingType === "tabs" ? this.selectedGroup === "all" ? this.items : this.items.filter((f) => {
        const { group } = JSON.parse(
          f.getAttribute("data-hs-combo-box-output-item")
        );
        return group.name === this.selectedGroup;
      }) : this.items;
      if (this.groupingType === "tabs" && this.selectedGroup !== "all") {
        items.forEach((item) => {
          item.style.display = "block";
        });
      }
      items.forEach((item) => {
        if (!this.isTextExistsAny(item, this.value))
          item.style.display = "none";
        else
          item.style.display = "block";
      });
      if (this.groupingType === "default") {
        this.output.querySelectorAll("[data-hs-combo-box-group-title]").forEach((el) => {
          const g = el.getAttribute("data-hs-combo-box-group-title");
          const items2 = this.items.filter((f) => {
            const { group } = JSON.parse(
              f.getAttribute("data-hs-combo-box-output-item")
            );
            return group.name === g && f.style.display === "block";
          });
          if (items2.length)
            el.style.display = "block";
          else
            el.style.display = "none";
        });
      }
    }
    hasVisibleItems() {
      return this.items.length ? this.items.some((el) => el.style.display === "block") : false;
    }
    appendItemsToWrapper(item) {
      if (this.itemsWrapper) {
        this.itemsWrapper.append(item);
      } else {
        this.output.append(item);
      }
    }
    buildOutputPlaceholder() {
      if (!this.outputPlaceholder)
        this.outputPlaceholder = htmlToElement(this.outputEmptyTemplate);
      this.appendItemsToWrapper(this.outputPlaceholder);
    }
    destroyOutputPlaceholder() {
      if (this.outputPlaceholder)
        this.outputPlaceholder.remove();
      this.outputPlaceholder = null;
    }
    resultItems() {
      if (!this.items.length)
        return false;
      this.setItemsVisibility();
      this.setSelectedByValue([this.selected]);
    }
    // Public methods
    setValueAndOpen(val) {
      this.value = val;
      if (this.items.length) {
        this.setItemsVisibility();
      }
    }
    open(val) {
      if (this.animationInProcess)
        return false;
      if (typeof val !== "undefined")
        this.setValueAndOpen(val);
      if (this.preventVisibility)
        return false;
      this.animationInProcess = true;
      this.output.style.display = "block";
      this.recalculateDirection();
      setTimeout(() => {
        this.el.classList.add("active");
        this.animationInProcess = false;
      });
      this.isOpened = true;
    }
    setValueAndClear(val) {
      if (val)
        this.setValue(val);
      else
        this.setValue(this.selected);
      if (this.outputPlaceholder)
        this.destroyOutputPlaceholder();
    }
    close(val) {
      if (this.animationInProcess)
        return false;
      if (this.preventVisibility) {
        this.setValueAndClear(val);
        return false;
      }
      this.animationInProcess = true;
      this.el.classList.remove("active");
      this.output.classList.remove("bottom-full", "top-full");
      this.output.style.marginTop = "";
      this.output.style.marginBottom = "";
      afterTransition(this.output, () => {
        this.output.style.display = "none";
        this.setValueAndClear(val);
        this.animationInProcess = false;
      });
      this.isOpened = false;
    }
    recalculateDirection() {
      if (isEnoughSpace(
        this.output,
        this.input,
        "bottom",
        this.gap,
        this.viewport
      )) {
        this.output.classList.remove("bottom-full");
        this.output.style.marginBottom = "";
        this.output.classList.add("top-full");
        this.output.style.marginTop = `${this.gap}px`;
      } else {
        this.output.classList.remove("top-full");
        this.output.style.marginTop = "";
        this.output.classList.add("bottom-full");
        this.output.style.marginBottom = `${this.gap}px`;
      }
    }
    // Static methods
    static getInstance(target, isInstance) {
      const elInCollection = window.$hsComboBoxCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element : null;
    }
    static autoInit() {
      if (!window.$hsComboBoxCollection)
        window.$hsComboBoxCollection = [];
      document.querySelectorAll("[data-hs-combo-box]:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsComboBoxCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        )) {
          const data = el.getAttribute("data-hs-combo-box");
          const options = data ? JSON.parse(data) : {};
          new HSComboBox(el, options);
        }
      });
      if (window.$hsComboBoxCollection) {
        window.addEventListener("click", (evt) => {
          const evtTarget = evt.target;
          HSComboBox.closeCurrentlyOpened(evtTarget);
        });
        document.addEventListener(
          "keydown",
          (evt) => HSComboBox.accessibility(evt)
        );
      }
    }
    static close(target) {
      const elInCollection = window.$hsComboBoxCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection && elInCollection.element.isOpened) {
        elInCollection.element.close();
      }
    }
    static closeCurrentlyOpened(evtTarget = null) {
      if (!evtTarget.closest("[data-hs-combo-box].active")) {
        const currentlyOpened = window.$hsComboBoxCollection.filter((el) => el.element.isOpened) || null;
        if (currentlyOpened) {
          currentlyOpened.forEach((el) => {
            el.element.close();
          });
        }
      }
    }
    // Accessibility methods
    static getPreparedItems(isReversed = false, output) {
      if (!output)
        return null;
      const preparedItems = isReversed ? Array.from(
        output.querySelectorAll(":scope > *:not(.--exclude-accessibility)")
      ).filter((el) => el.style.display !== "none").reverse() : Array.from(
        output.querySelectorAll(":scope > *:not(.--exclude-accessibility)")
      ).filter((el) => el.style.display !== "none");
      const items = preparedItems.filter(
        (el) => !el.classList.contains("disabled")
      );
      return items;
    }
    static setHighlighted(prev, current, input) {
      current.focus();
      input.value = current.querySelector("[data-hs-combo-box-value]").getAttribute("data-hs-combo-box-search-text");
      if (prev)
        prev.classList.remove("hs-combo-box-output-item-highlighted");
      current.classList.add("hs-combo-box-output-item-highlighted");
    }
    static accessibility(evt) {
      const target = window.$hsComboBoxCollection.find(
        (el) => el.element.isOpened
      );
      if (target && COMBO_BOX_ACCESSIBILITY_KEY_SET.includes(evt.code) && !evt.metaKey) {
        switch (evt.code) {
          case "Escape":
            evt.preventDefault();
            this.onEscape();
            break;
          case "ArrowUp":
            evt.preventDefault();
            this.onArrow();
            break;
          case "ArrowDown":
            evt.preventDefault();
            this.onArrow(false);
            break;
          case "Home":
            evt.preventDefault();
            this.onStartEnd();
            break;
          case "End":
            evt.preventDefault();
            this.onStartEnd(false);
            break;
          case "Enter":
            evt.preventDefault();
            this.onEnter(evt);
            break;
          default:
            break;
        }
      }
    }
    static onEscape() {
      const target = window.$hsComboBoxCollection.find(
        (el) => !el.element.preventVisibility && el.element.isOpened
      );
      if (target) {
        target.element.close();
        target.element.input.blur();
      }
    }
    static onArrow(isArrowUp = true) {
      var _a;
      const target = window.$hsComboBoxCollection.find(
        (el) => el.element.preventVisibility ? el.element.isCurrent : el.element.isOpened
      );
      if (target) {
        const output = (_a = target.element.itemsWrapper) != null ? _a : target.element.output;
        if (!output)
          return false;
        const items = HSComboBox.getPreparedItems(isArrowUp, output);
        const current = output.querySelector(
          ".hs-combo-box-output-item-highlighted"
        );
        let currentItem = null;
        if (!current)
          items[0].classList.add("hs-combo-box-output-item-highlighted");
        let currentInd = items.findIndex((el) => el === current);
        if (currentInd + 1 < items.length)
          currentInd++;
        currentItem = items[currentInd];
        HSComboBox.setHighlighted(current, currentItem, target.element.input);
      }
    }
    static onStartEnd(isStart = true) {
      var _a;
      const target = window.$hsComboBoxCollection.find(
        (el) => el.element.preventVisibility ? el.element.isCurrent : el.element.isOpened
      );
      if (target) {
        const output = (_a = target.element.itemsWrapper) != null ? _a : target.element.output;
        if (!output)
          return false;
        const items = HSComboBox.getPreparedItems(isStart, output);
        const current = output.querySelector(
          ".hs-combo-box-output-item-highlighted"
        );
        if (items.length)
          HSComboBox.setHighlighted(
            current,
            items[0],
            target.element.input
          );
      }
    }
    static onEnter(evt) {
      const target = evt.target;
      const opened = window.$hsComboBoxCollection.find(
        // ::TEST !el.element.preventVisibility && el.element.isOpened
        (el) => !isParentOrElementHidden(el.element.el) && el.element.isOpened
      );
      const link = opened.element.el.querySelector("a");
      if (target.hasAttribute("data-hs-combo-box-input")) {
        opened.element.close();
        target.blur();
      } else {
        if (!opened.element.preventSelection)
          opened.element.setSelectedByValue(
            opened.element.valuesBySelector(evt.target)
          );
        if (opened.element.preventSelection && link)
          window.location.assign(link.getAttribute("href"));
        opened.element.close(
          !opened.element.preventSelection ? evt.target.querySelector("[data-hs-combo-box-value]").getAttribute("data-hs-combo-box-search-text") : null
        );
      }
    }
  };
  window.addEventListener("load", () => {
    HSComboBox.autoInit();
  });
  document.addEventListener("scroll", () => {
    if (!window.$hsComboBoxCollection)
      return false;
    const target = window.$hsComboBoxCollection.find((el) => el.element.isOpened);
    if (target)
      target.element.recalculateDirection();
  });
  if (typeof window !== "undefined") {
    window.HSComboBox = HSComboBox;
  }
  var combobox_default = HSComboBox;

  // node_modules/@popperjs/core/lib/enums.js
  var top2 = "top";
  var bottom2 = "bottom";
  var right = "right";
  var left = "left";
  var auto = "auto";
  var basePlacements = [top2, bottom2, right, left];
  var start = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  // node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== "[object Window]") {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
  }

  // node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  function isShadowRoot(node) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style = styleProperties.reduce(function(style2, property) {
          style2[property] = "";
          return style2;
        }, {});
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect,
    requires: ["computeStyles"]
  };

  // node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }

  // node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  // node_modules/@popperjs/core/lib/utils/userAgent.js
  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
      }).join(" ");
    }
    return navigator.userAgent;
  }

  // node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  // node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width,
      height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width,
      height
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        }
        next = next.parentNode || next.host;
      } while (next);
    }
    return false;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle2(element) {
    return getWindow(element).getComputedStyle(element);
  }

  // node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : (
      // $FlowFixMe[prop-missing]
      element.document
    )) || window.document).documentElement;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element)
    );
  }

  // node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle2(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
      var elementCss = getComputedStyle2(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle2(currentNode);
      if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // node_modules/@popperjs/core/lib/utils/within.js
  function within(min2, value, max2) {
    return max(min2, min(value, max2));
  }
  function withinMaxClamp(min2, value, max2) {
    var v = within(min2, value, max2);
    return v > max2 ? max2 : v;
  }

  // node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  // node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = function toPaddingObject2(padding, state) {
    padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top2 : left;
    var maxProp = axis === "y" ? bottom2 : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset2 = within(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
  }
  function effect2(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }
    state.elements.arrow = arrowElement;
  }
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect2,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }

  // node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x, y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y
    }) : {
      x,
      y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top2;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow(popper2)) {
        offsetParent = getDocumentElement(popper2);
        if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top2 || (placement === left || placement === right) && variation === end) {
        sideY = bottom2;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
          // $FlowFixMe[prop-missing]
          offsetParent[heightProp]
        );
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top2 || placement === bottom2) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
          // $FlowFixMe[prop-missing]
          offsetParent[widthProp]
        );
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x,
      y
    }, getWindow(popper2)) : {
      x,
      y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect3(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect: effect3,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash[matched];
    });
  }

  // node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash2 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash2[matched];
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop2 = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop: scrollTop2
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html2 = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html2.clientWidth;
    var height = html2.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x + getWindowScrollBarX(element),
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html2 = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html2.scrollWidth, html2.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html2.scrollHeight, html2.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle2(body || html2).direction === "rtl") {
      x += max(html2.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width,
      height,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle2(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent(node) {
    if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }
    return getScrollParent(getParentNode(node));
  }

  // node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : (
      // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)))
    );
  }

  // node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top2:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom2:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset2 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right, bottom2].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top2, bottom2].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset2[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements2.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements2;
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
      return overflows[a] - overflows[b];
    });
  }

  // node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for (var i = 0; i < placements2.length; i++) {
      var placement = placements2[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top2, bottom2].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom2 : top2;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements2.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break")
          break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top2, right, bottom2, left].some(function(side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset2) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top2].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
      placement
    })) : offset2, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  }
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }

  // node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top2 : left;
      var altSide = mainAxis === "y" ? bottom2 : right;
      var len = mainAxis === "y" ? "height" : "width";
      var offset2 = popperOffsets2[mainAxis];
      var min2 = offset2 + overflow[mainSide];
      var max2 = offset2 - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset2 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top2 : left;
      var _altSide = mainAxis === "x" ? bottom2 : right;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top2, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  // node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order(modifiers) {
    var map = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  // node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce2(fn2) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn2());
          });
        });
      }
      return pending;
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }

  // node_modules/@popperjs/core/lib/createPopper.js
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper2(reference2, popper2, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options2);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
            popper: listScrollParents(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn2 === "function") {
              state = fn2({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce2(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref) {
          var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
          if (typeof effect4 === "function") {
            var cleanupFn = effect4({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn2) {
          return fn2();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }

  // node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
  var createPopper = /* @__PURE__ */ popperGenerator({
    defaultModifiers
  });

  // node_modules/preline/src/plugins/dropdown/index.ts
  var HSDropdown = class extends HSBasePlugin {
    constructor(el, options, events) {
      super(el, options, events);
      this.toggle = this.el.querySelector(":scope > .hs-dropdown-toggle") || this.el.children[0];
      this.menu = this.el.querySelector(":scope > .hs-dropdown-menu");
      this.eventMode = getClassProperty(this.el, "--trigger", "click");
      this.closeMode = getClassProperty(this.el, "--auto-close", "true");
      this.animationInProcess = false;
      if (this.toggle && this.menu)
        this.init();
    }
    init() {
      this.createCollection(window.$hsDropdownCollection, this);
      if (this.toggle.disabled)
        return false;
      this.toggle.addEventListener("click", () => this.onClickHandler());
      if (!isIOS() && !isIpadOS()) {
        this.el.addEventListener("mouseenter", () => this.onMouseEnterHandler());
        this.el.addEventListener("mouseleave", () => this.onMouseLeaveHandler());
      }
    }
    resizeHandler() {
      this.eventMode = getClassProperty(this.el, "--trigger", "click");
    }
    onClickHandler() {
      if (this.el.classList.contains("open") && !this.menu.classList.contains("hidden")) {
        this.close();
      } else {
        this.open();
      }
    }
    onMouseEnterHandler() {
      if (this.eventMode !== "hover")
        return false;
      if (this.el._popper)
        this.forceClearState();
      if (!this.el.classList.contains("open") && this.menu.classList.contains("hidden")) {
        this.open();
      }
    }
    onMouseLeaveHandler() {
      if (this.eventMode !== "hover")
        return false;
      if (this.el.classList.contains("open") && !this.menu.classList.contains("hidden")) {
        this.close();
      }
    }
    destroyPopper() {
      this.menu.classList.remove("block");
      this.menu.classList.add("hidden");
      this.menu.style.inset = null;
      this.menu.style.position = null;
      if (this.el && this.el._popper)
        this.el._popper.destroy();
      this.animationInProcess = false;
    }
    absoluteStrategyModifiers() {
      return [
        {
          name: "applyStyles",
          fn: (data) => {
            const strategy = (window.getComputedStyle(this.el).getPropertyValue("--strategy") || "absolute").replace(" ", "");
            const adaptive = (window.getComputedStyle(this.el).getPropertyValue("--adaptive") || "adaptive").replace(" ", "");
            data.state.elements.popper.style.position = strategy;
            data.state.elements.popper.style.transform = adaptive === "adaptive" ? data.state.styles.popper.transform : null;
            data.state.elements.popper.style.top = null;
            data.state.elements.popper.style.bottom = null;
            data.state.elements.popper.style.left = null;
            data.state.elements.popper.style.right = null;
            data.state.elements.popper.style.margin = 0;
          }
        },
        {
          name: "computeStyles",
          options: {
            adaptive: false
          }
        }
      ];
    }
    // Public methods
    open() {
      if (this.el.classList.contains("open"))
        return false;
      if (this.animationInProcess)
        return false;
      this.animationInProcess = true;
      const placement = (window.getComputedStyle(this.el).getPropertyValue("--placement") || "").replace(" ", "");
      const flip2 = (window.getComputedStyle(this.el).getPropertyValue("--flip") || "true").replace(" ", "");
      const strategy = (window.getComputedStyle(this.el).getPropertyValue("--strategy") || "fixed").replace(" ", "");
      const offset2 = parseInt(
        (window.getComputedStyle(this.el).getPropertyValue("--offset") || "10").replace(" ", "")
      );
      if (strategy !== "static") {
        this.el._popper = createPopper(this.el, this.menu, {
          placement: POSITIONS[placement] || "bottom-start",
          strategy,
          modifiers: [
            ...strategy !== "fixed" ? this.absoluteStrategyModifiers() : [],
            {
              name: "flip",
              enabled: flip2 === "true"
            },
            {
              name: "offset",
              options: {
                offset: [0, offset2]
              }
            }
          ]
        });
      }
      this.menu.style.margin = null;
      this.menu.classList.remove("hidden");
      this.menu.classList.add("block");
      setTimeout(() => {
        this.el.classList.add("open");
        this.animationInProcess = false;
      });
      this.fireEvent("open", this.el);
      dispatch("open.hs.dropdown", this.el, this.el);
    }
    close(isAnimated = true) {
      if (this.animationInProcess || !this.el.classList.contains("open"))
        return false;
      this.animationInProcess = true;
      if (isAnimated) {
        const el = this.el.querySelector("[data-hs-dropdown-transition]") || this.menu;
        afterTransition(el, () => this.destroyPopper());
      } else
        this.destroyPopper();
      this.menu.style.margin = null;
      this.el.classList.remove("open");
      this.fireEvent("close", this.el);
      dispatch("close.hs.dropdown", this.el, this.el);
    }
    forceClearState() {
      this.destroyPopper();
      this.menu.style.margin = null;
      this.el.classList.remove("open");
    }
    // Static methods
    static getInstance(target, isInstance) {
      const elInCollection = window.$hsDropdownCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element.el : null;
    }
    static autoInit() {
      if (!window.$hsDropdownCollection)
        window.$hsDropdownCollection = [];
      document.querySelectorAll(".hs-dropdown:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsDropdownCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSDropdown(el);
      });
      if (window.$hsDropdownCollection) {
        document.addEventListener(
          "keydown",
          (evt) => HSDropdown.accessibility(evt)
        );
        window.addEventListener("click", (evt) => {
          const evtTarget = evt.target;
          HSDropdown.closeCurrentlyOpened(evtTarget);
        });
        let prevWidth = window.innerWidth;
        window.addEventListener("resize", () => {
          if (window.innerWidth !== prevWidth) {
            prevWidth = innerWidth;
            HSDropdown.closeCurrentlyOpened(null, false);
          }
        });
      }
    }
    static open(target) {
      const elInCollection = window.$hsDropdownCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection && elInCollection.element.menu.classList.contains("hidden"))
        elInCollection.element.open();
    }
    static close(target) {
      const elInCollection = window.$hsDropdownCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection && !elInCollection.element.menu.classList.contains("hidden")) {
        elInCollection.element.close();
      }
    }
    // Accessibility methods
    static accessibility(evt) {
      this.history = menuSearchHistory;
      const target = window.$hsDropdownCollection.find(
        (el) => el.element.el.classList.contains("open")
      );
      if (target && (DROPDOWN_ACCESSIBILITY_KEY_SET.includes(evt.code) || evt.code.length === 4 && evt.code[evt.code.length - 1].match(/^[A-Z]*$/)) && !evt.metaKey && !target.element.menu.querySelector("input:focus")) {
        switch (evt.code) {
          case "Escape":
            if (!target.element.menu.querySelector(".hs-select.active")) {
              evt.preventDefault();
              this.onEscape(evt);
            }
            break;
          case "Enter":
            if (!target.element.menu.querySelector(".hs-select button:focus") && !target.element.menu.querySelector(".hs-collapse-toggle:focus")) {
              this.onEnter(evt);
            }
            break;
          case "ArrowUp":
            evt.preventDefault();
            this.onArrow();
            break;
          case "ArrowDown":
            evt.preventDefault();
            this.onArrow(false);
            break;
          case "Home":
            evt.preventDefault();
            this.onStartEnd();
            break;
          case "End":
            evt.preventDefault();
            this.onStartEnd(false);
            break;
          default:
            evt.preventDefault();
            this.onFirstLetter(evt.key);
            break;
        }
      }
    }
    static onEscape(evt) {
      const dropdown = evt.target.closest(".hs-dropdown.open");
      if (window.$hsDropdownCollection.find((el) => el.element.el === dropdown)) {
        const target = window.$hsDropdownCollection.find(
          (el) => el.element.el === dropdown
        );
        if (target) {
          target.element.close();
          target.element.toggle.focus();
        }
      } else {
        this.closeCurrentlyOpened();
      }
    }
    static onEnter(evt) {
      const dropdown = evt.target.parentElement;
      if (window.$hsDropdownCollection.find((el) => el.element.el === dropdown)) {
        evt.preventDefault();
        const target = window.$hsDropdownCollection.find(
          (el) => el.element.el === dropdown
        );
        if (target)
          target.element.open();
      }
    }
    static onArrow(isArrowUp = true) {
      const target = window.$hsDropdownCollection.find(
        (el) => el.element.el.classList.contains("open")
      );
      if (target) {
        const menu = target.element.menu;
        if (!menu)
          return false;
        const preparedLinks = isArrowUp ? Array.from(
          menu.querySelectorAll(
            "a:not([hidden]), .hs-dropdown > button:not([hidden])"
          )
        ).reverse() : Array.from(
          menu.querySelectorAll(
            "a:not([hidden]), .hs-dropdown > button:not([hidden])"
          )
        );
        const links = preparedLinks.filter(
          (el) => !el.classList.contains("disabled")
        );
        const current = menu.querySelector("a:focus, button:focus");
        let currentInd = links.findIndex((el) => el === current);
        if (currentInd + 1 < links.length) {
          currentInd++;
        }
        links[currentInd].focus();
      }
    }
    static onStartEnd(isStart = true) {
      const target = window.$hsDropdownCollection.find(
        (el) => el.element.el.classList.contains("open")
      );
      if (target) {
        const menu = target.element.menu;
        if (!menu)
          return false;
        const preparedLinks = isStart ? Array.from(menu.querySelectorAll("a")) : Array.from(menu.querySelectorAll("a")).reverse();
        const links = preparedLinks.filter(
          (el) => !el.classList.contains("disabled")
        );
        if (links.length) {
          links[0].focus();
        }
      }
    }
    static onFirstLetter(code) {
      const target = window.$hsDropdownCollection.find(
        (el) => el.element.el.classList.contains("open")
      );
      if (target) {
        const menu = target.element.menu;
        if (!menu)
          return false;
        const links = Array.from(menu.querySelectorAll("a"));
        const getCurrentInd = () => links.findIndex(
          (el, i) => el.innerText.toLowerCase().charAt(0) === code.toLowerCase() && this.history.existsInHistory(i)
        );
        let currentInd = getCurrentInd();
        if (currentInd === -1) {
          this.history.clearHistory();
          currentInd = getCurrentInd();
        }
        if (currentInd !== -1) {
          links[currentInd].focus();
          this.history.addHistory(currentInd);
        }
      }
    }
    static closeCurrentlyOpened(evtTarget = null, isAnimated = true) {
      const parent = evtTarget && evtTarget.closest(".hs-dropdown") && evtTarget.closest(".hs-dropdown").parentElement.closest(".hs-dropdown") ? evtTarget.closest(".hs-dropdown").parentElement.closest(".hs-dropdown") : null;
      let currentlyOpened = parent ? window.$hsDropdownCollection.filter(
        (el) => el.element.el.classList.contains("open") && el.element.menu.closest(".hs-dropdown").parentElement.closest(".hs-dropdown") === parent
      ) : window.$hsDropdownCollection.filter(
        (el) => el.element.el.classList.contains("open")
      );
      if (evtTarget && evtTarget.closest(".hs-dropdown") && getClassPropertyAlt(evtTarget.closest(".hs-dropdown"), "--auto-close") === "inside") {
        currentlyOpened = currentlyOpened.filter(
          (el) => el.element.el !== evtTarget.closest(".hs-dropdown")
        );
      }
      if (currentlyOpened) {
        currentlyOpened.forEach((el) => {
          if (el.element.closeMode === "false" || el.element.closeMode === "outside")
            return false;
          el.element.close(isAnimated);
        });
      }
    }
    // Backward compatibility
    static on(evt, target, cb) {
      const elInCollection = window.$hsDropdownCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection)
        elInCollection.element.events[evt] = cb;
    }
  };
  window.addEventListener("load", () => {
    HSDropdown.autoInit();
  });
  window.addEventListener("resize", () => {
    if (!window.$hsDropdownCollection)
      window.$hsDropdownCollection = [];
    window.$hsDropdownCollection.forEach((el) => el.element.resizeHandler());
  });
  if (typeof window !== "undefined") {
    window.HSDropdown = HSDropdown;
  }
  var dropdown_default = HSDropdown;

  // node_modules/preline/src/plugins/input-number/index.ts
  var HSInputNumber = class extends HSBasePlugin {
    constructor(el, options) {
      super(el, options);
      this.input = this.el.querySelector("[data-hs-input-number-input]") || null;
      this.increment = this.el.querySelector("[data-hs-input-number-increment]") || null;
      this.decrement = this.el.querySelector("[data-hs-input-number-decrement]") || null;
      if (this.input) {
        this.inputValue = !isNaN(parseInt(this.input.value)) ? parseInt(this.input.value) : 0;
      }
      const data = this.el.dataset.hsInputNumber;
      const dataOptions = data ? JSON.parse(data) : { step: 1 };
      const concatOptions = __spreadValues(__spreadValues({}, dataOptions), options);
      this.minInputValue = "min" in concatOptions ? concatOptions.min : 0;
      this.maxInputValue = "max" in concatOptions ? concatOptions.max : null;
      this.step = "step" in concatOptions && concatOptions.step > 0 ? concatOptions.step : 1;
      this.init();
    }
    init() {
      this.createCollection(window.$hsInputNumberCollection, this);
      if (this.input && this.increment)
        this.build();
    }
    build() {
      if (this.input)
        this.buildInput();
      if (this.increment)
        this.buildIncrement();
      if (this.decrement)
        this.buildDecrement();
      if (this.inputValue <= 0 && this.minInputValue === 0) {
        this.inputValue = 0;
        this.input.value = "0";
      }
      if (this.inputValue <= 0 || this.minInputValue < 0)
        this.changeValue();
      if (this.input.hasAttribute("disabled"))
        this.disableButtons();
    }
    buildInput() {
      this.input.addEventListener("input", () => this.changeValue());
    }
    buildIncrement() {
      this.increment.addEventListener("click", () => {
        this.changeValue("increment");
      });
    }
    buildDecrement() {
      this.decrement.addEventListener("click", () => {
        this.changeValue("decrement");
      });
    }
    changeValue(event = "none") {
      var _a, _b;
      const payload = { inputValue: this.inputValue };
      const minInputValue = (_a = this.minInputValue) != null ? _a : Number.MIN_SAFE_INTEGER;
      const maxInputValue = (_b = this.maxInputValue) != null ? _b : Number.MAX_SAFE_INTEGER;
      this.inputValue = isNaN(this.inputValue) ? 0 : this.inputValue;
      switch (event) {
        case "increment":
          const incrementedResult = this.inputValue + this.step;
          this.inputValue = incrementedResult >= minInputValue && incrementedResult <= maxInputValue ? incrementedResult : maxInputValue;
          this.input.value = this.inputValue.toString();
          break;
        case "decrement":
          const decrementedResult = this.inputValue - this.step;
          this.inputValue = decrementedResult >= minInputValue && decrementedResult <= maxInputValue ? decrementedResult : minInputValue;
          this.input.value = this.inputValue.toString();
          break;
        default:
          const defaultResult = isNaN(parseInt(this.input.value)) ? 0 : parseInt(this.input.value);
          this.inputValue = defaultResult >= maxInputValue ? maxInputValue : defaultResult <= minInputValue ? minInputValue : defaultResult;
          if (this.inputValue <= minInputValue)
            this.input.value = this.inputValue.toString();
          break;
      }
      payload.inputValue = this.inputValue;
      if (this.inputValue === minInputValue) {
        this.el.classList.add("disabled");
        if (this.decrement)
          this.disableButtons("decrement");
      } else {
        this.el.classList.remove("disabled");
        if (this.decrement)
          this.enableButtons("decrement");
      }
      if (this.inputValue === maxInputValue) {
        this.el.classList.add("disabled");
        if (this.increment)
          this.disableButtons("increment");
      } else {
        this.el.classList.remove("disabled");
        if (this.increment)
          this.enableButtons("increment");
      }
      this.fireEvent("change", payload);
      dispatch("change.hs.inputNumber", this.el, payload);
    }
    disableButtons(mode = "all") {
      if (mode === "all") {
        if (this.increment.tagName === "BUTTON" || this.increment.tagName === "INPUT")
          this.increment.setAttribute("disabled", "disabled");
        if (this.decrement.tagName === "BUTTON" || this.decrement.tagName === "INPUT")
          this.decrement.setAttribute("disabled", "disabled");
      } else if (mode === "increment") {
        if (this.increment.tagName === "BUTTON" || this.increment.tagName === "INPUT")
          this.increment.setAttribute("disabled", "disabled");
      } else if (mode === "decrement") {
        if (this.decrement.tagName === "BUTTON" || this.decrement.tagName === "INPUT")
          this.decrement.setAttribute("disabled", "disabled");
      }
    }
    enableButtons(mode = "all") {
      if (mode === "all") {
        if (this.increment.tagName === "BUTTON" || this.increment.tagName === "INPUT")
          this.increment.removeAttribute("disabled");
        if (this.decrement.tagName === "BUTTON" || this.decrement.tagName === "INPUT")
          this.decrement.removeAttribute("disabled");
      } else if (mode === "increment") {
        if (this.increment.tagName === "BUTTON" || this.increment.tagName === "INPUT")
          this.increment.removeAttribute("disabled");
      } else if (mode === "decrement") {
        if (this.decrement.tagName === "BUTTON" || this.decrement.tagName === "INPUT")
          this.decrement.removeAttribute("disabled");
      }
    }
    // Global method
    static getInstance(target, isInstance) {
      const elInCollection = window.$hsInputNumberCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element : null;
    }
    static autoInit() {
      if (!window.$hsInputNumberCollection)
        window.$hsInputNumberCollection = [];
      document.querySelectorAll("[data-hs-input-number]:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsInputNumberCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSInputNumber(el);
      });
    }
  };
  window.addEventListener("load", () => {
    HSInputNumber.autoInit();
  });
  if (typeof window !== "undefined") {
    window.HSInputNumber = HSInputNumber;
  }
  var input_number_default = HSInputNumber;

  // node_modules/preline/src/plugins/overlay/index.ts
  var HSOverlay = class extends HSBasePlugin {
    constructor(el, options, events) {
      var _a, _b;
      super(el, options, events);
      const data = el.getAttribute("data-hs-overlay-options");
      const dataOptions = data ? JSON.parse(data) : {};
      const concatOptions = __spreadValues(__spreadValues({}, dataOptions), options);
      this.hiddenClass = (concatOptions == null ? void 0 : concatOptions.hiddenClass) || "hidden";
      this.isClosePrev = (_a = concatOptions == null ? void 0 : concatOptions.isClosePrev) != null ? _a : true;
      this.backdropClasses = (_b = concatOptions == null ? void 0 : concatOptions.backdropClasses) != null ? _b : "transition duration fixed inset-0 bg-gray-900 bg-opacity-50 dark:bg-opacity-80 hs-overlay-backdrop";
      this.openNextOverlay = false;
      this.autoHide = null;
      this.overlayId = this.el.getAttribute("data-hs-overlay");
      this.overlay = document.querySelector(this.overlayId);
      if (this.overlay) {
        this.isCloseWhenClickInside = stringToBoolean(
          getClassProperty(this.overlay, "--close-when-click-inside", "false") || "false"
        );
        this.isTabAccessibilityLimited = stringToBoolean(
          getClassProperty(this.overlay, "--tab-accessibility-limited", "true") || "true"
        );
        this.isLayoutAffect = stringToBoolean(
          getClassProperty(this.overlay, "--is-layout-affect", "false") || "false"
        );
        this.hasAutofocus = stringToBoolean(
          getClassProperty(this.overlay, "--has-autofocus", "true") || "true"
        );
        this.hasAbilityToCloseOnBackdropClick = stringToBoolean(
          this.overlay.getAttribute("data-hs-overlay-keyboard") || "true"
        );
        const autoCloseBreakpoint = getClassProperty(
          this.overlay,
          "--auto-close"
        );
        this.autoClose = !isNaN(+autoCloseBreakpoint) && isFinite(+autoCloseBreakpoint) ? +autoCloseBreakpoint : BREAKPOINTS[autoCloseBreakpoint] || null;
        const openedBreakpoint = getClassProperty(this.overlay, "--opened");
        this.openedBreakpoint = (!isNaN(+openedBreakpoint) && isFinite(+openedBreakpoint) ? +openedBreakpoint : BREAKPOINTS[openedBreakpoint]) || null;
      }
      if (this.overlay)
        this.init();
    }
    init() {
      this.createCollection(window.$hsOverlayCollection, this);
      if (this.isLayoutAffect && this.openedBreakpoint) {
        const instance = HSOverlay.getInstance(this.el, true);
        HSOverlay.setOpened(
          this.openedBreakpoint,
          instance
        );
      }
      this.el.addEventListener("click", () => {
        if (this.overlay.classList.contains("opened"))
          this.close();
        else
          this.open();
      });
      this.overlay.addEventListener("click", (evt) => {
        if (evt.target.id && `#${evt.target.id}` === this.overlayId && this.isCloseWhenClickInside && this.hasAbilityToCloseOnBackdropClick) {
          this.close();
        }
      });
    }
    hideAuto() {
      const time = parseInt(getClassProperty(this.overlay, "--auto-hide", "0"));
      if (time) {
        this.autoHide = setTimeout(() => {
          this.close();
        }, time);
      }
    }
    checkTimer() {
      if (this.autoHide) {
        clearTimeout(this.autoHide);
        this.autoHide = null;
      }
    }
    buildBackdrop() {
      const overlayClasses = this.overlay.classList.value.split(" ");
      const overlayZIndex = parseInt(
        window.getComputedStyle(this.overlay).getPropertyValue("z-index")
      );
      const backdropId = this.overlay.getAttribute("data-hs-overlay-backdrop-container") || false;
      let backdrop = document.createElement("div");
      let backdropClasses = this.backdropClasses;
      const closeOnBackdrop = getClassProperty(this.overlay, "--overlay-backdrop", "true") !== "static";
      const disableBackdrop = getClassProperty(this.overlay, "--overlay-backdrop", "true") === "false";
      backdrop.id = `${this.overlay.id}-backdrop`;
      if ("style" in backdrop)
        backdrop.style.zIndex = `${overlayZIndex - 1}`;
      for (const value of overlayClasses) {
        if (value.startsWith("hs-overlay-backdrop-open:") || value.includes(":hs-overlay-backdrop-open:")) {
          backdropClasses += ` ${value}`;
        }
      }
      if (disableBackdrop)
        return;
      if (backdropId) {
        backdrop = document.querySelector(backdropId).cloneNode(true);
        backdrop.classList.remove("hidden");
        backdropClasses = `${backdrop.classList.toString()}`;
        backdrop.classList.value = "";
      }
      if (closeOnBackdrop) {
        backdrop.addEventListener(
          "click",
          () => this.close(),
          true
        );
      }
      backdrop.setAttribute(
        "data-hs-overlay-backdrop-template",
        ""
      );
      document.body.appendChild(backdrop);
      setTimeout(() => {
        backdrop.classList.value = backdropClasses;
      });
    }
    destroyBackdrop() {
      const backdrop = document.querySelector(
        `#${this.overlay.id}-backdrop`
      );
      if (!backdrop)
        return;
      if (this.openNextOverlay) {
        backdrop.style.transitionDuration = `${parseFloat(
          window.getComputedStyle(backdrop).transitionDuration.replace(/[^\d.-]/g, "")
        ) * 1.8}s`;
      }
      backdrop.classList.add("opacity-0");
      afterTransition(backdrop, () => {
        backdrop.remove();
      });
    }
    focusElement() {
      const input = this.overlay.querySelector("[autofocus]");
      if (!input)
        return false;
      else
        input.focus();
    }
    // Public methods
    open() {
      if (!this.overlay)
        return false;
      const currentlyOpened = window.$hsOverlayCollection.find(
        (el) => el.element.overlay === document.querySelector(".hs-overlay.open") && !el.element.isLayoutAffect
      );
      const disabledScroll = getClassProperty(this.overlay, "--body-scroll", "false") !== "true";
      if (this.isClosePrev && currentlyOpened) {
        this.openNextOverlay = true;
        return currentlyOpened.element.close().then(() => {
          this.open();
          this.openNextOverlay = false;
        });
      }
      if (disabledScroll) {
        document.body.style.overflow = "hidden";
      }
      this.buildBackdrop();
      this.checkTimer();
      this.hideAuto();
      this.overlay.classList.remove(this.hiddenClass);
      this.overlay.setAttribute("aria-overlay", "true");
      this.overlay.setAttribute("tabindex", "-1");
      setTimeout(() => {
        if (this.overlay.classList.contains("opened"))
          return false;
        this.overlay.classList.add("open", "opened");
        if (this.isLayoutAffect)
          document.body.classList.add("hs-overlay-body-open");
        this.fireEvent("open", this.el);
        dispatch("open.hs.overlay", this.el, this.el);
        if (this.hasAutofocus)
          this.focusElement();
      }, 50);
    }
    close(forceClose = false) {
      if (this.isLayoutAffect)
        document.body.classList.remove("hs-overlay-body-open");
      const closeFn = (cb) => {
        if (this.overlay.classList.contains("open"))
          return false;
        this.overlay.classList.add(this.hiddenClass);
        this.destroyBackdrop();
        this.fireEvent("close", this.el);
        dispatch("close.hs.overlay", this.el, this.el);
        if (!document.querySelector(".hs-overlay.opened"))
          document.body.style.overflow = "";
        cb(this.overlay);
      };
      return new Promise((resolve) => {
        if (!this.overlay)
          return false;
        this.overlay.classList.remove("open", "opened");
        this.overlay.removeAttribute("aria-overlay");
        this.overlay.removeAttribute("tabindex");
        if (forceClose)
          closeFn(resolve);
        else
          afterTransition(this.overlay, () => {
            closeFn(resolve);
          });
      });
    }
    // Static methods
    static getInstance(target, isInstance) {
      const elInCollection = window.$hsOverlayCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target) || el.element.overlay === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element.el : null;
    }
    static autoInit() {
      if (!window.$hsOverlayCollection)
        window.$hsOverlayCollection = [];
      document.querySelectorAll("[data-hs-overlay]:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsOverlayCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSOverlay(el);
      });
      if (window.$hsOverlayCollection) {
        document.addEventListener(
          "keydown",
          (evt) => HSOverlay.accessibility(evt)
        );
      }
    }
    static open(target) {
      const elInCollection = window.$hsOverlayCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target) || el.element.overlay === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection && elInCollection.element.overlay.classList.contains(
        elInCollection.element.hiddenClass
      ))
        elInCollection.element.open();
    }
    static close(target) {
      const elInCollection = window.$hsOverlayCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target) || el.element.overlay === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection && !elInCollection.element.overlay.classList.contains(
        elInCollection.element.hiddenClass
      ))
        elInCollection.element.close();
    }
    static setOpened(breakpoint, el) {
      if (document.body.clientWidth >= breakpoint) {
        document.body.classList.add("hs-overlay-body-open");
        el.element.overlay.classList.add("opened");
      } else
        el.element.close(true);
    }
    // Accessibility methods
    static accessibility(evt) {
      var _a, _b;
      const targets = window.$hsOverlayCollection.filter(
        (el) => el.element.overlay.classList.contains("open")
      );
      const target = targets[targets.length - 1];
      const focusableElements = (_b = (_a = target == null ? void 0 : target.element) == null ? void 0 : _a.overlay) == null ? void 0 : _b.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
      const notHiddenFocusableElements = [];
      if (focusableElements == null ? void 0 : focusableElements.length)
        focusableElements.forEach((el) => {
          if (!isParentOrElementHidden(el))
            notHiddenFocusableElements.push(el);
        });
      const basicCheck = target && !evt.metaKey;
      if (basicCheck && !target.element.isTabAccessibilityLimited && evt.code === "Tab")
        return false;
      if (basicCheck && notHiddenFocusableElements.length && evt.code === "Tab") {
        evt.preventDefault();
        this.onTab(target, notHiddenFocusableElements);
      }
      if (basicCheck && evt.code === "Escape") {
        evt.preventDefault();
        this.onEscape(target);
      }
    }
    static onEscape(target) {
      if (target && target.element.hasAbilityToCloseOnBackdropClick)
        target.element.close();
    }
    static onTab(target, focusableElements) {
      if (!focusableElements.length)
        return false;
      const focused = target.element.overlay.querySelector(":focus");
      const focusedIndex = Array.from(focusableElements).indexOf(
        focused
      );
      if (focusedIndex > -1) {
        const nextIndex = (focusedIndex + 1) % focusableElements.length;
        focusableElements[nextIndex].focus();
      } else {
        focusableElements[0].focus();
      }
    }
    // Backward compatibility
    static on(evt, target, cb) {
      const elInCollection = window.$hsOverlayCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target) || el.element.overlay === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection)
        elInCollection.element.events[evt] = cb;
    }
  };
  var autoCloseResizeFn = () => {
    if (!window.$hsOverlayCollection.length || !window.$hsOverlayCollection.find((el) => el.element.autoClose))
      return false;
    const overlays = window.$hsOverlayCollection.filter(
      (el) => el.element.autoClose
    );
    overlays.forEach((overlay) => {
      if (document.body.clientWidth >= overlay.element.autoClose)
        overlay.element.close(true);
    });
  };
  var setOpenedResizeFn = () => {
    if (!window.$hsOverlayCollection.length || !window.$hsOverlayCollection.find((el) => el.element.openedBreakpoint))
      return false;
    const overlays = window.$hsOverlayCollection.filter(
      (el) => el.element.openedBreakpoint
    );
    overlays.forEach((overlay) => {
      HSOverlay.setOpened(overlay.element.openedBreakpoint, overlay);
    });
  };
  window.addEventListener("load", () => {
    HSOverlay.autoInit();
  });
  window.addEventListener("resize", () => {
    autoCloseResizeFn();
    setOpenedResizeFn();
  });
  if (typeof window !== "undefined") {
    window.HSOverlay = HSOverlay;
  }
  var overlay_default = HSOverlay;

  // node_modules/preline/src/plugins/pin-input/index.ts
  var HSPinInput = class extends HSBasePlugin {
    constructor(el, options) {
      super(el, options);
      const data = el.getAttribute("data-hs-pin-input");
      const dataOptions = data ? JSON.parse(data) : {};
      const concatOptions = __spreadValues(__spreadValues({}, dataOptions), options);
      this.items = this.el.querySelectorAll("[data-hs-pin-input-item]");
      this.currentItem = null;
      this.currentValue = new Array(this.items.length).fill("");
      this.placeholders = [];
      this.availableCharsRE = new RegExp(
        (concatOptions == null ? void 0 : concatOptions.availableCharsRE) || "^[a-zA-Z0-9]+$"
      );
      this.init();
    }
    init() {
      this.createCollection(window.$hsPinInputCollection, this);
      if (this.items.length)
        this.build();
    }
    build() {
      this.buildInputItems();
    }
    buildInputItems() {
      this.items.forEach((el, index) => {
        this.placeholders.push(el.getAttribute("placeholder") || "");
        if (el.hasAttribute("autofocus"))
          this.onFocusIn(index);
        el.addEventListener("input", (evt) => this.onInput(evt, index));
        el.addEventListener("paste", (evt) => this.onPaste(evt));
        el.addEventListener("keydown", (evt) => this.onKeydown(evt, index));
        el.addEventListener("focusin", () => this.onFocusIn(index));
        el.addEventListener("focusout", () => this.onFocusOut(index));
      });
    }
    checkIfNumber(value) {
      return value.match(this.availableCharsRE);
    }
    autoFillAll(text) {
      Array.from(text).forEach((n, i) => {
        if (!(this == null ? void 0 : this.items[i]))
          return false;
        this.items[i].value = n;
        this.items[i].dispatchEvent(new Event("input", { bubbles: true }));
      });
    }
    setCurrentValue() {
      this.currentValue = Array.from(this.items).map(
        (el) => el.value
      );
    }
    toggleCompleted() {
      if (!this.currentValue.includes(""))
        this.el.classList.add("active");
      else
        this.el.classList.remove("active");
    }
    onInput(evt, index) {
      const originalValue = evt.target.value;
      this.currentItem = evt.target;
      this.currentItem.value = "";
      this.currentItem.value = originalValue[originalValue.length - 1];
      if (!this.checkIfNumber(this.currentItem.value)) {
        this.currentItem.value = this.currentValue[index] || "";
        return false;
      }
      this.setCurrentValue();
      if (this.currentItem.value) {
        if (index < this.items.length - 1)
          this.items[index + 1].focus();
        if (!this.currentValue.includes("")) {
          const payload = { currentValue: this.currentValue };
          this.fireEvent("completed", payload);
          dispatch("completed.hs.pinInput", this.el, payload);
        }
        this.toggleCompleted();
      } else {
        if (index > 0)
          this.items[index - 1].focus();
      }
    }
    onKeydown(evt, index) {
      if (evt.key === "Backspace" && index > 0) {
        if (this.items[index].value === "") {
          this.items[index - 1].value = "";
          this.items[index - 1].focus();
        } else {
          this.items[index].value = "";
        }
      }
      this.setCurrentValue();
      this.toggleCompleted();
    }
    onFocusIn(index) {
      this.items[index].setAttribute("placeholder", "");
    }
    onFocusOut(index) {
      this.items[index].setAttribute("placeholder", this.placeholders[index]);
    }
    onPaste(evt) {
      evt.preventDefault();
      this.items.forEach((el) => {
        if (document.activeElement === el)
          this.autoFillAll(evt.clipboardData.getData("text"));
      });
    }
    // Static method
    static getInstance(target, isInstance) {
      const elInCollection = window.$hsPinInputCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element : null;
    }
    static autoInit() {
      if (!window.$hsPinInputCollection)
        window.$hsPinInputCollection = [];
      document.querySelectorAll("[data-hs-pin-input]:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsPinInputCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSPinInput(el);
      });
    }
  };
  window.addEventListener("load", () => {
    HSPinInput.autoInit();
  });
  if (typeof window !== "undefined") {
    window.HSPinInput = HSPinInput;
  }
  var pin_input_default = HSPinInput;

  // node_modules/preline/src/plugins/remove-element/index.ts
  var HSRemoveElement = class extends HSBasePlugin {
    constructor(el, options) {
      super(el, options);
      const data = el.getAttribute("data-hs-remove-element-options");
      const dataOptions = data ? JSON.parse(data) : {};
      const concatOptions = __spreadValues(__spreadValues({}, dataOptions), options);
      this.removeTargetId = this.el.getAttribute("data-hs-remove-element");
      this.removeTarget = document.querySelector(this.removeTargetId);
      this.removeTargetAnimationClass = (concatOptions == null ? void 0 : concatOptions.removeTargetAnimationClass) || "hs-removing";
      if (this.removeTarget)
        this.init();
    }
    init() {
      this.createCollection(window.$hsRemoveElementCollection, this);
      this.el.addEventListener("click", () => this.remove());
    }
    remove() {
      if (!this.removeTarget)
        return false;
      this.removeTarget.classList.add(this.removeTargetAnimationClass);
      afterTransition(this.removeTarget, () => {
        this.removeTarget.remove();
      });
    }
    // Static method
    static autoInit() {
      if (!window.$hsRemoveElementCollection)
        window.$hsRemoveElementCollection = [];
      document.querySelectorAll("[data-hs-remove-element]:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsRemoveElementCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSRemoveElement(el);
      });
    }
  };
  window.addEventListener("load", () => {
    HSRemoveElement.autoInit();
  });
  if (typeof window !== "undefined") {
    window.HSRemoveElement = HSRemoveElement;
  }
  var remove_element_default = HSRemoveElement;

  // node_modules/preline/src/plugins/search-by-json/index.ts
  var HSSearchByJson = class extends HSBasePlugin {
    constructor(el, options) {
      super(el, options);
      const data = el.getAttribute("data-hs-search-by-json");
      const dataOptions = data ? JSON.parse(data) : {};
      const concatOptions = __spreadValues(__spreadValues({}, dataOptions), options);
      this.jsonUrl = concatOptions.jsonUrl;
      this.minChars = concatOptions.minChars || 3;
      this.dropdownTemplate = concatOptions.dropdownTemplate || "<div></div>";
      this.dropdownClasses = concatOptions.dropdownClasses || "absolute top-full z-[1] w-full bg-white border border-gray-200 rounded-md hidden mt-2";
      this.dropdownItemTemplate = concatOptions.dropdownItemTemplate || "<div></div>";
      this.dropdownItemTemplatesByType = concatOptions.dropdownItemTemplatesByType || null;
      this.dropdownItemClasses = concatOptions.dropdownItemClasses || "py-2 px-4 w-full cursor-pointer text-sm hover:bg-gray-300 hover:text-black";
      this.highlightedTextTagName = concatOptions.highlightedTextTagName || "u";
      this.highlightedTextClasses = concatOptions.highlightedTextClasses || "bg-green-200";
      if (this.jsonUrl)
        this.fetchData().then(() => this.init());
    }
    init() {
      this.createCollection(window.$hsSearchByJsonCollection, this);
      this.buildDropdown();
      this.el.addEventListener(
        "input",
        debounce((evt) => {
          this.val = evt.target.value;
          if (this.val.length > this.minChars) {
            this.searchData(this.val);
          } else {
            this.result = [];
          }
          if (this.result.length) {
            this.dropdown.classList.remove("hidden");
          } else {
            this.dropdown.classList.add("hidden");
          }
          this.buildItems();
        })
      );
    }
    async fetchData() {
      await fetch(this.jsonUrl).then((data) => data.json()).then((data) => this.json = data);
    }
    searchData(val) {
      this.result = this.json.filter((el) => {
        const value = val.toLowerCase();
        const title = el.title.toLowerCase();
        const description = el.description.toLowerCase();
        return title.includes(value) || description.includes(value);
      });
    }
    buildDropdown() {
      this.dropdown = htmlToElement(this.dropdownTemplate);
      if (this.dropdownClasses)
        classToClassList(this.dropdownClasses, this.dropdown);
      this.el.after(this.dropdown);
    }
    buildItems() {
      this.dropdown.innerHTML = "";
      this.result.forEach((el) => {
        const link = htmlToElement(
          `<a class="block" href="${el.url}" target="_blank"></a>`
        );
        link.append(this.itemTemplate(el));
        this.dropdown.append(link);
      });
    }
    itemTemplate(el) {
      const re = new RegExp(this.val, "gi");
      const newTitle = el.title.replace(
        re,
        `<${this.highlightedTextTagName} class="inline-block ${this.highlightedTextClasses}">${this.val}</${this.highlightedTextTagName}>`
      );
      const newDescription = el.description.replace(
        re,
        `<${this.highlightedTextTagName} class="inline-block ${this.highlightedTextClasses}">${this.val}</${this.highlightedTextTagName}>`
      );
      const templateByType = this.dropdownItemTemplatesByType ? this.dropdownItemTemplatesByType.find(
        (template2) => template2.type === el.type
      ) : null;
      const template = templateByType ? htmlToElement(templateByType.markup) : htmlToElement(this.dropdownItemTemplate);
      if (this.dropdownItemClasses)
        classToClassList(this.dropdownItemClasses, template);
      const title = template.querySelector("[data-title]");
      if (title)
        title.append(htmlToElement(`<span>${newTitle}</span>`));
      else
        template.append(htmlToElement(`<span>${newTitle}</span>`));
      const description = template.querySelector("[data-description]");
      if (description)
        description.append(htmlToElement(`<span>${newDescription}</span>`));
      else if (!templateByType) {
        const br = htmlToElement("<br>");
        template.append(br);
        template.append(htmlToElement(`<span>${newDescription}</span>`));
      }
      return template;
    }
    // Static method
    static getInstance(target) {
      const elInCollection = window.$hsSearchByJsonCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? elInCollection.element : null;
    }
    static autoInit() {
      if (!window.$hsSearchByJsonCollection)
        window.$hsSearchByJsonCollection = [];
      document.querySelectorAll("[data-hs-search-by-json]:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsSearchByJsonCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSSearchByJson(el);
      });
    }
  };
  window.addEventListener("load", () => {
    HSSearchByJson.autoInit();
  });
  if (typeof window !== "undefined") {
    window.HSSearchByJson = HSSearchByJson;
  }

  // node_modules/preline/src/plugins/scrollspy/index.ts
  var HSScrollspy = class extends HSBasePlugin {
    constructor(el, options = {}) {
      super(el, options);
      this.activeSection = null;
      this.contentId = this.el.getAttribute("data-hs-scrollspy");
      this.content = document.querySelector(this.contentId);
      this.links = this.el.querySelectorAll("[href]");
      this.sections = [];
      this.scrollableId = this.el.getAttribute(
        "data-hs-scrollspy-scrollable-parent"
      );
      this.scrollable = this.scrollableId ? document.querySelector(this.scrollableId) : document;
      this.init();
    }
    init() {
      this.createCollection(window.$hsScrollspyCollection, this);
      this.links.forEach((el) => {
        this.sections.push(
          this.scrollable.querySelector(el.getAttribute("href"))
        );
      });
      Array.from(this.sections).forEach((section) => {
        if (!section.getAttribute("id"))
          return false;
        this.scrollable.addEventListener(
          "scroll",
          (evt) => this.update(evt, section)
        );
      });
      this.links.forEach((el) => {
        el.addEventListener("click", (evt) => {
          evt.preventDefault();
          if (el.getAttribute("href") === "javascript:;")
            return false;
          this.scrollTo(el);
        });
      });
    }
    update(evt, section) {
      const globalOffset = parseInt(
        getClassProperty(this.el, "--scrollspy-offset", "0")
      );
      const userOffset = parseInt(getClassProperty(section, "--scrollspy-offset")) || globalOffset;
      const scrollableParentOffset = evt.target === document ? 0 : parseInt(
        String(evt.target.getBoundingClientRect().top)
      );
      const topOffset = parseInt(String(section.getBoundingClientRect().top)) - userOffset - scrollableParentOffset;
      const height = section.offsetHeight;
      if (topOffset <= 0 && topOffset + height > 0) {
        if (this.activeSection === section)
          return false;
        this.links.forEach((el) => {
          el.classList.remove("active");
        });
        const current = this.el.querySelector(
          `[href="#${section.getAttribute("id")}"]`
        );
        if (current) {
          current.classList.add("active");
          const group = current.closest("[data-hs-scrollspy-group]");
          if (group) {
            const parentLink = group.querySelector("[href]");
            if (parentLink)
              parentLink.classList.add("active");
          }
        }
        this.activeSection = section;
      }
    }
    scrollTo(link) {
      const targetId = link.getAttribute("href");
      const target = document.querySelector(targetId);
      const globalOffset = parseInt(
        getClassProperty(this.el, "--scrollspy-offset", "0")
      );
      const userOffset = parseInt(getClassProperty(target, "--scrollspy-offset")) || globalOffset;
      const scrollableParentOffset = this.scrollable === document ? 0 : this.scrollable.offsetTop;
      const topOffset = target.offsetTop - userOffset - scrollableParentOffset;
      const view = this.scrollable === document ? window : this.scrollable;
      const scrollFn = () => {
        window.history.replaceState(null, null, link.getAttribute("href"));
        if ("scrollTo" in view) {
          view.scrollTo({
            top: topOffset,
            left: 0,
            behavior: "smooth"
          });
        }
      };
      const beforeScroll = this.fireEvent("beforeScroll", this.el);
      dispatch("beforeScroll.hs.scrollspy", this.el, this.el);
      if (beforeScroll instanceof Promise)
        beforeScroll.then(() => scrollFn());
      else
        scrollFn();
    }
    // Static methods
    static getInstance(target, isInstance = false) {
      const elInCollection = window.$hsScrollspyCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element.el : null;
    }
    static autoInit() {
      if (!window.$hsScrollspyCollection)
        window.$hsScrollspyCollection = [];
      document.querySelectorAll("[data-hs-scrollspy]:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsScrollspyCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSScrollspy(el);
      });
    }
  };
  window.addEventListener("load", () => {
    HSScrollspy.autoInit();
  });
  if (typeof window !== "undefined") {
    window.HSScrollspy = HSScrollspy;
  }
  var scrollspy_default = HSScrollspy;

  // node_modules/preline/src/plugins/select/index.ts
  var HSSelect = class extends HSBasePlugin {
    constructor(el, options) {
      var _a;
      super(el, options);
      const data = el.getAttribute("data-hs-select");
      const dataOptions = data ? JSON.parse(data) : {};
      const concatOptions = __spreadValues(__spreadValues({}, dataOptions), options);
      this.value = (concatOptions == null ? void 0 : concatOptions.value) || this.el.value || null;
      this.placeholder = (concatOptions == null ? void 0 : concatOptions.placeholder) || "Select...";
      this.hasSearch = (concatOptions == null ? void 0 : concatOptions.hasSearch) || false;
      this.preventSearchFocus = (concatOptions == null ? void 0 : concatOptions.preventSearchFocus) || false;
      this.mode = (concatOptions == null ? void 0 : concatOptions.mode) || "default";
      this.viewport = typeof (concatOptions == null ? void 0 : concatOptions.viewport) !== "undefined" ? document.querySelector(concatOptions == null ? void 0 : concatOptions.viewport) : null;
      this.isOpened = Boolean(concatOptions == null ? void 0 : concatOptions.isOpened) || false;
      this.isMultiple = this.el.hasAttribute("multiple") || false;
      this.isDisabled = this.el.hasAttribute("disabled") || false;
      this.selectedItems = [];
      this.wrapperClasses = (concatOptions == null ? void 0 : concatOptions.wrapperClasses) || null;
      this.toggleTag = (concatOptions == null ? void 0 : concatOptions.toggleTag) || null;
      this.toggleClasses = (concatOptions == null ? void 0 : concatOptions.toggleClasses) || null;
      this.toggleCountText = (concatOptions == null ? void 0 : concatOptions.toggleCountText) || null;
      this.toggleCountTextMinItems = (concatOptions == null ? void 0 : concatOptions.toggleCountTextMinItems) || 1;
      this.tagsItemTemplate = (concatOptions == null ? void 0 : concatOptions.tagsItemTemplate) || null;
      this.tagsItemClasses = (concatOptions == null ? void 0 : concatOptions.tagsItemClasses) || null;
      this.tagsInputClasses = (concatOptions == null ? void 0 : concatOptions.tagsInputClasses) || null;
      this.dropdownTag = (concatOptions == null ? void 0 : concatOptions.dropdownTag) || null;
      this.dropdownClasses = (concatOptions == null ? void 0 : concatOptions.dropdownClasses) || null;
      this.dropdownDirectionClasses = (concatOptions == null ? void 0 : concatOptions.dropdownDirectionClasses) || null;
      this.dropdownSpace = (concatOptions == null ? void 0 : concatOptions.dropdownSpace) || 10;
      this.searchWrapperTemplate = (concatOptions == null ? void 0 : concatOptions.searchWrapperTemplate) || null;
      this.searchWrapperClasses = (concatOptions == null ? void 0 : concatOptions.searchWrapperClasses) || "bg-white p-2 sticky top-0";
      this.searchClasses = (concatOptions == null ? void 0 : concatOptions.searchClasses) || "block w-[calc(100%-2rem)] text-sm border-gray-200 rounded-md focus:border-blue-500 focus:ring-blue-500 dark:bg-slate-900 dark:border-gray-700 dark:text-gray-400 py-2 px-3 my-2 mx-4";
      this.searchPlaceholder = (concatOptions == null ? void 0 : concatOptions.searchPlaceholder) || "Search...";
      this.searchNoResultText = (concatOptions == null ? void 0 : concatOptions.searchNoResultText) || "No options found...";
      this.searchNoResultClasses = (concatOptions == null ? void 0 : concatOptions.searchNoResultClasses) || "px-4 text-sm";
      this.optionTemplate = (concatOptions == null ? void 0 : concatOptions.optionTemplate) || null;
      this.optionTag = (concatOptions == null ? void 0 : concatOptions.optionTag) || null;
      this.optionClasses = (concatOptions == null ? void 0 : concatOptions.optionClasses) || null;
      this.extraMarkup = (concatOptions == null ? void 0 : concatOptions.extraMarkup) || null;
      this.descriptionClasses = (concatOptions == null ? void 0 : concatOptions.descriptionClasses) || null;
      this.iconClasses = (concatOptions == null ? void 0 : concatOptions.iconClasses) || null;
      this.isAddTagOnEnter = (_a = concatOptions == null ? void 0 : concatOptions.isAddTagOnEnter) != null ? _a : true;
      this.animationInProcess = false;
      this.selectOptions = [];
      this.tagsInputHelper = null;
      this.init();
    }
    init() {
      this.createCollection(window.$hsSelectCollection, this);
      this.build();
    }
    build() {
      this.el.style.display = "none";
      if (this.el.children) {
        Array.from(this.el.children).filter((el) => el.value && el.value !== "").forEach((el) => {
          const data = el.getAttribute("data-hs-select-option");
          this.selectOptions = [
            ...this.selectOptions,
            {
              title: el.textContent,
              val: el.value,
              options: data !== "undefined" ? JSON.parse(data) : null
            }
          ];
        });
      }
      if (this.isMultiple) {
        const selectedOptions = Array.from(
          this.el.options
        ).filter((el) => el.selected);
        if (selectedOptions) {
          const values = [];
          selectedOptions.forEach((el) => {
            values.push(el.value);
          });
          this.value = values;
        }
      }
      this.buildWrapper();
      if (this.mode === "tags")
        this.buildTags();
      else
        this.buildToggle();
      this.buildDropdown();
      if (this.extraMarkup)
        this.buildExtraMarkup();
    }
    buildWrapper() {
      this.wrapper = document.createElement("div");
      this.wrapper.classList.add("hs-select", "relative");
      if (this.mode === "tags") {
        this.wrapper.addEventListener("click", (evt) => {
          if (!evt.target.closest("[data-hs-select-dropdown]") && !evt.target.closest("[data-tag-value]")) {
            this.tagsInput.focus();
          }
        });
      }
      if (this.wrapperClasses)
        classToClassList(this.wrapperClasses, this.wrapper);
      this.el.before(this.wrapper);
      this.wrapper.append(this.el);
    }
    buildExtraMarkup() {
      const appendMarkup = (markup) => {
        this.wrapper.append(htmlToElement(markup));
      };
      if (Array.isArray(this.extraMarkup))
        this.extraMarkup.forEach((el) => appendMarkup(el));
      else
        appendMarkup(this.extraMarkup);
    }
    buildToggle() {
      var _a;
      let icon, title;
      this.toggleTextWrapper = document.createElement("span");
      this.toggleTextWrapper.classList.add("truncate");
      this.toggle = htmlToElement(this.toggleTag || "<div></div>");
      icon = this.toggle.querySelector("[data-icon]");
      title = this.toggle.querySelector("[data-title]");
      if (!this.isMultiple && icon)
        this.setToggleIcon();
      if (!this.isMultiple && title)
        this.setToggleTitle();
      if (this.isMultiple) {
        this.toggleTextWrapper.innerHTML = this.value.length ? this.stringFromValue() : this.placeholder;
      } else {
        this.toggleTextWrapper.innerHTML = ((_a = this.getItemByValue(this.value)) == null ? void 0 : _a.title) || this.placeholder;
      }
      if (!title)
        this.toggle.append(this.toggleTextWrapper);
      if (this.toggleClasses)
        classToClassList(this.toggleClasses, this.toggle);
      if (this.isDisabled)
        this.toggle.classList.add("disabled");
      if (this.wrapper)
        this.wrapper.append(this.toggle);
      this.toggle.addEventListener("click", () => {
        if (this.isDisabled)
          return false;
        if (this.isOpened)
          this.close();
        else
          this.open();
      });
    }
    setToggleIcon() {
      var _a, _b;
      const icon = this.toggle.querySelector("[data-icon]");
      icon.innerHTML = "";
      if (icon) {
        const img = htmlToElement(
          ((_b = (_a = this.getItemByValue(this.value)) == null ? void 0 : _a.options) == null ? void 0 : _b.icon) || ""
        );
        icon.append(img);
        if (!img)
          icon.classList.add("hidden");
        else
          icon.classList.remove("hidden");
      }
    }
    setToggleTitle() {
      var _a;
      const title = this.toggle.querySelector("[data-title]");
      title.classList.add("truncate");
      title.innerHTML = "";
      if (title) {
        const titleText = ((_a = this.getItemByValue(this.value)) == null ? void 0 : _a.title) || this.placeholder;
        title.innerHTML = titleText;
        this.toggle.append(title);
      }
    }
    buildTags() {
      this.buildTagsInput();
      this.setTagsItems();
    }
    reassignTagsInputPlaceholder(placeholder) {
      this.tagsInput.placeholder = placeholder;
      this.tagsInputHelper.innerHTML = placeholder;
      this.calculateInputWidth();
    }
    buildTagsItem(val) {
      var _a, _b, _c;
      const item = this.getItemByValue(val);
      let template, title, remove, icon;
      const newItem = document.createElement("div");
      newItem.setAttribute("data-tag-value", val);
      if (this.tagsItemClasses)
        classToClassList(this.tagsItemClasses, newItem);
      if (this.tagsItemTemplate) {
        template = htmlToElement(this.tagsItemTemplate);
        newItem.append(template);
      }
      if ((_a = item == null ? void 0 : item.options) == null ? void 0 : _a.icon) {
        const img = htmlToElement((_b = item == null ? void 0 : item.options) == null ? void 0 : _b.icon);
        icon = template ? template.querySelector("[data-icon]") : document.createElement("span");
        icon.append(img);
        if (!template)
          newItem.append(icon);
      }
      if (template && template.querySelector("[data-icon]") && !((_c = item == null ? void 0 : item.options) == null ? void 0 : _c.icon)) {
        template.querySelector("[data-icon]").classList.add("hidden");
      }
      title = template ? template.querySelector("[data-title]") : document.createElement("span");
      title.textContent = item.title || "";
      if (!template)
        newItem.append(title);
      if (template) {
        remove = template.querySelector("[data-remove]");
      } else {
        remove = document.createElement("span");
        remove.textContent = "X";
        newItem.append(remove);
      }
      remove.addEventListener("click", () => {
        this.value = this.value.filter((el) => el !== val);
        this.selectedItems = this.selectedItems.filter((el) => el !== val);
        if (!this.value.length)
          this.reassignTagsInputPlaceholder(this.placeholder);
        this.unselectMultipleItems();
        this.selectMultipleItems();
        newItem.remove();
      });
      this.wrapper.append(newItem);
    }
    getItemByValue(val) {
      return this.selectOptions.find((el) => el.val === val);
    }
    setTagsItems() {
      if (this.value) {
        this.value.forEach((val) => {
          if (!this.selectedItems.includes(val))
            this.buildTagsItem(val);
          this.selectedItems = !this.selectedItems.includes(val) ? [...this.selectedItems, val] : this.selectedItems;
        });
      }
    }
    buildTagsInput() {
      this.tagsInput = document.createElement("input");
      if (this.tagsInputClasses)
        classToClassList(this.tagsInputClasses, this.tagsInput);
      this.tagsInput.addEventListener("focus", () => this.open());
      this.tagsInput.addEventListener("input", () => this.calculateInputWidth());
      this.tagsInput.addEventListener(
        "input",
        debounce(
          (evt) => this.searchOptions(evt.target.value)
        )
      );
      this.tagsInput.addEventListener("keydown", (evt) => {
        if (evt.key === "Enter" && this.isAddTagOnEnter) {
          const val = evt.target.value;
          if (this.selectOptions.find((el) => el.val === val))
            return false;
          this.addSelectOption(val, val);
          this.buildOption(val, val);
          this.dropdown.querySelector(`[data-value="${val}"]`).click();
          this.resetTagsInputField();
        }
      });
      this.wrapper.append(this.tagsInput);
      setTimeout(() => {
        this.adjustInputWidth();
        this.reassignTagsInputPlaceholder(
          this.value.length ? "" : this.placeholder
        );
      });
    }
    buildDropdown() {
      this.dropdown = htmlToElement(this.dropdownTag || "<div></div>");
      this.dropdown.setAttribute("data-hs-select-dropdown", "");
      this.dropdown.classList.add("absolute", "top-full");
      if (!this.isOpened)
        this.dropdown.classList.add("hidden");
      if (this.dropdownClasses)
        classToClassList(this.dropdownClasses, this.dropdown);
      if (this.wrapper)
        this.wrapper.append(this.dropdown);
      if (this.dropdown && this.hasSearch)
        this.buildSearch();
      if (this.selectOptions)
        this.selectOptions.forEach(
          (props, i) => this.buildOption(props.title, props.val, props.options, `${i}`)
        );
    }
    buildSearch() {
      let input;
      this.searchWrapper = htmlToElement(
        this.searchWrapperTemplate || "<div></div>"
      );
      if (this.searchWrapperClasses)
        classToClassList(this.searchWrapperClasses, this.searchWrapper);
      input = this.searchWrapper.querySelector("[data-input]");
      this.search = htmlToElement('<input type="text" />');
      this.search.placeholder = this.searchPlaceholder;
      if (this.searchClasses)
        classToClassList(this.searchClasses, this.search);
      this.search.addEventListener(
        "input",
        debounce(
          (evt) => this.searchOptions(evt.target.value)
        )
      );
      if (input)
        input.append(this.search);
      else
        this.searchWrapper.append(this.search);
      this.dropdown.append(this.searchWrapper);
    }
    buildOption(title, val, options, index = "1") {
      let template = null;
      let titleWrapper = null;
      let iconWrapper = null;
      let descriptionWrapper = null;
      const option = htmlToElement(this.optionTag || "<div></div>");
      option.setAttribute("data-value", val);
      option.setAttribute("data-title-value", title);
      option.setAttribute("tabIndex", index);
      option.classList.add("cursor-pointer");
      if (this.optionTemplate) {
        template = htmlToElement(this.optionTemplate);
        option.append(template);
      }
      if (template) {
        titleWrapper = template.querySelector("[data-title]");
        titleWrapper.textContent = title || "";
      } else {
        option.textContent = title || "";
      }
      if (options) {
        if (options.icon) {
          const img = htmlToElement(options.icon);
          img.classList.add("mw-full");
          if (template) {
            iconWrapper = template.querySelector("[data-icon]");
            iconWrapper.append(img);
          } else {
            const icon = htmlToElement("<div></div>");
            if (this.iconClasses)
              classToClassList(this.iconClasses, icon);
            icon.append(img);
            option.append(icon);
          }
        }
        if (options.description) {
          if (template) {
            descriptionWrapper = template.querySelector("[data-description]");
            descriptionWrapper.append(options.description);
          } else {
            const description = htmlToElement("<div></div>");
            description.textContent = options.description;
            if (this.descriptionClasses)
              classToClassList(this.descriptionClasses, description);
            option.append(description);
          }
        }
      }
      if (template && template.querySelector("[data-icon]") && !options && !(options == null ? void 0 : options.icon)) {
        template.querySelector("[data-icon]").classList.add("hidden");
      }
      if (this.value && (this.isMultiple ? this.value.includes(val) : this.value === val))
        option.classList.add("selected");
      option.addEventListener("click", () => this.onSelectOption(val));
      if (this.optionClasses)
        classToClassList(this.optionClasses, option);
      if (this.dropdown)
        this.dropdown.append(option);
    }
    destroyOption(val) {
      const option = this.dropdown.querySelector(`[data-value="${val}"]`);
      if (!option)
        return false;
      option.remove();
    }
    buildOriginalOption(title, val, options) {
      const option = htmlToElement("<option></option>");
      option.setAttribute("value", val);
      option.setAttribute("data-hs-select-option", JSON.stringify(options));
      option.innerText = title;
      this.el.append(option);
    }
    destroyOriginalOption(val) {
      const option = this.el.querySelector(`[value="${val}"]`);
      if (!option)
        return false;
      option.remove();
    }
    buildTagsInputHelper() {
      this.tagsInputHelper = document.createElement("span");
      this.tagsInputHelper.style.fontSize = window.getComputedStyle(
        this.tagsInput
      ).fontSize;
      this.tagsInputHelper.style.fontFamily = window.getComputedStyle(
        this.tagsInput
      ).fontFamily;
      this.tagsInputHelper.style.fontWeight = window.getComputedStyle(
        this.tagsInput
      ).fontWeight;
      this.tagsInputHelper.style.letterSpacing = window.getComputedStyle(
        this.tagsInput
      ).letterSpacing;
      this.tagsInputHelper.style.visibility = "hidden";
      this.tagsInputHelper.style.whiteSpace = "pre";
      this.tagsInputHelper.style.position = "absolute";
      this.wrapper.appendChild(this.tagsInputHelper);
    }
    calculateInputWidth() {
      this.tagsInputHelper.textContent = this.tagsInput.value || this.tagsInput.placeholder;
      const inputPadding = parseInt(window.getComputedStyle(this.tagsInput).paddingLeft) + parseInt(window.getComputedStyle(this.tagsInput).paddingRight);
      const inputBorder = parseInt(window.getComputedStyle(this.tagsInput).borderLeftWidth) + parseInt(window.getComputedStyle(this.tagsInput).borderRightWidth);
      const newWidth = this.tagsInputHelper.offsetWidth + inputPadding + inputBorder;
      const maxWidth = this.wrapper.offsetWidth - (parseInt(window.getComputedStyle(this.wrapper).paddingLeft) + parseInt(window.getComputedStyle(this.wrapper).paddingRight));
      this.tagsInput.style.width = `${Math.min(newWidth, maxWidth) + 2}px`;
    }
    adjustInputWidth() {
      this.buildTagsInputHelper();
      this.calculateInputWidth();
    }
    onSelectOption(val) {
      this.clearSelections();
      if (this.isMultiple) {
        this.value = this.value.includes(val) ? Array.from(this.value).filter((el) => el !== val) : [...Array.from(this.value), val];
        this.selectMultipleItems();
        this.setNewValue();
      } else {
        this.value = val;
        this.selectSingleItem();
        this.setNewValue();
      }
      this.fireEvent("change", this.value);
      dispatch("change.hs.select", this.el, this.value);
      if (this.mode === "tags") {
        const intersection = this.selectedItems.filter(
          (x) => !this.value.includes(x)
        );
        if (intersection.length) {
          intersection.forEach((el) => {
            this.selectedItems = this.selectedItems.filter((elI) => elI !== el);
            this.wrapper.querySelector(`[data-tag-value="${el}"]`).remove();
          });
        }
        this.resetTagsInputField();
      }
      if (!this.isMultiple) {
        if (this.toggle.querySelector("[data-icon]"))
          this.setToggleIcon();
        if (this.toggle.querySelector("[data-title]"))
          this.setToggleTitle();
        this.close();
      }
      if (!this.value.length && this.mode === "tags")
        this.reassignTagsInputPlaceholder(this.placeholder);
      if (this.isOpened && this.mode === "tags" && this.tagsInput)
        this.tagsInput.focus();
    }
    addSelectOption(title, val, options) {
      this.selectOptions = [
        ...this.selectOptions,
        {
          title,
          val,
          options
        }
      ];
    }
    removeSelectOption(val) {
      const hasOption = !!this.selectOptions.some(
        (el) => el.val === val
      );
      if (!hasOption)
        return false;
      this.selectOptions = this.selectOptions.filter(
        (el) => el.val !== val
      );
    }
    resetTagsInputField() {
      this.tagsInput.value = "";
      this.reassignTagsInputPlaceholder("");
      this.searchOptions("");
    }
    clearSelections() {
      Array.from(this.dropdown.children).forEach((el) => {
        if (el.classList.contains("selected"))
          el.classList.remove("selected");
      });
      Array.from(this.el.children).forEach((el) => {
        if (el.selected)
          el.selected = false;
      });
    }
    setNewValue() {
      if (this.mode === "tags") {
        this.setTagsItems();
      } else {
        if (this.value.length)
          this.toggleTextWrapper.innerHTML = this.stringFromValue();
        else
          this.toggleTextWrapper.innerHTML = this.placeholder;
      }
    }
    stringFromValue() {
      const value = [];
      this.selectOptions.forEach((el) => {
        if (this.isMultiple) {
          if (this.value.includes(el.val))
            value.push(el.title);
        } else {
          if (this.value === el.val)
            value.push(el.title);
        }
      });
      return this.toggleCountText && this.toggleCountText !== "" && value.length >= this.toggleCountTextMinItems ? `${value.length} ${this.toggleCountText}` : value.join(", ");
    }
    selectSingleItem() {
      const selectedOption = Array.from(this.el.children).find(
        (el) => this.value === el.value
      );
      selectedOption.selected = true;
      const selectedItem = Array.from(this.dropdown.children).find(
        (el) => this.value === el.getAttribute("data-value")
      );
      selectedItem.classList.add("selected");
    }
    selectMultipleItems() {
      Array.from(this.dropdown.children).filter((el) => this.value.includes(el.getAttribute("data-value"))).forEach((el) => el.classList.add("selected"));
      Array.from(this.el.children).filter((el) => this.value.includes(el.value)).forEach((el) => el.selected = true);
    }
    unselectMultipleItems() {
      Array.from(this.dropdown.children).forEach(
        (el) => el.classList.remove("selected")
      );
      Array.from(this.el.children).forEach(
        (el) => el.selected = false
      );
    }
    searchOptions(val) {
      if (this.searchNoResult) {
        this.searchNoResult.remove();
        this.searchNoResult = null;
      }
      this.searchNoResult = htmlToElement("<span></span>");
      this.searchNoResult.innerText = this.searchNoResultText;
      classToClassList(this.searchNoResultClasses, this.searchNoResult);
      const options = this.dropdown.querySelectorAll("[data-value]");
      let hasItems = false;
      options.forEach((el) => {
        const optionVal = el.getAttribute("data-title-value").toLocaleLowerCase();
        if (!optionVal.includes(val.toLocaleLowerCase()))
          el.classList.add("hidden");
        else {
          el.classList.remove("hidden");
          hasItems = true;
        }
      });
      if (!hasItems)
        this.dropdown.append(this.searchNoResult);
    }
    eraseToggleIcon() {
      const icon = this.toggle.querySelector("[data-icon]");
      if (icon) {
        icon.innerHTML = null;
        icon.classList.add("hidden");
      }
    }
    eraseToggleTitle() {
      const title = this.toggle.querySelector("[data-title]");
      if (title) {
        title.innerHTML = this.placeholder;
      } else {
        this.toggleTextWrapper.innerHTML = this.placeholder;
      }
    }
    // Public methods
    destroy() {
      const parent = this.el.parentElement.parentElement;
      this.el.classList.remove("hidden");
      this.el.style.display = "";
      parent.prepend(this.el);
      parent.querySelector(".hs-select").remove();
      this.wrapper = null;
    }
    open() {
      if (this.animationInProcess)
        return false;
      this.animationInProcess = true;
      this.dropdown.classList.remove("hidden");
      this.recalculateDirection();
      setTimeout(() => {
        this.wrapper.classList.add("active");
        this.dropdown.classList.add("opened");
        if (this.hasSearch && !this.preventSearchFocus)
          this.search.focus();
        this.animationInProcess = false;
      });
      this.isOpened = true;
    }
    close() {
      var _a, _b, _c;
      if (this.animationInProcess)
        return false;
      this.animationInProcess = true;
      this.wrapper.classList.remove("active");
      this.dropdown.classList.remove("opened", "bottom-full", "top-full");
      if ((_a = this.dropdownDirectionClasses) == null ? void 0 : _a.bottom)
        this.dropdown.classList.remove(this.dropdownDirectionClasses.bottom);
      if ((_b = this.dropdownDirectionClasses) == null ? void 0 : _b.top)
        this.dropdown.classList.remove(this.dropdownDirectionClasses.top);
      this.dropdown.style.marginTop = "";
      this.dropdown.style.marginBottom = "";
      afterTransition(this.dropdown, () => {
        this.dropdown.classList.add("hidden");
        if (this.hasSearch) {
          this.search.value = "";
          this.search.dispatchEvent(new Event("input", { bubbles: true }));
          this.search.blur();
        }
        this.animationInProcess = false;
      });
      (_c = this.dropdown.querySelector(".hs-select-option-highlighted")) == null ? void 0 : _c.classList.remove("hs-select-option-highlighted");
      this.isOpened = false;
    }
    addOption(items) {
      let i = `${this.selectOptions.length}`;
      const addOption = (option) => {
        const { title, val, options } = option;
        const hasOption = !!this.selectOptions.some(
          (el) => el.val === val
        );
        if (!hasOption) {
          this.addSelectOption(title, val, options);
          this.buildOption(title, val, options, i);
          this.buildOriginalOption(title, val, options);
        }
      };
      if (Array.isArray(items)) {
        items.forEach((option) => {
          addOption(option);
        });
      } else {
        addOption(items);
      }
    }
    removeOption(values) {
      const removeOption = (val) => {
        const hasOption = !!this.selectOptions.some(
          (el) => el.val === val
        );
        if (hasOption) {
          this.removeSelectOption(val);
          this.destroyOption(val);
          this.destroyOriginalOption(val);
          if (this.value === val) {
            this.value = null;
            this.eraseToggleTitle();
            this.eraseToggleIcon();
          }
        }
      };
      if (Array.isArray(values)) {
        values.forEach((val) => {
          removeOption(val);
        });
      } else {
        removeOption(values);
      }
    }
    recalculateDirection() {
      var _a, _b, _c, _d;
      if (isEnoughSpace(
        this.dropdown,
        this.toggle || this.tagsInput,
        "bottom",
        this.dropdownSpace,
        this.viewport
      )) {
        this.dropdown.classList.remove("bottom-full");
        if ((_a = this.dropdownDirectionClasses) == null ? void 0 : _a.bottom)
          this.dropdown.classList.remove(this.dropdownDirectionClasses.bottom);
        this.dropdown.style.marginBottom = "";
        this.dropdown.classList.add("top-full");
        if ((_b = this.dropdownDirectionClasses) == null ? void 0 : _b.top)
          this.dropdown.classList.add(this.dropdownDirectionClasses.top);
        this.dropdown.style.marginTop = `${this.dropdownSpace}px`;
      } else {
        this.dropdown.classList.remove("top-full");
        if ((_c = this.dropdownDirectionClasses) == null ? void 0 : _c.top)
          this.dropdown.classList.remove(this.dropdownDirectionClasses.top);
        this.dropdown.style.marginTop = "";
        this.dropdown.classList.add("bottom-full");
        if ((_d = this.dropdownDirectionClasses) == null ? void 0 : _d.bottom)
          this.dropdown.classList.add(this.dropdownDirectionClasses.bottom);
        this.dropdown.style.marginBottom = `${this.dropdownSpace}px`;
      }
    }
    // Static methods
    static getInstance(target, isInstance) {
      const elInCollection = window.$hsSelectCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element : null;
    }
    static autoInit() {
      if (!window.$hsSelectCollection)
        window.$hsSelectCollection = [];
      document.querySelectorAll("[data-hs-select]:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsSelectCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        )) {
          const data = el.getAttribute("data-hs-select");
          const options = data ? JSON.parse(data) : {};
          new HSSelect(el, options);
        }
      });
      if (window.$hsSelectCollection) {
        window.addEventListener("click", (evt) => {
          const evtTarget = evt.target;
          HSSelect.closeCurrentlyOpened(evtTarget);
        });
        document.addEventListener(
          "keydown",
          (evt) => HSSelect.accessibility(evt)
        );
      }
    }
    static close(target) {
      const elInCollection = window.$hsSelectCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection && elInCollection.element.isOpened) {
        elInCollection.element.close();
      }
    }
    static closeCurrentlyOpened(evtTarget = null) {
      if (!evtTarget.closest(".hs-select.active")) {
        const currentlyOpened = window.$hsSelectCollection.filter((el) => el.element.isOpened) || null;
        if (currentlyOpened) {
          currentlyOpened.forEach((el) => {
            el.element.close();
          });
        }
      }
    }
    // Accessibility methods
    static accessibility(evt) {
      const target = window.$hsSelectCollection.find((el) => el.element.isOpened);
      if (target && SELECT_ACCESSIBILITY_KEY_SET.includes(evt.code) && !evt.metaKey) {
        switch (evt.code) {
          case "Escape":
            evt.preventDefault();
            this.onEscape();
            break;
          case "ArrowUp":
            evt.preventDefault();
            this.onArrow();
            break;
          case "ArrowDown":
            evt.preventDefault();
            this.onArrow(false);
            break;
          case "Tab":
            evt.preventDefault();
            this.onTab(evt.shiftKey);
            break;
          case "Home":
            evt.preventDefault();
            this.onStartEnd();
            break;
          case "End":
            evt.preventDefault();
            this.onStartEnd(false);
            break;
          case "Enter":
            evt.preventDefault();
            this.onEnter(evt);
            break;
          default:
            break;
        }
      }
    }
    static onEscape() {
      const target = window.$hsSelectCollection.find((el) => el.element.isOpened);
      if (target)
        target.element.close();
    }
    static onArrow(isArrowUp = true) {
      const target = window.$hsSelectCollection.find((el) => el.element.isOpened);
      if (target) {
        const dropdown = target.element.dropdown;
        if (!dropdown)
          return false;
        const preparedOptions = isArrowUp ? Array.from(
          dropdown.querySelectorAll(":scope > *:not(.hidden)")
        ).reverse() : Array.from(dropdown.querySelectorAll(":scope > *:not(.hidden)"));
        const options = preparedOptions.filter(
          (el) => !el.classList.contains("disabled")
        );
        const current = dropdown.querySelector(".hs-select-option-highlighted");
        if (!current)
          options[0].classList.add("hs-select-option-highlighted");
        let currentInd = options.findIndex((el) => el === current);
        if (currentInd + 1 < options.length) {
          currentInd++;
        }
        options[currentInd].focus();
        if (current)
          current.classList.remove("hs-select-option-highlighted");
        options[currentInd].classList.add("hs-select-option-highlighted");
      }
    }
    static onTab(isArrowUp = true) {
      const target = window.$hsSelectCollection.find((el) => el.element.isOpened);
      if (target) {
        const dropdown = target.element.dropdown;
        if (!dropdown)
          return false;
        const preparedOptions = isArrowUp ? Array.from(
          dropdown.querySelectorAll(":scope >  *:not(.hidden)")
        ).reverse() : Array.from(dropdown.querySelectorAll(":scope >  *:not(.hidden)"));
        const options = preparedOptions.filter(
          (el) => !el.classList.contains("disabled")
        );
        const current = dropdown.querySelector(".hs-select-option-highlighted");
        if (!current)
          options[0].classList.add("hs-select-option-highlighted");
        let currentInd = options.findIndex((el) => el === current);
        if (currentInd + 1 < options.length) {
          currentInd++;
        } else {
          if (current)
            current.classList.remove("hs-select-option-highlighted");
          target.element.close();
          target.element.toggle.focus();
          return false;
        }
        options[currentInd].focus();
        if (current)
          current.classList.remove("hs-select-option-highlighted");
        options[currentInd].classList.add("hs-select-option-highlighted");
      }
    }
    static onStartEnd(isStart = true) {
      const target = window.$hsSelectCollection.find((el) => el.element.isOpened);
      if (target) {
        const dropdown = target.element.dropdown;
        if (!dropdown)
          return false;
        const preparedOptions = isStart ? Array.from(dropdown.querySelectorAll(":scope >  *:not(.hidden)")) : Array.from(
          dropdown.querySelectorAll(":scope >  *:not(.hidden)")
        ).reverse();
        const options = preparedOptions.filter(
          (el) => !el.classList.contains("disabled")
        );
        const current = dropdown.querySelector(".hs-select-option-highlighted");
        if (options.length) {
          options[0].focus();
          if (current)
            current.classList.remove("hs-select-option-highlighted");
          options[0].classList.add("hs-select-option-highlighted");
        }
      }
    }
    static onEnter(evt) {
      const select = evt.target.previousSibling;
      if (window.$hsSelectCollection.find((el) => el.element.el === select)) {
        const opened = window.$hsSelectCollection.find(
          (el) => el.element.isOpened
        );
        const target = window.$hsSelectCollection.find(
          (el) => el.element.el === select
        );
        opened.element.close();
        target.element.open();
      } else {
        const target = window.$hsSelectCollection.find(
          (el) => el.element.isOpened
        );
        if (target)
          target.element.onSelectOption(
            evt.target.dataset.value || ""
          );
      }
    }
  };
  window.addEventListener("load", () => {
    HSSelect.autoInit();
  });
  document.addEventListener("scroll", () => {
    if (!window.$hsSelectCollection)
      return false;
    const target = window.$hsSelectCollection.find((el) => el.element.isOpened);
    if (target)
      target.element.recalculateDirection();
  });
  if (typeof window !== "undefined") {
    window.HSSelect = HSSelect;
  }
  var select_default = HSSelect;

  // node_modules/preline/src/plugins/stepper/index.ts
  var HSStepper = class extends HSBasePlugin {
    constructor(el, options) {
      super(el, options);
      const data = el.getAttribute("data-hs-stepper");
      const dataOptions = data ? JSON.parse(data) : {};
      const concatOptions = __spreadValues(__spreadValues({}, dataOptions), options);
      this.currentIndex = (concatOptions == null ? void 0 : concatOptions.currentIndex) || 1;
      this.mode = (concatOptions == null ? void 0 : concatOptions.mode) || "linear";
      this.isCompleted = typeof (concatOptions == null ? void 0 : concatOptions.isCompleted) !== "undefined" ? concatOptions == null ? void 0 : concatOptions.isCompleted : false;
      this.totalSteps = 1;
      this.navItems = [];
      this.contentItems = [];
      this.init();
    }
    init() {
      this.createCollection(window.$hsStepperCollection, this);
      this.buildNav();
      this.buildContent();
      this.buildButtons();
      this.setTotalSteps();
    }
    getUncompletedSteps(inIncludedSkipped = false) {
      return this.navItems.filter(
        ({ isCompleted, isSkip }) => inIncludedSkipped ? !isCompleted || isSkip : !isCompleted && !isSkip
      );
    }
    setTotalSteps() {
      this.navItems.forEach((item) => {
        const { index } = item;
        if (index > this.totalSteps)
          this.totalSteps = index;
      });
    }
    // Nav
    buildNav() {
      this.el.querySelectorAll("[data-hs-stepper-nav-item]").forEach((el) => this.addNavItem(el));
      this.navItems.forEach((item) => this.buildNavItem(item));
    }
    buildNavItem(item) {
      const { index, isDisabled, el } = item;
      if (index === this.currentIndex)
        this.setCurrentNavItem();
      if (this.mode !== "linear" || isDisabled) {
        el.addEventListener("click", () => this.handleNavItemClick(item));
      }
    }
    addNavItem(el) {
      const {
        index,
        isFinal = false,
        isCompleted = false,
        isSkip = false,
        isOptional = false,
        isDisabled = false,
        isProcessed = false,
        hasError = false
      } = JSON.parse(el.getAttribute("data-hs-stepper-nav-item"));
      if (isCompleted)
        el.classList.add("success");
      if (isSkip)
        el.classList.add("skipped");
      if (isDisabled) {
        if (el.tagName === "BUTTON" || el.tagName === "INPUT")
          el.setAttribute("disabled", "disabled");
        el.classList.add("disabled");
      }
      if (hasError)
        el.classList.add("error");
      this.navItems.push({
        index,
        isFinal,
        isCompleted,
        isSkip,
        isOptional,
        isDisabled,
        isProcessed,
        hasError,
        el
      });
    }
    setCurrentNavItem() {
      this.navItems.forEach((item) => {
        const { index, el } = item;
        if (index === this.currentIndex)
          this.setCurrentNavItemActions(el);
        else
          this.unsetCurrentNavItemActions(el);
      });
    }
    setCurrentNavItemActions(el) {
      el.classList.add("active");
      this.fireEvent("active", this.currentIndex);
      dispatch("active.hs.stepper", this.el, this.currentIndex);
    }
    getNavItem(n = this.currentIndex) {
      return this.navItems.find(({ index }) => index === n);
    }
    setProcessedNavItemActions(item) {
      item.isProcessed = true;
      item.el.classList.add("processed");
    }
    setErrorNavItemActions(item) {
      item.hasError = true;
      item.el.classList.add("error");
    }
    unsetCurrentNavItemActions(el) {
      el.classList.remove("active");
    }
    handleNavItemClick(item) {
      const { index } = item;
      this.currentIndex = index;
      this.setCurrentNavItem();
      this.setCurrentContentItem();
      this.checkForTheFirstStep();
    }
    // Content
    buildContent() {
      this.el.querySelectorAll("[data-hs-stepper-content-item]").forEach((el) => this.addContentItem(el));
      this.navItems.forEach((item) => this.buildContentItem(item));
    }
    buildContentItem(item) {
      const { index } = item;
      if (index === this.currentIndex)
        this.setCurrentContentItem();
    }
    addContentItem(el) {
      const {
        index,
        isFinal = false,
        isCompleted = false,
        isSkip = false
      } = JSON.parse(el.getAttribute("data-hs-stepper-content-item"));
      if (isCompleted)
        el.classList.add("success");
      if (isSkip)
        el.classList.add("skipped");
      this.contentItems.push({
        index,
        isFinal,
        isCompleted,
        isSkip,
        el
      });
    }
    setCurrentContentItem() {
      if (this.isCompleted) {
        const finalContentItem = this.contentItems.find(({ isFinal }) => isFinal);
        const otherContentItems = this.contentItems.filter(
          ({ isFinal }) => !isFinal
        );
        finalContentItem.el.style.display = "";
        otherContentItems.forEach(({ el }) => el.style.display = "none");
        return false;
      }
      this.contentItems.forEach((item) => {
        const { index, el } = item;
        if (index === this.currentIndex)
          this.setCurrentContentItemActions(el);
        else
          this.unsetCurrentContentItemActions(el);
      });
    }
    hideAllContentItems() {
      this.contentItems.forEach(({ el }) => el.style.display = "none");
    }
    setCurrentContentItemActions(el) {
      el.style.display = "";
    }
    unsetCurrentContentItemActions(el) {
      el.style.display = "none";
    }
    disableAll() {
      const currentNavItem = this.getNavItem(this.currentIndex);
      currentNavItem.hasError = false;
      currentNavItem.isCompleted = false;
      currentNavItem.isDisabled = false;
      currentNavItem.el.classList.remove("error", "success");
      this.disableButtons();
    }
    disableNavItemActions(item) {
      item.isDisabled = true;
      item.el.classList.add("disabled");
    }
    enableNavItemActions(item) {
      item.isDisabled = false;
      item.el.classList.remove("disabled");
    }
    // Buttons
    buildButtons() {
      this.backBtn = this.el.querySelector("[data-hs-stepper-back-btn]");
      this.nextBtn = this.el.querySelector("[data-hs-stepper-next-btn]");
      this.skipBtn = this.el.querySelector("[data-hs-stepper-skip-btn]");
      this.completeStepBtn = this.el.querySelector(
        "[data-hs-stepper-complete-step-btn]"
      );
      this.finishBtn = this.el.querySelector("[data-hs-stepper-finish-btn]");
      this.resetBtn = this.el.querySelector("[data-hs-stepper-reset-btn]");
      this.buildBackButton();
      this.buildNextButton();
      this.buildSkipButton();
      this.buildCompleteStepButton();
      this.buildFinishButton();
      this.buildResetButton();
    }
    // back
    buildBackButton() {
      if (!this.backBtn)
        return;
      this.checkForTheFirstStep();
      this.backBtn.addEventListener("click", () => {
        this.handleBackButtonClick();
        if (this.mode === "linear") {
          const currentNavItem = this.navItems.find(
            ({ index }) => index === this.currentIndex
          );
          const currentContentItem = this.contentItems.find(
            ({ index }) => index === this.currentIndex
          );
          if (!currentNavItem || !currentContentItem)
            return;
          if (currentNavItem.isCompleted) {
            currentNavItem.isCompleted = false;
            currentNavItem.isSkip = false;
            currentNavItem.el.classList.remove("success", "skipped");
          }
          if (currentContentItem.isCompleted) {
            currentContentItem.isCompleted = false;
            currentContentItem.isSkip = false;
            currentContentItem.el.classList.remove("success", "skipped");
          }
          if (this.mode === "linear" && this.currentIndex !== this.totalSteps) {
            if (this.nextBtn)
              this.nextBtn.style.display = "";
            if (this.completeStepBtn)
              this.completeStepBtn.style.display = "";
          }
          this.showSkipButton();
          this.showFinishButton();
          this.showCompleteStepButton();
        }
      });
    }
    handleBackButtonClick() {
      if (this.currentIndex === 1)
        return;
      if (this.mode === "linear") {
        this.removeOptionalClasses();
      }
      this.currentIndex--;
      if (this.mode === "linear") {
        this.removeOptionalClasses();
      }
      this.setCurrentNavItem();
      this.setCurrentContentItem();
      this.checkForTheFirstStep();
      if (this.completeStepBtn)
        this.changeTextAndDisableCompleteButtonIfStepCompleted();
      this.fireEvent("back", this.currentIndex);
      dispatch("back.hs.stepper", this.el, this.currentIndex);
    }
    checkForTheFirstStep() {
      if (this.currentIndex === 1) {
        this.setToDisabled(this.backBtn);
      } else {
        this.setToNonDisabled(this.backBtn);
      }
    }
    setToDisabled(el) {
      if (el.tagName === "BUTTON" || el.tagName === "INPUT")
        el.setAttribute("disabled", "disabled");
      el.classList.add("disabled");
    }
    setToNonDisabled(el) {
      if (el.tagName === "BUTTON" || el.tagName === "INPUT")
        el.removeAttribute("disabled");
      el.classList.remove("disabled");
    }
    // next
    buildNextButton() {
      if (!this.nextBtn)
        return;
      this.nextBtn.addEventListener("click", () => {
        var _a;
        this.fireEvent("beforeNext", this.currentIndex);
        dispatch("beforeNext.hs.stepper", this.el, this.currentIndex);
        if ((_a = this.getNavItem(this.currentIndex)) == null ? void 0 : _a.isProcessed) {
          this.disableAll();
          return false;
        }
        this.goToNext();
      });
    }
    unsetProcessedNavItemActions(item) {
      item.isProcessed = false;
      item.el.classList.remove("processed");
    }
    handleNextButtonClick(infinite = true) {
      if (infinite) {
        if (this.currentIndex === this.totalSteps)
          this.currentIndex = 1;
        else
          this.currentIndex++;
      } else {
        const nonCompletedSteps = this.getUncompletedSteps();
        if (nonCompletedSteps.length === 1) {
          const { index } = nonCompletedSteps[0];
          this.currentIndex = index;
        } else {
          if (this.currentIndex === this.totalSteps)
            return;
          this.currentIndex++;
        }
      }
      if (this.mode === "linear") {
        this.removeOptionalClasses();
      }
      this.setCurrentNavItem();
      this.setCurrentContentItem();
      this.checkForTheFirstStep();
      if (this.completeStepBtn)
        this.changeTextAndDisableCompleteButtonIfStepCompleted();
      this.showSkipButton();
      this.showFinishButton();
      this.showCompleteStepButton();
      this.fireEvent("next", this.currentIndex);
      dispatch("next.hs.stepper", this.el, this.currentIndex);
    }
    removeOptionalClasses() {
      const currentNavItem = this.navItems.find(
        ({ index }) => index === this.currentIndex
      );
      const currentContentItem = this.contentItems.find(
        ({ index }) => index === this.currentIndex
      );
      currentNavItem.isSkip = false;
      currentNavItem.hasError = false;
      currentNavItem.isDisabled = false;
      currentContentItem.isSkip = false;
      currentNavItem.el.classList.remove("skipped", "success", "error");
      currentContentItem.el.classList.remove("skipped", "success", "error");
    }
    // skip
    buildSkipButton() {
      if (!this.skipBtn)
        return;
      this.showSkipButton();
      this.skipBtn.addEventListener("click", () => {
        this.handleSkipButtonClick();
        if (this.mode === "linear" && this.currentIndex === this.totalSteps) {
          if (this.nextBtn)
            this.nextBtn.style.display = "none";
          if (this.completeStepBtn)
            this.completeStepBtn.style.display = "none";
          if (this.finishBtn)
            this.finishBtn.style.display = "";
        }
      });
    }
    setSkipItem(n) {
      const targetNavItem = this.navItems.find(
        ({ index }) => index === (n || this.currentIndex)
      );
      const targetContentItem = this.contentItems.find(
        ({ index }) => index === (n || this.currentIndex)
      );
      if (!targetNavItem || !targetContentItem)
        return;
      this.setSkipItemActions(targetNavItem);
      this.setSkipItemActions(targetContentItem);
    }
    setSkipItemActions(item) {
      item.isSkip = true;
      item.el.classList.add("skipped");
    }
    showSkipButton() {
      if (!this.skipBtn)
        return;
      const { isOptional } = this.navItems.find(
        ({ index }) => index === this.currentIndex
      );
      if (isOptional)
        this.skipBtn.style.display = "";
      else
        this.skipBtn.style.display = "none";
    }
    handleSkipButtonClick() {
      this.setSkipItem();
      this.handleNextButtonClick();
      this.fireEvent("skip", this.currentIndex);
      dispatch("skip.hs.stepper", this.el, this.currentIndex);
    }
    // complete
    buildCompleteStepButton() {
      if (!this.completeStepBtn)
        return;
      this.completeStepBtnDefaultText = this.completeStepBtn.innerText;
      this.completeStepBtn.addEventListener(
        "click",
        () => this.handleCompleteStepButtonClick()
      );
    }
    changeTextAndDisableCompleteButtonIfStepCompleted() {
      const currentNavItem = this.navItems.find(
        ({ index }) => index === this.currentIndex
      );
      const { completedText } = JSON.parse(
        this.completeStepBtn.getAttribute("data-hs-stepper-complete-step-btn")
      );
      if (!currentNavItem)
        return;
      if (currentNavItem.isCompleted) {
        this.completeStepBtn.innerText = completedText || this.completeStepBtnDefaultText;
        this.completeStepBtn.setAttribute("disabled", "disabled");
        this.completeStepBtn.classList.add("disabled");
      } else {
        this.completeStepBtn.innerText = this.completeStepBtnDefaultText;
        this.completeStepBtn.removeAttribute("disabled");
        this.completeStepBtn.classList.remove("disabled");
      }
    }
    setCompleteItem(n) {
      const targetNavItem = this.navItems.find(
        ({ index }) => index === (n || this.currentIndex)
      );
      const targetContentItem = this.contentItems.find(
        ({ index }) => index === (n || this.currentIndex)
      );
      if (!targetNavItem || !targetContentItem)
        return;
      this.setCompleteItemActions(targetNavItem);
      this.setCompleteItemActions(targetContentItem);
    }
    setCompleteItemActions(item) {
      item.isCompleted = true;
      item.el.classList.add("success");
    }
    showCompleteStepButton() {
      if (!this.completeStepBtn)
        return;
      const nonCompletedSteps = this.getUncompletedSteps();
      if (nonCompletedSteps.length === 1)
        this.completeStepBtn.style.display = "none";
      else
        this.completeStepBtn.style.display = "";
    }
    handleCompleteStepButtonClick() {
      this.setCompleteItem();
      this.fireEvent("complete", this.currentIndex);
      dispatch("complete.hs.stepper", this.el, this.currentIndex);
      this.handleNextButtonClick(false);
      this.showFinishButton();
      this.showCompleteStepButton();
      this.checkForTheFirstStep();
      if (this.completeStepBtn)
        this.changeTextAndDisableCompleteButtonIfStepCompleted();
      this.showSkipButton();
    }
    // finish
    buildFinishButton() {
      if (!this.finishBtn)
        return;
      if (this.isCompleted) {
        this.setCompleted();
      }
      this.finishBtn.addEventListener(
        "click",
        () => this.handleFinishButtonClick()
      );
    }
    setCompleted() {
      this.el.classList.add("completed");
    }
    unsetCompleted() {
      this.el.classList.remove("completed");
    }
    showFinishButton() {
      if (!this.finishBtn)
        return;
      const nonCompletedSteps = this.getUncompletedSteps();
      if (nonCompletedSteps.length === 1)
        this.finishBtn.style.display = "";
      else
        this.finishBtn.style.display = "none";
    }
    handleFinishButtonClick() {
      const uncompletedSteps = this.getUncompletedSteps();
      const uncompletedOrSkipSteps = this.getUncompletedSteps(true);
      const { el } = this.contentItems.find(({ isFinal }) => isFinal);
      if (uncompletedSteps.length)
        uncompletedSteps.forEach(({ index }) => this.setCompleteItem(index));
      this.currentIndex = this.totalSteps;
      this.setCurrentNavItem();
      this.hideAllContentItems();
      const currentNavItem = this.navItems.find(
        ({ index }) => index === this.currentIndex
      );
      const currentNavItemEl = currentNavItem ? currentNavItem.el : null;
      currentNavItemEl.classList.remove("active");
      el.style.display = "block";
      if (this.backBtn)
        this.backBtn.style.display = "none";
      if (this.nextBtn)
        this.nextBtn.style.display = "none";
      if (this.skipBtn)
        this.skipBtn.style.display = "none";
      if (this.completeStepBtn)
        this.completeStepBtn.style.display = "none";
      if (this.finishBtn)
        this.finishBtn.style.display = "none";
      if (this.resetBtn)
        this.resetBtn.style.display = "";
      if (uncompletedOrSkipSteps.length <= 1) {
        this.isCompleted = true;
        this.setCompleted();
      }
      this.fireEvent("finish", this.currentIndex);
      dispatch("finish.hs.stepper", this.el, this.currentIndex);
    }
    // reset
    buildResetButton() {
      if (!this.resetBtn)
        return;
      this.resetBtn.addEventListener(
        "click",
        () => this.handleResetButtonClick()
      );
    }
    handleResetButtonClick() {
      if (this.backBtn)
        this.backBtn.style.display = "";
      if (this.nextBtn)
        this.nextBtn.style.display = "";
      if (this.completeStepBtn) {
        this.completeStepBtn.style.display = "";
        this.completeStepBtn.innerText = this.completeStepBtnDefaultText;
        this.completeStepBtn.removeAttribute("disabled");
        this.completeStepBtn.classList.remove("disabled");
      }
      if (this.resetBtn)
        this.resetBtn.style.display = "none";
      this.navItems.forEach((item) => {
        const { el } = item;
        item.isSkip = false;
        item.isCompleted = false;
        this.unsetCurrentNavItemActions(el);
        el.classList.remove("success", "skipped");
      });
      this.contentItems.forEach((item) => {
        const { el } = item;
        item.isSkip = false;
        item.isCompleted = false;
        this.unsetCurrentContentItemActions(el);
        el.classList.remove("success", "skipped");
      });
      this.currentIndex = 1;
      this.setCurrentNavItem();
      this.setCurrentContentItem();
      this.showFinishButton();
      this.showCompleteStepButton();
      this.checkForTheFirstStep();
      this.unsetCompleted();
      this.isCompleted = false;
      this.fireEvent("reset", this.currentIndex);
      dispatch("reset.hs.stepper", this.el, this.currentIndex);
    }
    // Public methods
    setProcessedNavItem(n) {
      const targetNavItem = this.getNavItem(n);
      if (!targetNavItem)
        return;
      this.setProcessedNavItemActions(targetNavItem);
    }
    unsetProcessedNavItem(n) {
      const targetNavItem = this.getNavItem(n);
      if (!targetNavItem)
        return;
      this.unsetProcessedNavItemActions(targetNavItem);
    }
    goToNext() {
      if (this.mode === "linear")
        this.setCompleteItem();
      this.handleNextButtonClick(this.mode !== "linear");
      if (this.mode === "linear" && this.currentIndex === this.totalSteps) {
        if (this.nextBtn)
          this.nextBtn.style.display = "none";
        if (this.completeStepBtn)
          this.completeStepBtn.style.display = "none";
      }
    }
    disableButtons() {
      if (this.backBtn)
        this.setToDisabled(this.backBtn);
      if (this.nextBtn)
        this.setToDisabled(this.nextBtn);
    }
    enableButtons() {
      if (this.backBtn)
        this.setToNonDisabled(this.backBtn);
      if (this.nextBtn)
        this.setToNonDisabled(this.nextBtn);
    }
    setErrorNavItem(n) {
      const targetNavItem = this.getNavItem(n);
      if (!targetNavItem)
        return;
      this.setErrorNavItemActions(targetNavItem);
    }
    // Static methods
    static getInstance(target, isInstance) {
      const elInCollection = window.$hsStepperCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element : null;
    }
    static autoInit() {
      if (!window.$hsStepperCollection)
        window.$hsStepperCollection = [];
      document.querySelectorAll("[data-hs-stepper]:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsStepperCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSStepper(el);
      });
    }
  };
  window.addEventListener("load", () => {
    HSStepper.autoInit();
  });
  if (typeof window !== "undefined") {
    window.HSStepper = HSStepper;
  }
  var stepper_default = HSStepper;

  // node_modules/preline/src/plugins/strong-password/index.ts
  var HSStrongPassword = class extends HSBasePlugin {
    constructor(el, options) {
      super(el, options);
      this.isOpened = false;
      this.strength = 0;
      this.passedRules = /* @__PURE__ */ new Set();
      const data = el.getAttribute("data-hs-strong-password");
      const dataOptions = data ? JSON.parse(data) : {};
      const concatOptions = __spreadValues(__spreadValues({}, dataOptions), options);
      this.target = (concatOptions == null ? void 0 : concatOptions.target) ? typeof (concatOptions == null ? void 0 : concatOptions.target) === "string" ? document.querySelector(concatOptions.target) : concatOptions.target : null;
      this.hints = (concatOptions == null ? void 0 : concatOptions.hints) ? typeof (concatOptions == null ? void 0 : concatOptions.hints) === "string" ? document.querySelector(concatOptions.hints) : concatOptions.hints : null;
      this.stripClasses = (concatOptions == null ? void 0 : concatOptions.stripClasses) || null;
      this.minLength = (concatOptions == null ? void 0 : concatOptions.minLength) || 6;
      this.mode = (concatOptions == null ? void 0 : concatOptions.mode) || "default";
      this.popoverSpace = (concatOptions == null ? void 0 : concatOptions.popoverSpace) || 10;
      this.checksExclude = (concatOptions == null ? void 0 : concatOptions.checksExclude) || [];
      this.availableChecks = [
        "lowercase",
        "uppercase",
        "numbers",
        "special-characters",
        "min-length"
      ].filter((el2) => !this.checksExclude.includes(el2));
      this.specialCharactersSet = (concatOptions == null ? void 0 : concatOptions.specialCharactersSet) || "!\"#$%&'()*+,-./:;<=>?@[\\\\\\]^_`{|}~";
      if (this.target)
        this.init();
    }
    init() {
      this.createCollection(window.$hsStrongPasswordCollection, this);
      if (this.availableChecks.length)
        this.build();
    }
    build() {
      this.buildStrips();
      if (this.hints)
        this.buildHints();
      this.setStrength(this.target.value);
      this.target.addEventListener(
        "input",
        (evt) => {
          this.setStrength(evt.target.value);
        }
      );
    }
    buildStrips() {
      this.el.innerHTML = "";
      if (this.stripClasses) {
        for (let i = 0; i < this.availableChecks.length; i++) {
          const newStrip = htmlToElement("<div></div>");
          classToClassList(this.stripClasses, newStrip);
          this.el.append(newStrip);
        }
      }
    }
    buildHints() {
      this.weakness = this.hints.querySelector(
        "[data-hs-strong-password-hints-weakness-text]"
      ) || null;
      this.rules = Array.from(
        this.hints.querySelectorAll(
          "[data-hs-strong-password-hints-rule-text]"
        )
      ) || null;
      this.rules.forEach((rule) => {
        var _a;
        const ruleValue = rule.getAttribute(
          "data-hs-strong-password-hints-rule-text"
        );
        if ((_a = this.checksExclude) == null ? void 0 : _a.includes(ruleValue))
          rule.remove();
      });
      if (this.weakness)
        this.buildWeakness();
      if (this.rules)
        this.buildRules();
      if (this.mode === "popover") {
        this.target.addEventListener("focus", () => {
          this.isOpened = true;
          this.hints.classList.remove("hidden");
          this.hints.classList.add("block");
          this.recalculateDirection();
        });
        this.target.addEventListener("blur", () => {
          this.isOpened = false;
          this.hints.classList.remove(
            "block",
            "bottom-full",
            "top-full"
          );
          this.hints.classList.add("hidden");
          this.hints.style.marginTop = "";
          this.hints.style.marginBottom = "";
        });
      }
    }
    buildWeakness() {
      this.checkStrength(this.target.value);
      this.setWeaknessText();
      this.target.addEventListener(
        "input",
        () => setTimeout(() => this.setWeaknessText())
      );
    }
    buildRules() {
      this.setRulesText();
      this.target.addEventListener(
        "input",
        () => setTimeout(() => this.setRulesText())
      );
    }
    setWeaknessText() {
      const weaknessText = this.weakness.getAttribute(
        "data-hs-strong-password-hints-weakness-text"
      );
      const weaknessTextToJson = JSON.parse(weaknessText);
      this.weakness.textContent = weaknessTextToJson[this.strength];
    }
    setRulesText() {
      this.rules.forEach((rule) => {
        const ruleValue = rule.getAttribute(
          "data-hs-strong-password-hints-rule-text"
        );
        this.checkIfPassed(rule, this.passedRules.has(ruleValue));
      });
    }
    togglePopover() {
      const popover = this.el.querySelector(".popover");
      if (popover)
        popover.classList.toggle("show");
    }
    checkStrength(val) {
      const passedRules = /* @__PURE__ */ new Set();
      const regexps = {
        lowercase: /[a-z]+/,
        uppercase: /[A-Z]+/,
        numbers: /[0-9]+/,
        "special-characters": new RegExp(`[${this.specialCharactersSet}]`)
      };
      let strength = 0;
      if (this.availableChecks.includes("lowercase") && val.match(regexps["lowercase"])) {
        strength += 1;
        passedRules.add("lowercase");
      }
      if (this.availableChecks.includes("uppercase") && val.match(regexps["uppercase"])) {
        strength += 1;
        passedRules.add("uppercase");
      }
      if (this.availableChecks.includes("numbers") && val.match(regexps["numbers"])) {
        strength += 1;
        passedRules.add("numbers");
      }
      if (this.availableChecks.includes("special-characters") && val.match(regexps["special-characters"])) {
        strength += 1;
        passedRules.add("special-characters");
      }
      if (this.availableChecks.includes("min-length") && val.length >= this.minLength) {
        strength += 1;
        passedRules.add("min-length");
      }
      if (!val.length) {
        strength = 0;
      }
      if (strength === this.availableChecks.length)
        this.el.classList.add("accepted");
      else
        this.el.classList.remove("accepted");
      this.strength = strength;
      this.passedRules = passedRules;
      return {
        strength: this.strength,
        rules: this.passedRules
      };
    }
    checkIfPassed(el, isRulePassed = false) {
      const check = el.querySelector("[data-check]");
      const uncheck = el.querySelector("[data-uncheck]");
      if (isRulePassed) {
        el.classList.add("active");
        check.classList.remove("hidden");
        uncheck.classList.add("hidden");
      } else {
        el.classList.remove("active");
        check.classList.add("hidden");
        uncheck.classList.remove("hidden");
      }
    }
    setStrength(val) {
      const { strength, rules } = this.checkStrength(val);
      const payload = {
        strength,
        rules
      };
      this.hideStrips(strength);
      this.fireEvent("change", payload);
      dispatch("change.hs.strongPassword", this.el, payload);
    }
    hideStrips(qty) {
      Array.from(this.el.children).forEach((el, i) => {
        if (i < qty)
          el.classList.add("passed");
        else
          el.classList.remove("passed");
      });
    }
    // Public methods
    recalculateDirection() {
      if (isEnoughSpace(
        this.hints,
        this.target,
        "bottom",
        this.popoverSpace
      )) {
        this.hints.classList.remove("bottom-full");
        this.hints.classList.add("top-full");
        this.hints.style.marginBottom = "";
        this.hints.style.marginTop = `${this.popoverSpace}px`;
      } else {
        this.hints.classList.remove("top-full");
        this.hints.classList.add("bottom-full");
        this.hints.style.marginTop = "";
        this.hints.style.marginBottom = `${this.popoverSpace}px`;
      }
    }
    // Static methods
    static getInstance(target) {
      const elInCollection = window.$hsStrongPasswordCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? elInCollection.element : null;
    }
    static autoInit() {
      if (!window.$hsStrongPasswordCollection)
        window.$hsStrongPasswordCollection = [];
      document.querySelectorAll(
        "[data-hs-strong-password]:not(.--prevent-on-load-init)"
      ).forEach((el) => {
        if (!window.$hsStrongPasswordCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        )) {
          const data = el.getAttribute("data-hs-strong-password");
          const options = data ? JSON.parse(data) : {};
          new HSStrongPassword(el, options);
        }
      });
    }
  };
  window.addEventListener("load", () => {
    HSStrongPassword.autoInit();
  });
  document.addEventListener("scroll", () => {
    if (!window.$hsStrongPasswordCollection)
      return false;
    const target = window.$hsStrongPasswordCollection.find(
      (el) => el.element.isOpened
    );
    if (target)
      target.element.recalculateDirection();
  });
  if (typeof window !== "undefined") {
    window.HSStrongPassword = HSStrongPassword;
  }
  var strong_password_default = HSStrongPassword;

  // node_modules/preline/src/plugins/tabs/index.ts
  var HSTabs = class extends HSBasePlugin {
    constructor(el, options, events) {
      super(el, options, events);
      this.toggles = this.el.querySelectorAll("[data-hs-tab]");
      this.extraToggleId = this.el.getAttribute("hs-data-tab-select");
      this.extraToggle = document.querySelector(this.extraToggleId);
      this.current = Array.from(this.toggles).find(
        (el2) => el2.classList.contains("active")
      );
      this.currentContentId = this.current.getAttribute("data-hs-tab");
      this.currentContent = document.querySelector(this.currentContentId);
      this.prev = null;
      this.prevContentId = null;
      this.prevContent = null;
      this.init();
    }
    init() {
      this.createCollection(window.$hsTabsCollection, this);
      this.toggles.forEach((el) => {
        el.addEventListener("click", () => this.open(el));
      });
      if (this.extraToggle) {
        this.extraToggle.addEventListener("change", (evt) => this.change(evt));
      }
    }
    open(el) {
      this.prev = this.current;
      this.prevContentId = this.currentContentId;
      this.prevContent = this.currentContent;
      this.current = el;
      this.currentContentId = this.current.getAttribute("data-hs-tab");
      this.currentContent = document.querySelector(this.currentContentId);
      this.prev.classList.remove("active");
      this.prevContent.classList.add("hidden");
      this.current.classList.add("active");
      this.currentContent.classList.remove("hidden");
      this.fireEvent("change", {
        el,
        prev: this.prevContentId,
        current: this.currentContentId
      });
      dispatch("change.hs.tab", el, {
        el,
        prev: this.prevContentId,
        current: this.currentContentId
      });
    }
    change(evt) {
      const toggle = document.querySelector(
        `[data-hs-tab="${evt.target.value}"]`
      );
      if (toggle)
        toggle.click();
    }
    // Static methods
    static getInstance(target, isInstance) {
      const elInCollection = window.$hsTabsCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element : null;
    }
    static autoInit() {
      if (!window.$hsTabsCollection)
        window.$hsTabsCollection = [];
      document.querySelectorAll(
        '[role="tablist"]:not(select):not(.--prevent-on-load-init)'
      ).forEach((el) => {
        if (!window.$hsTabsCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSTabs(el);
      });
      if (window.$hsTabsCollection)
        document.addEventListener("keydown", (evt) => HSTabs.accessibility(evt));
    }
    static open(target) {
      const elInCollection = window.$hsTabsCollection.find(
        (el) => Array.from(el.element.toggles).includes(
          typeof target === "string" ? document.querySelector(target) : target
        )
      );
      const targetInCollection = Array.from(elInCollection.element.toggles).find(
        (el) => el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (targetInCollection && !targetInCollection.classList.contains("active"))
        elInCollection.element.open(targetInCollection);
    }
    // Accessibility methods
    static accessibility(evt) {
      const target = document.querySelector("[data-hs-tab]:focus");
      if (target && TABS_ACCESSIBILITY_KEY_SET.includes(evt.code) && !evt.metaKey) {
        const isVertical = target.closest('[role="tablist"]').getAttribute("data-hs-tabs-vertical");
        evt.preventDefault();
        switch (evt.code) {
          case (isVertical === "true" ? "ArrowUp" : "ArrowLeft"):
            this.onArrow();
            break;
          case (isVertical === "true" ? "ArrowDown" : "ArrowRight"):
            this.onArrow(false);
            break;
          case "Home":
            this.onStartEnd();
            break;
          case "End":
            this.onStartEnd(false);
            break;
          default:
            break;
        }
      }
    }
    static onArrow(isOpposite = true) {
      const target = document.querySelector("[data-hs-tab]:focus").closest('[role="tablist"]');
      const targetInCollection = window.$hsTabsCollection.find(
        (el) => el.element.el === target
      );
      if (targetInCollection) {
        const toggles = isOpposite ? Array.from(targetInCollection.element.toggles).reverse() : Array.from(targetInCollection.element.toggles);
        const focused = toggles.find((el) => document.activeElement === el);
        let focusedInd = toggles.findIndex((el) => el === focused);
        focusedInd = focusedInd + 1 < toggles.length ? focusedInd + 1 : 0;
        toggles[focusedInd].focus();
        toggles[focusedInd].click();
      }
    }
    static onStartEnd(isOpposite = true) {
      const target = document.querySelector("[data-hs-tab]:focus").closest('[role="tablist"]');
      const targetInCollection = window.$hsTabsCollection.find(
        (el) => el.element.el === target
      );
      if (targetInCollection) {
        const toggles = isOpposite ? Array.from(targetInCollection.element.toggles) : Array.from(targetInCollection.element.toggles).reverse();
        if (toggles.length) {
          toggles[0].focus();
          toggles[0].click();
        }
      }
    }
    // Backward compatibility
    static on(evt, target, cb) {
      const elInCollection = window.$hsTabsCollection.find(
        (el) => Array.from(el.element.toggles).includes(
          typeof target === "string" ? document.querySelector(target) : target
        )
      );
      if (elInCollection)
        elInCollection.element.events[evt] = cb;
    }
  };
  window.addEventListener("load", () => {
    HSTabs.autoInit();
  });
  if (typeof window !== "undefined") {
    window.HSTabs = HSTabs;
  }
  var tabs_default = HSTabs;

  // node_modules/preline/src/plugins/theme-switch/index.ts
  var HSThemeSwitch = class extends HSBasePlugin {
    constructor(el, options) {
      super(el, options);
      const data = el.getAttribute("data-hs-theme-switch");
      const dataOptions = data ? JSON.parse(data) : {};
      const concatOptions = __spreadValues(__spreadValues({}, dataOptions), options);
      this.theme = (concatOptions == null ? void 0 : concatOptions.theme) || localStorage.getItem("hs_theme") || "default";
      this.themeSet = ["light", "dark", "default"];
      this.init();
    }
    init() {
      this.createCollection(window.$hsThemeSwitchCollection, this);
      if (this.theme !== "default")
        this.setAppearance();
    }
    setResetStyles() {
      const style = document.createElement("style");
      style.innerText = `*{transition: unset !important;}`;
      style.setAttribute("data-hs-appearance-onload-styles", "");
      document.head.appendChild(style);
      return style;
    }
    addSystemThemeObserver() {
      window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", ({ matches }) => {
        if (matches)
          this.setAppearance("dark", false);
        else
          this.setAppearance("default", false);
      });
    }
    removeSystemThemeObserver() {
      window.matchMedia("(prefers-color-scheme: dark)").removeEventListener;
    }
    // Public methods
    setAppearance(theme = this.theme, isSaveToLocalStorage = true, isSetDispatchEvent = true) {
      const html2 = document.querySelector("html");
      const resetStyles = this.setResetStyles();
      if (isSaveToLocalStorage)
        localStorage.setItem("hs_theme", theme);
      if (theme === "auto")
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "default";
      html2.classList.remove("light", "dark", "default", "auto");
      html2.classList.add(theme);
      setTimeout(() => resetStyles.remove());
      if (isSetDispatchEvent)
        window.dispatchEvent(
          new CustomEvent("on-hs-appearance-change", { detail: theme })
        );
    }
    // Static methods
    static getInstance(target) {
      const elInCollection = window.$hsThemeSwitchCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? elInCollection.element : null;
    }
    static autoInit() {
      if (!window.$hsThemeSwitchCollection)
        window.$hsThemeSwitchCollection = [];
      const toggleObserveSystemTheme = (el) => {
        if (localStorage.getItem("hs_theme") === "auto")
          el.addSystemThemeObserver();
        else
          el.removeSystemThemeObserver();
      };
      document.querySelectorAll("[data-hs-theme-switch]:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsThemeSwitchCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        )) {
          const switchTheme = new HSThemeSwitch(el);
          switchTheme.el.checked = switchTheme.theme === "dark";
          toggleObserveSystemTheme(switchTheme);
          switchTheme.el.addEventListener("change", (evt) => {
            const theme = evt.target.checked ? "dark" : "default";
            switchTheme.setAppearance(theme);
            toggleObserveSystemTheme(switchTheme);
          });
        }
      });
      document.querySelectorAll(
        "[data-hs-theme-click-value]:not(.--prevent-on-load-init)"
      ).forEach((el) => {
        const theme = el.getAttribute("data-hs-theme-click-value");
        const switchTheme = new HSThemeSwitch(el);
        toggleObserveSystemTheme(switchTheme);
        switchTheme.el.addEventListener("click", () => {
          switchTheme.setAppearance(theme);
          toggleObserveSystemTheme(switchTheme);
        });
      });
    }
  };
  window.addEventListener("load", () => {
    HSThemeSwitch.autoInit();
  });
  if (window.$hsThemeSwitchCollection) {
    window.addEventListener(
      "on-hs-appearance-change",
      (evt) => {
        window.$hsThemeSwitchCollection.forEach((el) => {
          el.element.el.checked = evt.detail === "dark";
        });
      }
    );
  }
  if (typeof window !== "undefined") {
    window.HSThemeSwitch = HSThemeSwitch;
  }

  // node_modules/preline/src/plugins/toggle-count/index.ts
  var HSToggleCount = class extends HSBasePlugin {
    constructor(el, options) {
      super(el, options);
      const data = el.getAttribute("data-hs-toggle-count");
      const dataOptions = data ? JSON.parse(data) : {};
      const concatOptions = __spreadValues(__spreadValues({}, dataOptions), options);
      this.target = (concatOptions == null ? void 0 : concatOptions.target) ? typeof (concatOptions == null ? void 0 : concatOptions.target) === "string" ? document.querySelector(concatOptions.target) : concatOptions.target : null;
      this.min = (concatOptions == null ? void 0 : concatOptions.min) || 0;
      this.max = (concatOptions == null ? void 0 : concatOptions.max) || 0;
      this.duration = (concatOptions == null ? void 0 : concatOptions.duration) || 700;
      this.isChecked = this.target.checked || false;
      if (this.target)
        this.init();
    }
    init() {
      this.createCollection(window.$hsToggleCountCollection, this);
      if (this.isChecked)
        this.el.innerText = String(this.max);
      this.target.addEventListener("change", () => {
        this.isChecked = !this.isChecked;
        this.toggle();
      });
    }
    toggle() {
      if (this.isChecked)
        this.countUp();
      else
        this.countDown();
    }
    animate(from, to) {
      let startTimestamp = 0;
      const step = (timestamp) => {
        if (!startTimestamp)
          startTimestamp = timestamp;
        const progress = Math.min(
          (timestamp - startTimestamp) / this.duration,
          1
        );
        this.el.innerText = String(Math.floor(progress * (to - from) + from));
        if (progress < 1)
          window.requestAnimationFrame(step);
      };
      window.requestAnimationFrame(step);
    }
    // Public methods
    countUp() {
      this.animate(this.min, this.max);
    }
    countDown() {
      this.animate(this.max, this.min);
    }
    // Static methods
    static getInstance(target, isInstance) {
      const elInCollection = window.$hsToggleCountCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element : null;
    }
    static autoInit() {
      if (!window.$hsToggleCountCollection)
        window.$hsToggleCountCollection = [];
      document.querySelectorAll("[data-hs-toggle-count]:not(.--prevent-on-load-init)").forEach((el) => {
        if (!window.$hsToggleCountCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSToggleCount(el);
      });
    }
  };
  window.addEventListener("load", () => {
    HSToggleCount.autoInit();
  });
  if (typeof window !== "undefined") {
    window.HSToggleCount = HSToggleCount;
  }
  var toggle_count_default = HSToggleCount;

  // node_modules/preline/src/plugins/toggle-password/index.ts
  var HSTogglePassword = class extends HSBasePlugin {
    constructor(el, options) {
      super(el, options);
      const data = el.getAttribute("data-hs-toggle-password");
      const dataOptions = data ? JSON.parse(data) : {};
      const concatOptions = __spreadValues(__spreadValues({}, dataOptions), options);
      const targets = [];
      if ((concatOptions == null ? void 0 : concatOptions.target) && typeof (concatOptions == null ? void 0 : concatOptions.target) === "string") {
        const ids = concatOptions == null ? void 0 : concatOptions.target.split(",");
        ids.forEach((id) => {
          targets.push(document.querySelector(id));
        });
      } else if ((concatOptions == null ? void 0 : concatOptions.target) && typeof (concatOptions == null ? void 0 : concatOptions.target) === "object") {
        concatOptions.target.forEach(
          (el2) => targets.push(document.querySelector(el2))
        );
      } else {
        concatOptions.target.forEach(
          (el2) => targets.push(el2)
        );
      }
      this.target = targets;
      this.isShown = this.el.hasAttribute("type") ? this.el.checked : false;
      this.eventType = isFormElement(this.el) ? "change" : "click";
      this.isMultiple = this.target.length > 1 && !!this.el.closest("[data-hs-toggle-password-group]");
      if (this.target)
        this.init();
    }
    init() {
      this.createCollection(window.$hsTogglePasswordCollection, this);
      if (!this.isShown) {
        this.hide();
      } else {
        this.show();
      }
      this.el.addEventListener(this.eventType, () => {
        if (this.isShown) {
          this.hide();
        } else {
          this.show();
        }
        this.fireEvent("toggle", this.target);
        dispatch("toggle.hs.toggle-select", this.el, this.target);
      });
    }
    getMultipleToggles() {
      const group = this.el.closest("[data-hs-toggle-password-group]");
      const toggles = group.querySelectorAll("[data-hs-toggle-password]");
      const togglesInCollection = [];
      toggles.forEach((el) => {
        togglesInCollection.push(
          HSTogglePassword.getInstance(el)
        );
      });
      return togglesInCollection;
    }
    // Public methods
    show() {
      if (this.isMultiple) {
        const toggles = this.getMultipleToggles();
        toggles.forEach(
          (el) => el ? el.isShown = true : false
        );
        this.el.closest("[data-hs-toggle-password-group]").classList.add("active");
      } else {
        this.isShown = true;
        this.el.classList.add("active");
      }
      this.target.forEach((el) => {
        el.type = "text";
      });
    }
    hide() {
      if (this.isMultiple) {
        const toggles = this.getMultipleToggles();
        toggles.forEach(
          (el) => el ? el.isShown = false : false
        );
        this.el.closest("[data-hs-toggle-password-group]").classList.remove("active");
      } else {
        this.isShown = false;
        this.el.classList.remove("active");
      }
      this.target.forEach((el) => {
        el.type = "password";
      });
    }
    // Static methods
    static getInstance(target, isInstance) {
      const elInCollection = window.$hsTogglePasswordCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element : null;
    }
    static autoInit() {
      if (!window.$hsTogglePasswordCollection)
        window.$hsTogglePasswordCollection = [];
      document.querySelectorAll(
        "[data-hs-toggle-password]:not(.--prevent-on-load-init)"
      ).forEach((el) => {
        if (!window.$hsTogglePasswordCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSTogglePassword(el);
      });
    }
  };
  window.addEventListener("load", () => {
    HSTogglePassword.autoInit();
  });
  if (typeof window !== "undefined") {
    window.HSTogglePassword = HSTogglePassword;
  }
  var toggle_password_default = HSTogglePassword;

  // node_modules/preline/src/plugins/tooltip/index.ts
  var HSTooltip = class extends HSBasePlugin {
    constructor(el, options, events) {
      super(el, options, events);
      if (this.el) {
        this.toggle = this.el.querySelector(".hs-tooltip-toggle") || this.el;
        this.content = this.el.querySelector(".hs-tooltip-content");
        this.eventMode = getClassProperty(this.el, "--trigger") || "hover";
        this.preventPopper = getClassProperty(
          this.el,
          "--prevent-popper",
          "false"
        );
        this.placement = getClassProperty(this.el, "--placement");
        this.strategy = getClassProperty(
          this.el,
          "--strategy"
        );
      }
      if (this.el && this.toggle && this.content)
        this.init();
    }
    init() {
      this.createCollection(window.$hsTooltipCollection, this);
      if (this.eventMode === "click") {
        this.toggle.addEventListener("click", () => this.click());
      } else if (this.eventMode === "focus") {
        this.toggle.addEventListener("click", () => this.focus());
      } else if (this.eventMode === "hover") {
        this.toggle.addEventListener("mouseenter", () => this.enter());
        this.toggle.addEventListener("mouseleave", () => this.leave());
      }
      if (this.preventPopper === "false")
        this.buildPopper();
    }
    enter() {
      this.show();
    }
    leave() {
      this.hide();
    }
    click() {
      if (this.el.classList.contains("show"))
        return false;
      this.show();
      const handle = () => {
        setTimeout(() => {
          this.hide();
          this.toggle.removeEventListener("click", handle, true);
          this.toggle.removeEventListener("blur", handle, true);
        });
      };
      this.toggle.addEventListener("click", handle, true);
      this.toggle.addEventListener("blur", handle, true);
    }
    focus() {
      this.show();
      const handle = () => {
        this.hide();
        this.toggle.removeEventListener("blur", handle, true);
      };
      this.toggle.addEventListener("blur", handle, true);
    }
    buildPopper() {
      this.popperInstance = createPopper(this.toggle, this.content, {
        placement: POSITIONS[this.placement] || "top",
        strategy: this.strategy || "fixed",
        modifiers: [
          {
            name: "offset",
            options: {
              offset: [0, 5]
            }
          }
        ]
      });
    }
    // Public methods
    show() {
      this.content.classList.remove("hidden");
      if (this.preventPopper === "false") {
        this.popperInstance.setOptions((options) => __spreadProps(__spreadValues({}, options), {
          modifiers: [
            ...options.modifiers,
            {
              name: "eventListeners",
              enabled: true
            }
          ]
        }));
        this.popperInstance.update();
      }
      setTimeout(() => {
        this.el.classList.add("show");
        this.fireEvent("show", this.el);
        dispatch("show.hs.tooltip", this.el, this.el);
      });
    }
    hide() {
      this.el.classList.remove("show");
      if (this.preventPopper === "false") {
        this.popperInstance.setOptions((options) => __spreadProps(__spreadValues({}, options), {
          modifiers: [
            ...options.modifiers,
            {
              name: "eventListeners",
              enabled: false
            }
          ]
        }));
      }
      this.fireEvent("hide", this.el);
      dispatch("hide.hs.tooltip", this.el, this.el);
      afterTransition(this.content, () => {
        if (this.el.classList.contains("show"))
          return false;
        this.content.classList.add("hidden");
      });
    }
    // Static methods
    static getInstance(target, isInstance = false) {
      const elInCollection = window.$hsTooltipCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      return elInCollection ? isInstance ? elInCollection : elInCollection.element.el : null;
    }
    static autoInit() {
      if (!window.$hsTooltipCollection)
        window.$hsTooltipCollection = [];
      document.querySelectorAll(".hs-tooltip").forEach((el) => {
        if (!window.$hsTooltipCollection.find(
          (elC) => {
            var _a;
            return ((_a = elC == null ? void 0 : elC.element) == null ? void 0 : _a.el) === el;
          }
        ))
          new HSTooltip(el);
      });
    }
    static show(target) {
      const elInCollection = window.$hsTooltipCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection) {
        switch (elInCollection.element.eventMode) {
          case "click":
            elInCollection.element.click();
            break;
          case "focus":
            elInCollection.element.focus();
            break;
          default:
            elInCollection.element.enter();
            break;
        }
      }
    }
    static hide(target) {
      const elInCollection = window.$hsTooltipCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection)
        elInCollection.element.hide();
    }
    // Backward compatibility
    static on(evt, target, cb) {
      const elInCollection = window.$hsTooltipCollection.find(
        (el) => el.element.el === (typeof target === "string" ? document.querySelector(target) : target)
      );
      if (elInCollection)
        elInCollection.element.events[evt] = cb;
    }
  };
  window.addEventListener("load", () => {
    HSTooltip.autoInit();
  });
  if (typeof window !== "undefined") {
    window.HSTooltip = HSTooltip;
  }
  var tooltip_default = HSTooltip;

  // node_modules/preline/src/spa/index.ts
  var COLLECTIONS = [
    { key: "copy-markup", fn: copy_markup_default },
    { key: "accordion", fn: accordion_default },
    { key: "carousel", fn: carousel_default },
    { key: "collapse", fn: collapse_default },
    { key: "combobox", fn: combobox_default },
    { key: "dropdown", fn: dropdown_default },
    { key: "input-number", fn: input_number_default },
    { key: "overlay", fn: overlay_default },
    { key: "pin-input", fn: pin_input_default },
    { key: "remove-element", fn: remove_element_default },
    { key: "scrollspy", fn: scrollspy_default },
    { key: "select", fn: select_default },
    { key: "stepper", fn: stepper_default },
    { key: "strong-password", fn: strong_password_default },
    { key: "tabs", fn: tabs_default },
    { key: "toggle-count", fn: toggle_count_default },
    { key: "toggle-password", fn: toggle_password_default },
    { key: "tooltip", fn: tooltip_default }
  ];

  // node_modules/preline/src/static/index.ts
  var HSStaticMethods = {
    getClassProperty,
    afterTransition,
    autoInit(collection = "all") {
      if (collection === "all") {
        COLLECTIONS.forEach(({ fn: fn2 }) => {
          fn2 == null ? void 0 : fn2.autoInit();
        });
      } else {
        COLLECTIONS.forEach(({ key, fn: fn2 }) => {
          if (collection.includes(key))
            fn2 == null ? void 0 : fn2.autoInit();
        });
      }
    }
  };
  if (typeof window !== "undefined") {
    window.HSStaticMethods = HSStaticMethods;
  }

  // js/app.js
  var csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
  var liveSocket = new LiveSocket("/live", Socket, {
    longPollFallbackMs: 2500,
    params: { _csrf_token: csrfToken }
  });
  import_topbar.default.config({ barColors: { 0: "#29d" }, shadowColor: "rgba(0, 0, 0, .3)" });
  window.addEventListener("phx:page-loading-start", (_info) => import_topbar.default.show(300));
  window.addEventListener("phx:page-loading-stop", (_info) => import_topbar.default.hide());
  liveSocket.connect();
  window.liveSocket = liveSocket;
  var html = document.querySelector("html");
  var isLightOrAuto = localStorage.getItem("hs_theme") === "light" || localStorage.getItem("hs_theme") === "auto" && !window.matchMedia("(prefers-color-scheme: dark)").matches;
  var isDarkOrAuto = localStorage.getItem("hs_theme") === "dark" || localStorage.getItem("hs_theme") === "auto" && window.matchMedia("(prefers-color-scheme: dark)").matches;
  if (isLightOrAuto && html.classList.contains("dark"))
    html.classList.remove("dark");
  else if (isDarkOrAuto && html.classList.contains("light"))
    html.classList.remove("light");
  else if (isDarkOrAuto && !html.classList.contains("dark"))
    html.classList.add("dark");
  else if (isLightOrAuto && !html.classList.contains("light"))
    html.classList.add("light");
})();
/**
 * @license MIT
 * topbar 2.0.0, 2023-02-04
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
/*! Bundled license information:

preline/src/plugins/base-plugin/index.ts:
  (*
   * HSBasePlugin
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/copy-markup/index.ts:
  (*
   * HSCopyMarkup
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/accordion/index.ts:
  (*
   * HSAccordion
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/carousel/index.ts:
  (*
   * HSCarousel
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/collapse/index.ts:
  (*
   * HSCollapse
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/combobox/index.ts:
  (*
   * HSComboBox
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/dropdown/index.ts:
  (*
   * HSDropdown
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/input-number/index.ts:
  (*
   * HSInputNumber
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/overlay/index.ts:
  (*
   * HSOverlay
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/pin-input/index.ts:
  (*
   * HSPinInput
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/remove-element/index.ts:
  (*
   * HSRemoveElement
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/search-by-json/index.ts:
  (*
   * HSTogglePassword
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/scrollspy/index.ts:
  (*
   * HSScrollspy
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/select/index.ts:
  (*
   * HSSelect
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/stepper/index.ts:
  (*
   * HSStepper
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/strong-password/index.ts:
  (*
   * HSStrongPassword
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/tabs/index.ts:
  (*
   * HSTabs
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/theme-switch/index.ts:
  (*
   * HSThemeSwitch
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/toggle-count/index.ts:
  (*
   * HSToggleCount
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/toggle-password/index.ts:
  (*
   * HSTogglePassword
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/plugins/tooltip/index.ts:
  (*
   * HSTooltip
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)

preline/src/static/index.ts:
  (*
   * HSStaticMethods
   * @version: 2.1.0
   * @author: HTMLStream
   * @license: Licensed under MIT (https://preline.co/docs/license.html)
   * Copyright 2023 HTMLStream
   *)
*/
//# sourceMappingURL=data:application/json;base64,
